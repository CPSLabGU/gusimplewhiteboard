/**                                                                     
 *  /file WBFunctor_types_generated.h                                   
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     


//Generated on: Tue Feb 19 16:47:38 2013
//Generated by user: carl

template <typename kPrint_WBFunctor_T>
class kPrint_WBFunctor: public WBFunctor<kPrint_WBFunctor_T> 
{
public:
        kPrint_WBFunctor(kPrint_WBFunctor_T* obj, void (kPrint_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kPrint_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kPrint_WBFunctor_T *obj, void (kPrint_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kPrint_WBFunctor<kPrint_WBFunctor_T>(obj, kPrint_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kPrint_t::get_from(m);
                (kPrint_function_t(*WBFunctor<kPrint_WBFunctor_T>::fObject->fFunction))(WBFunctor<kPrint_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kPrint_WBFunctor_T::*kPrint_function_t) (guWhiteboard::WBTypes, std::string &);
};


template <typename kSay_WBFunctor_T>
class kSay_WBFunctor: public WBFunctor<kSay_WBFunctor_T> 
{
public:
        kSay_WBFunctor(kSay_WBFunctor_T* obj, void (kSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kSay_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kSay_WBFunctor_T *obj, void (kSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kSay_WBFunctor<kSay_WBFunctor_T>(obj, kSay_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kSay_t::get_from(m);
                (kSay_function_t(*WBFunctor<kSay_WBFunctor_T>::fObject->fFunction))(WBFunctor<kSay_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kSay_WBFunctor_T::*kSay_function_t) (guWhiteboard::WBTypes, std::string &);
};


template <typename kSpeech_WBFunctor_T>
class kSpeech_WBFunctor: public WBFunctor<kSpeech_WBFunctor_T> 
{
public:
        kSpeech_WBFunctor(kSpeech_WBFunctor_T* obj, void (kSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kSpeech_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kSpeech_WBFunctor_T *obj, void (kSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kSpeech_WBFunctor<kSpeech_WBFunctor_T>(obj, kSpeech_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kSpeech_t::get_from(m);
                (kSpeech_function_t(*WBFunctor<kSpeech_WBFunctor_T>::fObject->fFunction))(WBFunctor<kSpeech_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kSpeech_WBFunctor_T::*kSpeech_function_t) (guWhiteboard::WBTypes, std::string &);
};


template <typename kQSay_WBFunctor_T>
class kQSay_WBFunctor: public WBFunctor<kQSay_WBFunctor_T> 
{
public:
        kQSay_WBFunctor(kQSay_WBFunctor_T* obj, void (kQSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kQSay_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kQSay_WBFunctor_T *obj, void (kQSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kQSay_WBFunctor<kQSay_WBFunctor_T>(obj, kQSay_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kQSay_t::get_from(m);
                (kQSay_function_t(*WBFunctor<kQSay_WBFunctor_T>::fObject->fFunction))(WBFunctor<kQSay_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kQSay_WBFunctor_T::*kQSay_function_t) (guWhiteboard::WBTypes, std::string &);
};


template <typename kQSpeech_WBFunctor_T>
class kQSpeech_WBFunctor: public WBFunctor<kQSpeech_WBFunctor_T> 
{
public:
        kQSpeech_WBFunctor(kQSpeech_WBFunctor_T* obj, void (kQSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kQSpeech_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kQSpeech_WBFunctor_T *obj, void (kQSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kQSpeech_WBFunctor<kQSpeech_WBFunctor_T>(obj, kQSpeech_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kQSpeech_t::get_from(m);
                (kQSpeech_function_t(*WBFunctor<kQSpeech_WBFunctor_T>::fObject->fFunction))(WBFunctor<kQSpeech_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kQSpeech_WBFunctor_T::*kQSpeech_function_t) (guWhiteboard::WBTypes, std::string &);
};


template <typename kSpeechOutput_WBFunctor_T>
class kSpeechOutput_WBFunctor: public WBFunctor<kSpeechOutput_WBFunctor_T> 
{
public:
        kSpeechOutput_WBFunctor(kSpeechOutput_WBFunctor_T* obj, void (kSpeechOutput_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kSpeechOutput_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kSpeechOutput_WBFunctor_T *obj, void (kSpeechOutput_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kSpeechOutput_WBFunctor<kSpeechOutput_WBFunctor_T>(obj, kSpeechOutput_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kSpeechOutput_t::get_from(m);
                (kSpeechOutput_function_t(*WBFunctor<kSpeechOutput_WBFunctor_T>::fObject->fFunction))(WBFunctor<kSpeechOutput_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kSpeechOutput_WBFunctor_T::*kSpeechOutput_function_t) (guWhiteboard::WBTypes, bool &);
};


template <typename kBoolExample_WBFunctor_T>
class kBoolExample_WBFunctor: public WBFunctor<kBoolExample_WBFunctor_T> 
{
public:
        kBoolExample_WBFunctor(kBoolExample_WBFunctor_T* obj, void (kBoolExample_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kBoolExample_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kBoolExample_WBFunctor_T *obj, void (kBoolExample_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kBoolExample_WBFunctor<kBoolExample_WBFunctor_T>(obj, kBoolExample_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kBoolExample_t::get_from(m);
                (kBoolExample_function_t(*WBFunctor<kBoolExample_WBFunctor_T>::fObject->fFunction))(WBFunctor<kBoolExample_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kBoolExample_WBFunctor_T::*kBoolExample_function_t) (guWhiteboard::WBTypes, bool &);
};


#ifdef CUSTOM_CLASS_CustClass
template <typename kCustomClassExample_WBFunctor_T>
class kCustomClassExample_WBFunctor: public WBFunctor<kCustomClassExample_WBFunctor_T> 
{
public:
        kCustomClassExample_WBFunctor(kCustomClassExample_WBFunctor_T* obj, void (kCustomClassExample_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::CustClass &), guWhiteboard::WBTypes t): WBFunctor<kCustomClassExample_WBFunctor_T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kCustomClassExample_WBFunctor_T *obj, void (kCustomClassExample_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::CustClass &), guWhiteboard::WBTypes t) { return new kCustomClassExample_WBFunctor<kCustomClassExample_WBFunctor_T>(obj, kCustomClassExample_WBFunctor_T::func(f), t); }
        void call(gu_simple_message *m)
        {
                guWhiteboard::CustClass result = guWhiteboard::kCustomClassExample_t::get_from(m);
                (kCustomClassExample_function_t(*WBFunctor<kCustomClassExample_WBFunctor_T>::fObject->fFunction))(WBFunctor<kCustomClassExample_WBFunctor_T>::type_enum, &result);
        }
        
        typedef void (kCustomClassExample_WBFunctor_T::*kCustomClassExample_function_t) (guWhiteboard::WBTypes, guWhiteboard::CustClass &);
};
#endif //CustClass


