/**                                                                     
 *  /file WBFunctor_types_generated.h                                   
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     


//Generated on: Fri Apr 19 17:13:07 2013
//Generated by user: eugene

template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



#ifdef CustClass_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::CustClass &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::CustClass result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::CustClass &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::CustClass &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::CustClass &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //CustClass_DEFINED


#ifdef MOTION_SDK_Interface_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::MOTION_SDK_Interface result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //MOTION_SDK_Interface_DEFINED


#ifdef MOTION_SDK_Interface_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::MOTION_SDK_Interface result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::MOTION_SDK_Interface &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //MOTION_SDK_Interface_DEFINED


template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::vector<int> &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::vector<int> result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::vector<int> &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::vector<int> &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::vector<int> &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                float result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, float &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, float &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                float result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, float &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, float &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::vector<int> &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                std::vector<int> result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, std::vector<int> &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, std::vector<int> &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::vector<int> &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



#ifdef HAL_HeadTarget_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::HAL_HeadTarget result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //HAL_HeadTarget_DEFINED


#ifdef SENSORS_FootSensors_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_FootSensors result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_FootSensors_DEFINED


#ifdef SENSORS_BodySensors_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_BodySensors result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_BodySensors_DEFINED


#ifdef SENSORS_LedsSensors_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_LedsSensors result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_LedsSensors_DEFINED


#ifdef SENSORS_LegJointTemps_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_LegJointTemps result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_LegJointTemps_DEFINED


#ifdef SENSORS_TorsoJointTemps_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_TorsoJointTemps result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_TorsoJointTemps_DEFINED


#ifdef SENSORS_LegJointSensors_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_LegJointSensors result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_LegJointSensors_DEFINED


#ifdef SENSORS_TorsoJointSensors_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_TorsoJointSensors result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_TorsoJointSensors_DEFINED


#ifdef SENSORS_SonarSensors_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_SonarSensors result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_SonarSensors_DEFINED


#ifdef FSMControlStatus_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMControlStatus result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //FSMControlStatus_DEFINED


#ifdef FSMControlStatus_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMControlStatus result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //FSMControlStatus_DEFINED


#ifdef FSMNames_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMNames &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMNames result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMNames &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMNames &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMNames &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //FSMNames_DEFINED


#ifdef WALK_Status_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WALK_Status &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::WALK_Status result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WALK_Status &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::WALK_Status &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WALK_Status &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //WALK_Status_DEFINED


#ifdef Point2D_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Point2D &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::Point2D result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Point2D &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::Point2D &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Point2D &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //Point2D_DEFINED


#ifdef FilteredVisionObject_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FilteredVisionObject &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::FilteredVisionObject result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FilteredVisionObject &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::FilteredVisionObject &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FilteredVisionObject &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //FilteredVisionObject_DEFINED


#ifdef NAO_State_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NAO_State &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::NAO_State result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NAO_State &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::NAO_State &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NAO_State &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //NAO_State_DEFINED


#ifdef UDPReceiverNotification_DEFINED
template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::UDPReceiverNotification &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::UDPReceiverNotification result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::UDPReceiverNotification &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::UDPReceiverNotification &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::UDPReceiverNotification &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};

#endif //UDPReceiverNotification_DEFINED


template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, int &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



template <typename atomic_WBFunctor_T >
class atomic_WBFunctor: public WBFunctor<atomic_WBFunctor_T > 
{
public:
        atomic_WBFunctor(atomic_WBFunctor_T* obj, void (atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<atomic_WBFunctor_T >(obj, (void (atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::atomic_t().get_from(m);
                atomic_function_t funct((void (atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (atomic_WBFunctor_T::*atomic_function_t) (guWhiteboard::WBTypes, int &);

        static WBFunctorBase *bind(atomic_WBFunctor_T *obj, void (atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new atomic_WBFunctor<atomic_WBFunctor_T >(obj, f, t); }
};



#ifdef VisionControlStatus_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionControlStatus result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //VisionControlStatus_DEFINED


#ifdef VisionControlStatus_DEFINED
template <typename not_atomic_WBFunctor_T >
class not_atomic_WBFunctor: public WBFunctor<not_atomic_WBFunctor_T > 
{
public:
        not_atomic_WBFunctor(not_atomic_WBFunctor_T* obj, void (not_atomic_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t): WBFunctor<not_atomic_WBFunctor_T >(obj, (void (not_atomic_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionControlStatus result = guWhiteboard::not_atomic_t().get_from(m);
                not_atomic_function_t funct((void (not_atomic_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &))WBFunctor<not_atomic_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<not_atomic_WBFunctor_T >::fObject->*funct)(WBFunctor<not_atomic_WBFunctor_T >::type_enum, result);
        }
        
        typedef void (not_atomic_WBFunctor_T::*not_atomic_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &);

        static WBFunctorBase *bind(not_atomic_WBFunctor_T *obj, void (not_atomic_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t) { return new not_atomic_WBFunctor<not_atomic_WBFunctor_T >(obj, f, t); }
};

#endif //VisionControlStatus_DEFINED


