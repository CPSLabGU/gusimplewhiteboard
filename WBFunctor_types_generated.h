/**                                                                     
 *  /file WBFunctor_types_generated.h                                   
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     


//Generated on: Wed Mar 20 16:18:05 2013
//Generated by user: carl

template <typename kPrint_WBFunctor_T>
class kPrint_WBFunctor: public WBFunctor<kPrint_WBFunctor_T> 
{
public:
        kPrint_WBFunctor(kPrint_WBFunctor_T* obj, void (kPrint_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kPrint_WBFunctor_T>(obj, (void (kPrint_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kPrint_t().get_from(m);
                kPrint_function_t funct((void (kPrint_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<kPrint_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kPrint_WBFunctor_T>::fObject->*funct)(WBFunctor<kPrint_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kPrint_WBFunctor_T::*kPrint_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(kPrint_WBFunctor_T *obj, void (kPrint_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kPrint_WBFunctor<kPrint_WBFunctor_T>(obj, f, t); }
};



template <typename kSay_WBFunctor_T>
class kSay_WBFunctor: public WBFunctor<kSay_WBFunctor_T> 
{
public:
        kSay_WBFunctor(kSay_WBFunctor_T* obj, void (kSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kSay_WBFunctor_T>(obj, (void (kSay_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kSay_t().get_from(m);
                kSay_function_t funct((void (kSay_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<kSay_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kSay_WBFunctor_T>::fObject->*funct)(WBFunctor<kSay_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kSay_WBFunctor_T::*kSay_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(kSay_WBFunctor_T *obj, void (kSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kSay_WBFunctor<kSay_WBFunctor_T>(obj, f, t); }
};



template <typename kSpeech_WBFunctor_T>
class kSpeech_WBFunctor: public WBFunctor<kSpeech_WBFunctor_T> 
{
public:
        kSpeech_WBFunctor(kSpeech_WBFunctor_T* obj, void (kSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kSpeech_WBFunctor_T>(obj, (void (kSpeech_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kSpeech_t().get_from(m);
                kSpeech_function_t funct((void (kSpeech_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<kSpeech_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kSpeech_WBFunctor_T>::fObject->*funct)(WBFunctor<kSpeech_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kSpeech_WBFunctor_T::*kSpeech_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(kSpeech_WBFunctor_T *obj, void (kSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kSpeech_WBFunctor<kSpeech_WBFunctor_T>(obj, f, t); }
};



template <typename kQSay_WBFunctor_T>
class kQSay_WBFunctor: public WBFunctor<kQSay_WBFunctor_T> 
{
public:
        kQSay_WBFunctor(kQSay_WBFunctor_T* obj, void (kQSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kQSay_WBFunctor_T>(obj, (void (kQSay_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kQSay_t().get_from(m);
                kQSay_function_t funct((void (kQSay_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<kQSay_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kQSay_WBFunctor_T>::fObject->*funct)(WBFunctor<kQSay_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kQSay_WBFunctor_T::*kQSay_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(kQSay_WBFunctor_T *obj, void (kQSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kQSay_WBFunctor<kQSay_WBFunctor_T>(obj, f, t); }
};



template <typename kQSpeech_WBFunctor_T>
class kQSpeech_WBFunctor: public WBFunctor<kQSpeech_WBFunctor_T> 
{
public:
        kQSpeech_WBFunctor(kQSpeech_WBFunctor_T* obj, void (kQSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kQSpeech_WBFunctor_T>(obj, (void (kQSpeech_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kQSpeech_t().get_from(m);
                kQSpeech_function_t funct((void (kQSpeech_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<kQSpeech_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kQSpeech_WBFunctor_T>::fObject->*funct)(WBFunctor<kQSpeech_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kQSpeech_WBFunctor_T::*kQSpeech_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(kQSpeech_WBFunctor_T *obj, void (kQSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kQSpeech_WBFunctor<kQSpeech_WBFunctor_T>(obj, f, t); }
};



template <typename kSpeechOutput_WBFunctor_T>
class kSpeechOutput_WBFunctor: public WBFunctor<kSpeechOutput_WBFunctor_T> 
{
public:
        kSpeechOutput_WBFunctor(kSpeechOutput_WBFunctor_T* obj, void (kSpeechOutput_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kSpeechOutput_WBFunctor_T>(obj, (void (kSpeechOutput_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kSpeechOutput_t().get_from(m);
                kSpeechOutput_function_t funct((void (kSpeechOutput_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<kSpeechOutput_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kSpeechOutput_WBFunctor_T>::fObject->*funct)(WBFunctor<kSpeechOutput_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kSpeechOutput_WBFunctor_T::*kSpeechOutput_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(kSpeechOutput_WBFunctor_T *obj, void (kSpeechOutput_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kSpeechOutput_WBFunctor<kSpeechOutput_WBFunctor_T>(obj, f, t); }
};



template <typename kBoolExample_WBFunctor_T>
class kBoolExample_WBFunctor: public WBFunctor<kBoolExample_WBFunctor_T> 
{
public:
        kBoolExample_WBFunctor(kBoolExample_WBFunctor_T* obj, void (kBoolExample_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kBoolExample_WBFunctor_T>(obj, (void (kBoolExample_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kBoolExample_t().get_from(m);
                kBoolExample_function_t funct((void (kBoolExample_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<kBoolExample_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kBoolExample_WBFunctor_T>::fObject->*funct)(WBFunctor<kBoolExample_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kBoolExample_WBFunctor_T::*kBoolExample_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(kBoolExample_WBFunctor_T *obj, void (kBoolExample_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kBoolExample_WBFunctor<kBoolExample_WBFunctor_T>(obj, f, t); }
};



#ifdef CustClass_DEFINED
template <typename kCustomClassExample_WBFunctor_T>
class kCustomClassExample_WBFunctor: public WBFunctor<kCustomClassExample_WBFunctor_T> 
{
public:
        kCustomClassExample_WBFunctor(kCustomClassExample_WBFunctor_T* obj, void (kCustomClassExample_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::CustClass &), guWhiteboard::WBTypes t): WBFunctor<kCustomClassExample_WBFunctor_T>(obj, (void (kCustomClassExample_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                guWhiteboard::CustClass result = guWhiteboard::kCustomClassExample_t().get_from(m);
                kCustomClassExample_function_t funct((void (kCustomClassExample_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::CustClass &))WBFunctor<kCustomClassExample_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kCustomClassExample_WBFunctor_T>::fObject->*funct)(WBFunctor<kCustomClassExample_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kCustomClassExample_WBFunctor_T::*kCustomClassExample_function_t) (guWhiteboard::WBTypes, guWhiteboard::CustClass &);

        static WBFunctorBase *bind(kCustomClassExample_WBFunctor_T *obj, void (kCustomClassExample_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::CustClass &), guWhiteboard::WBTypes t) { return new kCustomClassExample_WBFunctor<kCustomClassExample_WBFunctor_T>(obj, f, t); }
};

#endif //CustClass_DEFINED


template <typename kNaoMotionPlayer_WBFunctor_T>
class kNaoMotionPlayer_WBFunctor: public WBFunctor<kNaoMotionPlayer_WBFunctor_T> 
{
public:
        kNaoMotionPlayer_WBFunctor(kNaoMotionPlayer_WBFunctor_T* obj, void (kNaoMotionPlayer_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<kNaoMotionPlayer_WBFunctor_T>(obj, (void (kNaoMotionPlayer_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::kNaoMotionPlayer_t().get_from(m);
                kNaoMotionPlayer_function_t funct((void (kNaoMotionPlayer_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<kNaoMotionPlayer_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kNaoMotionPlayer_WBFunctor_T>::fObject->*funct)(WBFunctor<kNaoMotionPlayer_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kNaoMotionPlayer_WBFunctor_T::*kNaoMotionPlayer_function_t) (guWhiteboard::WBTypes, std::string &);

        static WBFunctorBase *bind(kNaoMotionPlayer_WBFunctor_T *obj, void (kNaoMotionPlayer_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kNaoMotionPlayer_WBFunctor<kNaoMotionPlayer_WBFunctor_T>(obj, f, t); }
};



template <typename kNaoMotionPlayerIsRunning_WBFunctor_T>
class kNaoMotionPlayerIsRunning_WBFunctor: public WBFunctor<kNaoMotionPlayerIsRunning_WBFunctor_T> 
{
public:
        kNaoMotionPlayerIsRunning_WBFunctor(kNaoMotionPlayerIsRunning_WBFunctor_T* obj, void (kNaoMotionPlayerIsRunning_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kNaoMotionPlayerIsRunning_WBFunctor_T>(obj, (void (kNaoMotionPlayerIsRunning_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kNaoMotionPlayerIsRunning_t().get_from(m);
                kNaoMotionPlayerIsRunning_function_t funct((void (kNaoMotionPlayerIsRunning_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<kNaoMotionPlayerIsRunning_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kNaoMotionPlayerIsRunning_WBFunctor_T>::fObject->*funct)(WBFunctor<kNaoMotionPlayerIsRunning_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kNaoMotionPlayerIsRunning_WBFunctor_T::*kNaoMotionPlayerIsRunning_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(kNaoMotionPlayerIsRunning_WBFunctor_T *obj, void (kNaoMotionPlayerIsRunning_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kNaoMotionPlayerIsRunning_WBFunctor<kNaoMotionPlayerIsRunning_WBFunctor_T>(obj, f, t); }
};



template <typename kNaoWalk_WBFunctor_T>
class kNaoWalk_WBFunctor: public WBFunctor<kNaoWalk_WBFunctor_T> 
{
public:
        kNaoWalk_WBFunctor(kNaoWalk_WBFunctor_T* obj, void (kNaoWalk_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::vector<int>  &), guWhiteboard::WBTypes t): WBFunctor<kNaoWalk_WBFunctor_T>(obj, (void (kNaoWalk_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::vector<int>  result = guWhiteboard::kNaoWalk_t().get_from(m);
                kNaoWalk_function_t funct((void (kNaoWalk_WBFunctor_T::*)(guWhiteboard::WBTypes, std::vector<int>  &))WBFunctor<kNaoWalk_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kNaoWalk_WBFunctor_T>::fObject->*funct)(WBFunctor<kNaoWalk_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kNaoWalk_WBFunctor_T::*kNaoWalk_function_t) (guWhiteboard::WBTypes, std::vector<int>  &);

        static WBFunctorBase *bind(kNaoWalk_WBFunctor_T *obj, void (kNaoWalk_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::vector<int>  &), guWhiteboard::WBTypes t) { return new kNaoWalk_WBFunctor<kNaoWalk_WBFunctor_T>(obj, f, t); }
};



template <typename kNaoWalkIsRunning_WBFunctor_T>
class kNaoWalkIsRunning_WBFunctor: public WBFunctor<kNaoWalkIsRunning_WBFunctor_T> 
{
public:
        kNaoWalkIsRunning_WBFunctor(kNaoWalkIsRunning_WBFunctor_T* obj, void (kNaoWalkIsRunning_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kNaoWalkIsRunning_WBFunctor_T>(obj, (void (kNaoWalkIsRunning_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kNaoWalkIsRunning_t().get_from(m);
                kNaoWalkIsRunning_function_t funct((void (kNaoWalkIsRunning_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<kNaoWalkIsRunning_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kNaoWalkIsRunning_WBFunctor_T>::fObject->*funct)(WBFunctor<kNaoWalkIsRunning_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kNaoWalkIsRunning_WBFunctor_T::*kNaoWalkIsRunning_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(kNaoWalkIsRunning_WBFunctor_T *obj, void (kNaoWalkIsRunning_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kNaoWalkIsRunning_WBFunctor<kNaoWalkIsRunning_WBFunctor_T>(obj, f, t); }
};



template <typename kHeadStiffness_WBFunctor_T>
class kHeadStiffness_WBFunctor: public WBFunctor<kHeadStiffness_WBFunctor_T> 
{
public:
        kHeadStiffness_WBFunctor(kHeadStiffness_WBFunctor_T* obj, void (kHeadStiffness_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t): WBFunctor<kHeadStiffness_WBFunctor_T>(obj, (void (kHeadStiffness_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                float result = guWhiteboard::kHeadStiffness_t().get_from(m);
                kHeadStiffness_function_t funct((void (kHeadStiffness_WBFunctor_T::*)(guWhiteboard::WBTypes, float &))WBFunctor<kHeadStiffness_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kHeadStiffness_WBFunctor_T>::fObject->*funct)(WBFunctor<kHeadStiffness_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kHeadStiffness_WBFunctor_T::*kHeadStiffness_function_t) (guWhiteboard::WBTypes, float &);

        static WBFunctorBase *bind(kHeadStiffness_WBFunctor_T *obj, void (kHeadStiffness_WBFunctor_T::*f)(guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t) { return new kHeadStiffness_WBFunctor<kHeadStiffness_WBFunctor_T>(obj, f, t); }
};



template <typename kHoldingStiffness_WBFunctor_T>
class kHoldingStiffness_WBFunctor: public WBFunctor<kHoldingStiffness_WBFunctor_T> 
{
public:
        kHoldingStiffness_WBFunctor(kHoldingStiffness_WBFunctor_T* obj, void (kHoldingStiffness_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t): WBFunctor<kHoldingStiffness_WBFunctor_T>(obj, (void (kHoldingStiffness_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                float result = guWhiteboard::kHoldingStiffness_t().get_from(m);
                kHoldingStiffness_function_t funct((void (kHoldingStiffness_WBFunctor_T::*)(guWhiteboard::WBTypes, float &))WBFunctor<kHoldingStiffness_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kHoldingStiffness_WBFunctor_T>::fObject->*funct)(WBFunctor<kHoldingStiffness_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kHoldingStiffness_WBFunctor_T::*kHoldingStiffness_function_t) (guWhiteboard::WBTypes, float &);

        static WBFunctorBase *bind(kHoldingStiffness_WBFunctor_T *obj, void (kHoldingStiffness_WBFunctor_T::*f)(guWhiteboard::WBTypes, float &), guWhiteboard::WBTypes t) { return new kHoldingStiffness_WBFunctor<kHoldingStiffness_WBFunctor_T>(obj, f, t); }
};



template <typename kGenericAngleChange_WBFunctor_T>
class kGenericAngleChange_WBFunctor: public WBFunctor<kGenericAngleChange_WBFunctor_T> 
{
public:
        kGenericAngleChange_WBFunctor(kGenericAngleChange_WBFunctor_T* obj, void (kGenericAngleChange_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::vector<int>  &), guWhiteboard::WBTypes t): WBFunctor<kGenericAngleChange_WBFunctor_T>(obj, (void (kGenericAngleChange_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                std::vector<int>  result = guWhiteboard::kGenericAngleChange_t().get_from(m);
                kGenericAngleChange_function_t funct((void (kGenericAngleChange_WBFunctor_T::*)(guWhiteboard::WBTypes, std::vector<int>  &))WBFunctor<kGenericAngleChange_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kGenericAngleChange_WBFunctor_T>::fObject->*funct)(WBFunctor<kGenericAngleChange_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kGenericAngleChange_WBFunctor_T::*kGenericAngleChange_function_t) (guWhiteboard::WBTypes, std::vector<int>  &);

        static WBFunctorBase *bind(kGenericAngleChange_WBFunctor_T *obj, void (kGenericAngleChange_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::vector<int>  &), guWhiteboard::WBTypes t) { return new kGenericAngleChange_WBFunctor<kGenericAngleChange_WBFunctor_T>(obj, f, t); }
};



template <typename kGenericAngleChangeIsRunning_WBFunctor_T>
class kGenericAngleChangeIsRunning_WBFunctor: public WBFunctor<kGenericAngleChangeIsRunning_WBFunctor_T> 
{
public:
        kGenericAngleChangeIsRunning_WBFunctor(kGenericAngleChangeIsRunning_WBFunctor_T* obj, void (kGenericAngleChangeIsRunning_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<kGenericAngleChangeIsRunning_WBFunctor_T>(obj, (void (kGenericAngleChangeIsRunning_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::kGenericAngleChangeIsRunning_t().get_from(m);
                kGenericAngleChangeIsRunning_function_t funct((void (kGenericAngleChangeIsRunning_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<kGenericAngleChangeIsRunning_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kGenericAngleChangeIsRunning_WBFunctor_T>::fObject->*funct)(WBFunctor<kGenericAngleChangeIsRunning_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kGenericAngleChangeIsRunning_WBFunctor_T::*kGenericAngleChangeIsRunning_function_t) (guWhiteboard::WBTypes, bool &);

        static WBFunctorBase *bind(kGenericAngleChangeIsRunning_WBFunctor_T *obj, void (kGenericAngleChangeIsRunning_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kGenericAngleChangeIsRunning_WBFunctor<kGenericAngleChangeIsRunning_WBFunctor_T>(obj, f, t); }
};



#ifdef HAL_HeadTarget_DEFINED
template <typename kHAL_HeadTarget_WBFunctor_T>
class kHAL_HeadTarget_WBFunctor: public WBFunctor<kHAL_HeadTarget_WBFunctor_T> 
{
public:
        kHAL_HeadTarget_WBFunctor(kHAL_HeadTarget_WBFunctor_T* obj, void (kHAL_HeadTarget_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &), guWhiteboard::WBTypes t): WBFunctor<kHAL_HeadTarget_WBFunctor_T>(obj, (void (kHAL_HeadTarget_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { };

        void call(gu_simple_message *m)
        {
                guWhiteboard::HAL_HeadTarget result = guWhiteboard::kHAL_HeadTarget_t().get_from(m);
                kHAL_HeadTarget_function_t funct((void (kHAL_HeadTarget_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &))WBFunctor<kHAL_HeadTarget_WBFunctor_T>::get_s_func_ptr());
                (WBFunctor<kHAL_HeadTarget_WBFunctor_T>::fObject->*funct)(WBFunctor<kHAL_HeadTarget_WBFunctor_T>::type_enum, result);
        }
        
        typedef void (kHAL_HeadTarget_WBFunctor_T::*kHAL_HeadTarget_function_t) (guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &);

        static WBFunctorBase *bind(kHAL_HeadTarget_WBFunctor_T *obj, void (kHAL_HeadTarget_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &), guWhiteboard::WBTypes t) { return new kHAL_HeadTarget_WBFunctor<kHAL_HeadTarget_WBFunctor_T>(obj, f, t); }
};

#endif //HAL_HeadTarget_DEFINED


