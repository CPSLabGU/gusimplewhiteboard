/**                                                                     
 *  /file WBFunctor_types_generated.h                                   
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     

#pragma clang diagnostic push                                           
#pragma clang diagnostic ignored "-Wpadded"                           
#pragma clang diagnostic ignored "-Wold-style-cast"                   

//Generated on: Wed Nov 25 18:17:29 2015
//Generated by user: vlad

        
        /**
        * WBFunctor definition for Print_WBFunctor_T
        */
template <typename Print_WBFunctor_T >
class Print_WBFunctor: public WBFunctor<Print_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Print_WBFunctor_T
        */
        Print_WBFunctor(Print_WBFunctor_T* obj, void (Print_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Print_WBFunctor_T >(obj, (void (Print_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Print_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Print_t().get_from(m);
                Print_function_t funct((void (Print_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Print_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Print_WBFunctor_T >::fObject->*funct)(WBFunctor<Print_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Print_WBFunctor_T::*Print_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Print_WBFunctor_T *obj, void (Print_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Print_WBFunctor<Print_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for Say_WBFunctor_T
        */
template <typename Say_WBFunctor_T >
class Say_WBFunctor: public WBFunctor<Say_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Say_WBFunctor_T
        */
        Say_WBFunctor(Say_WBFunctor_T* obj, void (Say_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Say_WBFunctor_T >(obj, (void (Say_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Say_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Say_t().get_from(m);
                Say_function_t funct((void (Say_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Say_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Say_WBFunctor_T >::fObject->*funct)(WBFunctor<Say_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Say_WBFunctor_T::*Say_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Say_WBFunctor_T *obj, void (Say_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Say_WBFunctor<Say_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for Speech_WBFunctor_T
        */
template <typename Speech_WBFunctor_T >
class Speech_WBFunctor: public WBFunctor<Speech_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Speech_WBFunctor_T
        */
        Speech_WBFunctor(Speech_WBFunctor_T* obj, void (Speech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Speech_WBFunctor_T >(obj, (void (Speech_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Speech_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Speech_t().get_from(m);
                Speech_function_t funct((void (Speech_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Speech_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Speech_WBFunctor_T >::fObject->*funct)(WBFunctor<Speech_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Speech_WBFunctor_T::*Speech_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Speech_WBFunctor_T *obj, void (Speech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Speech_WBFunctor<Speech_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for QSay_WBFunctor_T
        */
template <typename QSay_WBFunctor_T >
class QSay_WBFunctor: public WBFunctor<QSay_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for QSay_WBFunctor_T
        */
        QSay_WBFunctor(QSay_WBFunctor_T* obj, void (QSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<QSay_WBFunctor_T >(obj, (void (QSay_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class QSay_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::QSay_t().get_from(m);
                QSay_function_t funct((void (QSay_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<QSay_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<QSay_WBFunctor_T >::fObject->*funct)(WBFunctor<QSay_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (QSay_WBFunctor_T::*QSay_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(QSay_WBFunctor_T *obj, void (QSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new QSay_WBFunctor<QSay_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for QSpeech_WBFunctor_T
        */
template <typename QSpeech_WBFunctor_T >
class QSpeech_WBFunctor: public WBFunctor<QSpeech_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for QSpeech_WBFunctor_T
        */
        QSpeech_WBFunctor(QSpeech_WBFunctor_T* obj, void (QSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<QSpeech_WBFunctor_T >(obj, (void (QSpeech_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class QSpeech_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::QSpeech_t().get_from(m);
                QSpeech_function_t funct((void (QSpeech_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<QSpeech_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<QSpeech_WBFunctor_T >::fObject->*funct)(WBFunctor<QSpeech_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (QSpeech_WBFunctor_T::*QSpeech_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(QSpeech_WBFunctor_T *obj, void (QSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new QSpeech_WBFunctor<QSpeech_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for SpeechOutput_WBFunctor_T
        */
template <typename SpeechOutput_WBFunctor_T >
class SpeechOutput_WBFunctor: public WBFunctor<SpeechOutput_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SpeechOutput_WBFunctor_T
        */
        SpeechOutput_WBFunctor(SpeechOutput_WBFunctor_T* obj, void (SpeechOutput_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<SpeechOutput_WBFunctor_T >(obj, (void (SpeechOutput_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SpeechOutput_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::SpeechOutput_t().get_from(m);
                SpeechOutput_function_t funct((void (SpeechOutput_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<SpeechOutput_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SpeechOutput_WBFunctor_T >::fObject->*funct)(WBFunctor<SpeechOutput_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SpeechOutput_WBFunctor_T::*SpeechOutput_function_t) (guWhiteboard::WBTypes, bool &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SpeechOutput_WBFunctor_T *obj, void (SpeechOutput_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new SpeechOutput_WBFunctor<SpeechOutput_WBFunctor_T >(obj, f, t); }
};



#ifdef GCGameState_DEFINED
        
        /**
        * WBFunctor definition for GCGameState_WBFunctor_T
        */
template <typename GCGameState_WBFunctor_T >
class GCGameState_WBFunctor: public WBFunctor<GCGameState_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for GCGameState_WBFunctor_T
        */
        GCGameState_WBFunctor(GCGameState_WBFunctor_T* obj, void (GCGameState_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::GCGameState &), guWhiteboard::WBTypes t): WBFunctor<GCGameState_WBFunctor_T >(obj, (void (GCGameState_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class GCGameState_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::GCGameState result = guWhiteboard::GCGameState_t().get_from(m);
                GCGameState_function_t funct((void (GCGameState_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::GCGameState &))WBFunctor<GCGameState_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<GCGameState_WBFunctor_T >::fObject->*funct)(WBFunctor<GCGameState_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (GCGameState_WBFunctor_T::*GCGameState_function_t) (guWhiteboard::WBTypes, guWhiteboard::GCGameState &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(GCGameState_WBFunctor_T *obj, void (GCGameState_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::GCGameState &), guWhiteboard::WBTypes t) { return new GCGameState_WBFunctor<GCGameState_WBFunctor_T >(obj, f, t); }
};

#endif //GCGameState_DEFINED


#ifdef WALK_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for WALK_Command_WBFunctor_T
        */
template <typename WALK_Command_WBFunctor_T >
class WALK_Command_WBFunctor: public WBFunctor<WALK_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WALK_Command_WBFunctor_T
        */
        WALK_Command_WBFunctor(WALK_Command_WBFunctor_T* obj, void (WALK_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<WALK_Command_WBFunctor_T >(obj, (void (WALK_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WALK_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WALK_ControlStatus result = guWhiteboard::WALK_Command_t().get_from(m);
                WALK_Command_function_t funct((void (WALK_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &))WBFunctor<WALK_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WALK_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<WALK_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WALK_Command_WBFunctor_T::*WALK_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WALK_Command_WBFunctor_T *obj, void (WALK_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &), guWhiteboard::WBTypes t) { return new WALK_Command_WBFunctor<WALK_Command_WBFunctor_T >(obj, f, t); }
};

#endif //WALK_ControlStatus_DEFINED


#ifdef WALK_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for WALK_Status_WBFunctor_T
        */
template <typename WALK_Status_WBFunctor_T >
class WALK_Status_WBFunctor: public WBFunctor<WALK_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WALK_Status_WBFunctor_T
        */
        WALK_Status_WBFunctor(WALK_Status_WBFunctor_T* obj, void (WALK_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<WALK_Status_WBFunctor_T >(obj, (void (WALK_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WALK_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WALK_ControlStatus result = guWhiteboard::WALK_Status_t().get_from(m);
                WALK_Status_function_t funct((void (WALK_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &))WBFunctor<WALK_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WALK_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<WALK_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WALK_Status_WBFunctor_T::*WALK_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WALK_Status_WBFunctor_T *obj, void (WALK_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WALK_ControlStatus &), guWhiteboard::WBTypes t) { return new WALK_Status_WBFunctor<WALK_Status_WBFunctor_T >(obj, f, t); }
};

#endif //WALK_ControlStatus_DEFINED


#ifdef MOTION_Commands_DEFINED
        
        /**
        * WBFunctor definition for MOTION_Commands_WBFunctor_T
        */
template <typename MOTION_Commands_WBFunctor_T >
class MOTION_Commands_WBFunctor: public WBFunctor<MOTION_Commands_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for MOTION_Commands_WBFunctor_T
        */
        MOTION_Commands_WBFunctor(MOTION_Commands_WBFunctor_T* obj, void (MOTION_Commands_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::MOTION_Commands &), guWhiteboard::WBTypes t): WBFunctor<MOTION_Commands_WBFunctor_T >(obj, (void (MOTION_Commands_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class MOTION_Commands_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::MOTION_Commands result = guWhiteboard::MOTION_Commands_t().get_from(m);
                MOTION_Commands_function_t funct((void (MOTION_Commands_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::MOTION_Commands &))WBFunctor<MOTION_Commands_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<MOTION_Commands_WBFunctor_T >::fObject->*funct)(WBFunctor<MOTION_Commands_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (MOTION_Commands_WBFunctor_T::*MOTION_Commands_function_t) (guWhiteboard::WBTypes, guWhiteboard::MOTION_Commands &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(MOTION_Commands_WBFunctor_T *obj, void (MOTION_Commands_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::MOTION_Commands &), guWhiteboard::WBTypes t) { return new MOTION_Commands_WBFunctor<MOTION_Commands_WBFunctor_T >(obj, f, t); }
};

#endif //MOTION_Commands_DEFINED


#ifdef MOTION_Status_DEFINED
        
        /**
        * WBFunctor definition for MOTION_Status_WBFunctor_T
        */
template <typename MOTION_Status_WBFunctor_T >
class MOTION_Status_WBFunctor: public WBFunctor<MOTION_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for MOTION_Status_WBFunctor_T
        */
        MOTION_Status_WBFunctor(MOTION_Status_WBFunctor_T* obj, void (MOTION_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::MOTION_Status &), guWhiteboard::WBTypes t): WBFunctor<MOTION_Status_WBFunctor_T >(obj, (void (MOTION_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class MOTION_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::MOTION_Status result = guWhiteboard::MOTION_Status_t().get_from(m);
                MOTION_Status_function_t funct((void (MOTION_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::MOTION_Status &))WBFunctor<MOTION_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<MOTION_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<MOTION_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (MOTION_Status_WBFunctor_T::*MOTION_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::MOTION_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(MOTION_Status_WBFunctor_T *obj, void (MOTION_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::MOTION_Status &), guWhiteboard::WBTypes t) { return new MOTION_Status_WBFunctor<MOTION_Status_WBFunctor_T >(obj, f, t); }
};

#endif //MOTION_Status_DEFINED


#ifdef HAL_HeadTarget_DEFINED
        
        /**
        * WBFunctor definition for HAL_HeadTarget_WBFunctor_T
        */
template <typename HAL_HeadTarget_WBFunctor_T >
class HAL_HeadTarget_WBFunctor: public WBFunctor<HAL_HeadTarget_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for HAL_HeadTarget_WBFunctor_T
        */
        HAL_HeadTarget_WBFunctor(HAL_HeadTarget_WBFunctor_T* obj, void (HAL_HeadTarget_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &), guWhiteboard::WBTypes t): WBFunctor<HAL_HeadTarget_WBFunctor_T >(obj, (void (HAL_HeadTarget_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class HAL_HeadTarget_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::HAL_HeadTarget result = guWhiteboard::HAL_HeadTarget_t().get_from(m);
                HAL_HeadTarget_function_t funct((void (HAL_HeadTarget_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &))WBFunctor<HAL_HeadTarget_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<HAL_HeadTarget_WBFunctor_T >::fObject->*funct)(WBFunctor<HAL_HeadTarget_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (HAL_HeadTarget_WBFunctor_T::*HAL_HeadTarget_function_t) (guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(HAL_HeadTarget_WBFunctor_T *obj, void (HAL_HeadTarget_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::HAL_HeadTarget &), guWhiteboard::WBTypes t) { return new HAL_HeadTarget_WBFunctor<HAL_HeadTarget_WBFunctor_T >(obj, f, t); }
};

#endif //HAL_HeadTarget_DEFINED


#ifdef SENSORS_FootSensors_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_FootSensors_WBFunctor_T
        */
template <typename SENSORS_FootSensors_WBFunctor_T >
class SENSORS_FootSensors_WBFunctor: public WBFunctor<SENSORS_FootSensors_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_FootSensors_WBFunctor_T
        */
        SENSORS_FootSensors_WBFunctor(SENSORS_FootSensors_WBFunctor_T* obj, void (SENSORS_FootSensors_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_FootSensors_WBFunctor_T >(obj, (void (SENSORS_FootSensors_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_FootSensors_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_FootSensors result = guWhiteboard::SENSORS_FootSensors_t().get_from(m);
                SENSORS_FootSensors_function_t funct((void (SENSORS_FootSensors_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &))WBFunctor<SENSORS_FootSensors_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_FootSensors_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_FootSensors_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_FootSensors_WBFunctor_T::*SENSORS_FootSensors_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_FootSensors_WBFunctor_T *obj, void (SENSORS_FootSensors_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_FootSensors &), guWhiteboard::WBTypes t) { return new SENSORS_FootSensors_WBFunctor<SENSORS_FootSensors_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_FootSensors_DEFINED


#ifdef SENSORS_BodySensors_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_BodySensors_WBFunctor_T
        */
template <typename SENSORS_BodySensors_WBFunctor_T >
class SENSORS_BodySensors_WBFunctor: public WBFunctor<SENSORS_BodySensors_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_BodySensors_WBFunctor_T
        */
        SENSORS_BodySensors_WBFunctor(SENSORS_BodySensors_WBFunctor_T* obj, void (SENSORS_BodySensors_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_BodySensors_WBFunctor_T >(obj, (void (SENSORS_BodySensors_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_BodySensors_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_BodySensors result = guWhiteboard::SENSORS_BodySensors_t().get_from(m);
                SENSORS_BodySensors_function_t funct((void (SENSORS_BodySensors_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &))WBFunctor<SENSORS_BodySensors_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_BodySensors_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_BodySensors_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_BodySensors_WBFunctor_T::*SENSORS_BodySensors_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_BodySensors_WBFunctor_T *obj, void (SENSORS_BodySensors_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_BodySensors &), guWhiteboard::WBTypes t) { return new SENSORS_BodySensors_WBFunctor<SENSORS_BodySensors_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_BodySensors_DEFINED


#ifdef SENSORS_LedsSensors_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_LedsSensors_WBFunctor_T
        */
template <typename SENSORS_LedsSensors_WBFunctor_T >
class SENSORS_LedsSensors_WBFunctor: public WBFunctor<SENSORS_LedsSensors_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_LedsSensors_WBFunctor_T
        */
        SENSORS_LedsSensors_WBFunctor(SENSORS_LedsSensors_WBFunctor_T* obj, void (SENSORS_LedsSensors_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_LedsSensors_WBFunctor_T >(obj, (void (SENSORS_LedsSensors_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_LedsSensors_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_LedsSensors result = guWhiteboard::SENSORS_LedsSensors_t().get_from(m);
                SENSORS_LedsSensors_function_t funct((void (SENSORS_LedsSensors_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &))WBFunctor<SENSORS_LedsSensors_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_LedsSensors_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_LedsSensors_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_LedsSensors_WBFunctor_T::*SENSORS_LedsSensors_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_LedsSensors_WBFunctor_T *obj, void (SENSORS_LedsSensors_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LedsSensors &), guWhiteboard::WBTypes t) { return new SENSORS_LedsSensors_WBFunctor<SENSORS_LedsSensors_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_LedsSensors_DEFINED


#ifdef SENSORS_LegJointTemps_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_LegJointTemps_WBFunctor_T
        */
template <typename SENSORS_LegJointTemps_WBFunctor_T >
class SENSORS_LegJointTemps_WBFunctor: public WBFunctor<SENSORS_LegJointTemps_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_LegJointTemps_WBFunctor_T
        */
        SENSORS_LegJointTemps_WBFunctor(SENSORS_LegJointTemps_WBFunctor_T* obj, void (SENSORS_LegJointTemps_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_LegJointTemps_WBFunctor_T >(obj, (void (SENSORS_LegJointTemps_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_LegJointTemps_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_LegJointTemps result = guWhiteboard::SENSORS_LegJointTemps_t().get_from(m);
                SENSORS_LegJointTemps_function_t funct((void (SENSORS_LegJointTemps_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &))WBFunctor<SENSORS_LegJointTemps_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_LegJointTemps_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_LegJointTemps_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_LegJointTemps_WBFunctor_T::*SENSORS_LegJointTemps_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_LegJointTemps_WBFunctor_T *obj, void (SENSORS_LegJointTemps_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointTemps &), guWhiteboard::WBTypes t) { return new SENSORS_LegJointTemps_WBFunctor<SENSORS_LegJointTemps_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_LegJointTemps_DEFINED


#ifdef SENSORS_TorsoJointTemps_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_TorsoJointTemps_WBFunctor_T
        */
template <typename SENSORS_TorsoJointTemps_WBFunctor_T >
class SENSORS_TorsoJointTemps_WBFunctor: public WBFunctor<SENSORS_TorsoJointTemps_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_TorsoJointTemps_WBFunctor_T
        */
        SENSORS_TorsoJointTemps_WBFunctor(SENSORS_TorsoJointTemps_WBFunctor_T* obj, void (SENSORS_TorsoJointTemps_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_TorsoJointTemps_WBFunctor_T >(obj, (void (SENSORS_TorsoJointTemps_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_TorsoJointTemps_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_TorsoJointTemps result = guWhiteboard::SENSORS_TorsoJointTemps_t().get_from(m);
                SENSORS_TorsoJointTemps_function_t funct((void (SENSORS_TorsoJointTemps_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &))WBFunctor<SENSORS_TorsoJointTemps_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_TorsoJointTemps_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_TorsoJointTemps_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_TorsoJointTemps_WBFunctor_T::*SENSORS_TorsoJointTemps_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_TorsoJointTemps_WBFunctor_T *obj, void (SENSORS_TorsoJointTemps_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointTemps &), guWhiteboard::WBTypes t) { return new SENSORS_TorsoJointTemps_WBFunctor<SENSORS_TorsoJointTemps_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_TorsoJointTemps_DEFINED


#ifdef SENSORS_LegJointSensors_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_LegJointSensors_WBFunctor_T
        */
template <typename SENSORS_LegJointSensors_WBFunctor_T >
class SENSORS_LegJointSensors_WBFunctor: public WBFunctor<SENSORS_LegJointSensors_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_LegJointSensors_WBFunctor_T
        */
        SENSORS_LegJointSensors_WBFunctor(SENSORS_LegJointSensors_WBFunctor_T* obj, void (SENSORS_LegJointSensors_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_LegJointSensors_WBFunctor_T >(obj, (void (SENSORS_LegJointSensors_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_LegJointSensors_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_LegJointSensors result = guWhiteboard::SENSORS_LegJointSensors_t().get_from(m);
                SENSORS_LegJointSensors_function_t funct((void (SENSORS_LegJointSensors_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &))WBFunctor<SENSORS_LegJointSensors_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_LegJointSensors_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_LegJointSensors_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_LegJointSensors_WBFunctor_T::*SENSORS_LegJointSensors_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_LegJointSensors_WBFunctor_T *obj, void (SENSORS_LegJointSensors_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_LegJointSensors &), guWhiteboard::WBTypes t) { return new SENSORS_LegJointSensors_WBFunctor<SENSORS_LegJointSensors_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_LegJointSensors_DEFINED


#ifdef SENSORS_TorsoJointSensors_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_TorsoJointSensors_WBFunctor_T
        */
template <typename SENSORS_TorsoJointSensors_WBFunctor_T >
class SENSORS_TorsoJointSensors_WBFunctor: public WBFunctor<SENSORS_TorsoJointSensors_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_TorsoJointSensors_WBFunctor_T
        */
        SENSORS_TorsoJointSensors_WBFunctor(SENSORS_TorsoJointSensors_WBFunctor_T* obj, void (SENSORS_TorsoJointSensors_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_TorsoJointSensors_WBFunctor_T >(obj, (void (SENSORS_TorsoJointSensors_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_TorsoJointSensors_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_TorsoJointSensors result = guWhiteboard::SENSORS_TorsoJointSensors_t().get_from(m);
                SENSORS_TorsoJointSensors_function_t funct((void (SENSORS_TorsoJointSensors_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &))WBFunctor<SENSORS_TorsoJointSensors_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_TorsoJointSensors_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_TorsoJointSensors_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_TorsoJointSensors_WBFunctor_T::*SENSORS_TorsoJointSensors_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_TorsoJointSensors_WBFunctor_T *obj, void (SENSORS_TorsoJointSensors_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_TorsoJointSensors &), guWhiteboard::WBTypes t) { return new SENSORS_TorsoJointSensors_WBFunctor<SENSORS_TorsoJointSensors_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_TorsoJointSensors_DEFINED


#ifdef SENSORS_SonarSensors_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_SonarSensors_WBFunctor_T
        */
template <typename SENSORS_SonarSensors_WBFunctor_T >
class SENSORS_SonarSensors_WBFunctor: public WBFunctor<SENSORS_SonarSensors_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_SonarSensors_WBFunctor_T
        */
        SENSORS_SonarSensors_WBFunctor(SENSORS_SonarSensors_WBFunctor_T* obj, void (SENSORS_SonarSensors_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_SonarSensors_WBFunctor_T >(obj, (void (SENSORS_SonarSensors_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_SonarSensors_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_SonarSensors result = guWhiteboard::SENSORS_SonarSensors_t().get_from(m);
                SENSORS_SonarSensors_function_t funct((void (SENSORS_SonarSensors_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &))WBFunctor<SENSORS_SonarSensors_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_SonarSensors_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_SonarSensors_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_SonarSensors_WBFunctor_T::*SENSORS_SonarSensors_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_SonarSensors_WBFunctor_T *obj, void (SENSORS_SonarSensors_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_SonarSensors &), guWhiteboard::WBTypes t) { return new SENSORS_SonarSensors_WBFunctor<SENSORS_SonarSensors_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_SonarSensors_DEFINED


#ifdef FSMControlStatus_DEFINED
        
        /**
        * WBFunctor definition for FSM_Control_WBFunctor_T
        */
template <typename FSM_Control_WBFunctor_T >
class FSM_Control_WBFunctor: public WBFunctor<FSM_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_Control_WBFunctor_T
        */
        FSM_Control_WBFunctor(FSM_Control_WBFunctor_T* obj, void (FSM_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t): WBFunctor<FSM_Control_WBFunctor_T >(obj, (void (FSM_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMControlStatus result = guWhiteboard::FSM_Control_t().get_from(m);
                FSM_Control_function_t funct((void (FSM_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &))WBFunctor<FSM_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_Control_WBFunctor_T::*FSM_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_Control_WBFunctor_T *obj, void (FSM_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t) { return new FSM_Control_WBFunctor<FSM_Control_WBFunctor_T >(obj, f, t); }
};

#endif //FSMControlStatus_DEFINED


#ifdef FSMControlStatus_DEFINED
        
        /**
        * WBFunctor definition for FSM_Status_WBFunctor_T
        */
template <typename FSM_Status_WBFunctor_T >
class FSM_Status_WBFunctor: public WBFunctor<FSM_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_Status_WBFunctor_T
        */
        FSM_Status_WBFunctor(FSM_Status_WBFunctor_T* obj, void (FSM_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t): WBFunctor<FSM_Status_WBFunctor_T >(obj, (void (FSM_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMControlStatus result = guWhiteboard::FSM_Status_t().get_from(m);
                FSM_Status_function_t funct((void (FSM_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &))WBFunctor<FSM_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_Status_WBFunctor_T::*FSM_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_Status_WBFunctor_T *obj, void (FSM_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t) { return new FSM_Status_WBFunctor<FSM_Status_WBFunctor_T >(obj, f, t); }
};

#endif //FSMControlStatus_DEFINED


#ifdef FSMNames_DEFINED
        
        /**
        * WBFunctor definition for FSM_Names_WBFunctor_T
        */
template <typename FSM_Names_WBFunctor_T >
class FSM_Names_WBFunctor: public WBFunctor<FSM_Names_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_Names_WBFunctor_T
        */
        FSM_Names_WBFunctor(FSM_Names_WBFunctor_T* obj, void (FSM_Names_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMNames &), guWhiteboard::WBTypes t): WBFunctor<FSM_Names_WBFunctor_T >(obj, (void (FSM_Names_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_Names_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMNames result = guWhiteboard::FSM_Names_t().get_from(m);
                FSM_Names_function_t funct((void (FSM_Names_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMNames &))WBFunctor<FSM_Names_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_Names_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_Names_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_Names_WBFunctor_T::*FSM_Names_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMNames &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_Names_WBFunctor_T *obj, void (FSM_Names_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMNames &), guWhiteboard::WBTypes t) { return new FSM_Names_WBFunctor<FSM_Names_WBFunctor_T >(obj, f, t); }
};

#endif //FSMNames_DEFINED


#ifdef FilteredArrayOneDimObjects_DEFINED
        
        /**
        * WBFunctor definition for FilteredGoalSighting_WBFunctor_T
        */
template <typename FilteredGoalSighting_WBFunctor_T >
class FilteredGoalSighting_WBFunctor: public WBFunctor<FilteredGoalSighting_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FilteredGoalSighting_WBFunctor_T
        */
        FilteredGoalSighting_WBFunctor(FilteredGoalSighting_WBFunctor_T* obj, void (FilteredGoalSighting_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimObjects &), guWhiteboard::WBTypes t): WBFunctor<FilteredGoalSighting_WBFunctor_T >(obj, (void (FilteredGoalSighting_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FilteredGoalSighting_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FilteredArrayOneDimObjects result = guWhiteboard::FilteredGoalSighting_t().get_from(m);
                FilteredGoalSighting_function_t funct((void (FilteredGoalSighting_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimObjects &))WBFunctor<FilteredGoalSighting_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FilteredGoalSighting_WBFunctor_T >::fObject->*funct)(WBFunctor<FilteredGoalSighting_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FilteredGoalSighting_WBFunctor_T::*FilteredGoalSighting_function_t) (guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimObjects &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FilteredGoalSighting_WBFunctor_T *obj, void (FilteredGoalSighting_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimObjects &), guWhiteboard::WBTypes t) { return new FilteredGoalSighting_WBFunctor<FilteredGoalSighting_WBFunctor_T >(obj, f, t); }
};

#endif //FilteredArrayOneDimObjects_DEFINED


#ifdef NAO_State_DEFINED
        
        /**
        * WBFunctor definition for NAO_State_WBFunctor_T
        */
template <typename NAO_State_WBFunctor_T >
class NAO_State_WBFunctor: public WBFunctor<NAO_State_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for NAO_State_WBFunctor_T
        */
        NAO_State_WBFunctor(NAO_State_WBFunctor_T* obj, void (NAO_State_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NAO_State &), guWhiteboard::WBTypes t): WBFunctor<NAO_State_WBFunctor_T >(obj, (void (NAO_State_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class NAO_State_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::NAO_State result = guWhiteboard::NAO_State_t().get_from(m);
                NAO_State_function_t funct((void (NAO_State_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NAO_State &))WBFunctor<NAO_State_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<NAO_State_WBFunctor_T >::fObject->*funct)(WBFunctor<NAO_State_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (NAO_State_WBFunctor_T::*NAO_State_function_t) (guWhiteboard::WBTypes, guWhiteboard::NAO_State &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(NAO_State_WBFunctor_T *obj, void (NAO_State_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NAO_State &), guWhiteboard::WBTypes t) { return new NAO_State_WBFunctor<NAO_State_WBFunctor_T >(obj, f, t); }
};

#endif //NAO_State_DEFINED


#ifdef GCGameState_DEFINED
        
        /**
        * WBFunctor definition for UDPRN_WBFunctor_T
        */
template <typename UDPRN_WBFunctor_T >
class UDPRN_WBFunctor: public WBFunctor<UDPRN_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for UDPRN_WBFunctor_T
        */
        UDPRN_WBFunctor(UDPRN_WBFunctor_T* obj, void (UDPRN_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::GCGameState &), guWhiteboard::WBTypes t): WBFunctor<UDPRN_WBFunctor_T >(obj, (void (UDPRN_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class UDPRN_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::GCGameState result = guWhiteboard::UDPRN_t().get_from(m);
                UDPRN_function_t funct((void (UDPRN_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::GCGameState &))WBFunctor<UDPRN_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<UDPRN_WBFunctor_T >::fObject->*funct)(WBFunctor<UDPRN_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (UDPRN_WBFunctor_T::*UDPRN_function_t) (guWhiteboard::WBTypes, guWhiteboard::GCGameState &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(UDPRN_WBFunctor_T *obj, void (UDPRN_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::GCGameState &), guWhiteboard::WBTypes t) { return new UDPRN_WBFunctor<UDPRN_WBFunctor_T >(obj, f, t); }
};

#endif //GCGameState_DEFINED


        
        /**
        * WBFunctor definition for PlayerNumber_WBFunctor_T
        */
template <typename PlayerNumber_WBFunctor_T >
class PlayerNumber_WBFunctor: public WBFunctor<PlayerNumber_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for PlayerNumber_WBFunctor_T
        */
        PlayerNumber_WBFunctor(PlayerNumber_WBFunctor_T* obj, void (PlayerNumber_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<PlayerNumber_WBFunctor_T >(obj, (void (PlayerNumber_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class PlayerNumber_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::PlayerNumber_t().get_from(m);
                PlayerNumber_function_t funct((void (PlayerNumber_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<PlayerNumber_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<PlayerNumber_WBFunctor_T >::fObject->*funct)(WBFunctor<PlayerNumber_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (PlayerNumber_WBFunctor_T::*PlayerNumber_function_t) (guWhiteboard::WBTypes, int &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(PlayerNumber_WBFunctor_T *obj, void (PlayerNumber_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new PlayerNumber_WBFunctor<PlayerNumber_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for ManuallyPenalized_WBFunctor_T
        */
template <typename ManuallyPenalized_WBFunctor_T >
class ManuallyPenalized_WBFunctor: public WBFunctor<ManuallyPenalized_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for ManuallyPenalized_WBFunctor_T
        */
        ManuallyPenalized_WBFunctor(ManuallyPenalized_WBFunctor_T* obj, void (ManuallyPenalized_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<ManuallyPenalized_WBFunctor_T >(obj, (void (ManuallyPenalized_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class ManuallyPenalized_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::ManuallyPenalized_t().get_from(m);
                ManuallyPenalized_function_t funct((void (ManuallyPenalized_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<ManuallyPenalized_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<ManuallyPenalized_WBFunctor_T >::fObject->*funct)(WBFunctor<ManuallyPenalized_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (ManuallyPenalized_WBFunctor_T::*ManuallyPenalized_function_t) (guWhiteboard::WBTypes, int &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(ManuallyPenalized_WBFunctor_T *obj, void (ManuallyPenalized_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new ManuallyPenalized_WBFunctor<ManuallyPenalized_WBFunctor_T >(obj, f, t); }
};



#ifdef VisionControlStatus_DEFINED
        
        /**
        * WBFunctor definition for Vision_Control_WBFunctor_T
        */
template <typename Vision_Control_WBFunctor_T >
class Vision_Control_WBFunctor: public WBFunctor<Vision_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Vision_Control_WBFunctor_T
        */
        Vision_Control_WBFunctor(Vision_Control_WBFunctor_T* obj, void (Vision_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t): WBFunctor<Vision_Control_WBFunctor_T >(obj, (void (Vision_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Vision_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionControlStatus result = guWhiteboard::Vision_Control_t().get_from(m);
                Vision_Control_function_t funct((void (Vision_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &))WBFunctor<Vision_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Vision_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<Vision_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Vision_Control_WBFunctor_T::*Vision_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Vision_Control_WBFunctor_T *obj, void (Vision_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t) { return new Vision_Control_WBFunctor<Vision_Control_WBFunctor_T >(obj, f, t); }
};

#endif //VisionControlStatus_DEFINED


#ifdef VisionControlStatus_DEFINED
        
        /**
        * WBFunctor definition for Vision_Status_WBFunctor_T
        */
template <typename Vision_Status_WBFunctor_T >
class Vision_Status_WBFunctor: public WBFunctor<Vision_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Vision_Status_WBFunctor_T
        */
        Vision_Status_WBFunctor(Vision_Status_WBFunctor_T* obj, void (Vision_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t): WBFunctor<Vision_Status_WBFunctor_T >(obj, (void (Vision_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Vision_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionControlStatus result = guWhiteboard::Vision_Status_t().get_from(m);
                Vision_Status_function_t funct((void (Vision_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &))WBFunctor<Vision_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Vision_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<Vision_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Vision_Status_WBFunctor_T::*Vision_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Vision_Status_WBFunctor_T *obj, void (Vision_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionControlStatus &), guWhiteboard::WBTypes t) { return new Vision_Status_WBFunctor<Vision_Status_WBFunctor_T >(obj, f, t); }
};

#endif //VisionControlStatus_DEFINED


#ifdef FFTStatus_DEFINED
        
        /**
        * WBFunctor definition for FFTStatus_WBFunctor_T
        */
template <typename FFTStatus_WBFunctor_T >
class FFTStatus_WBFunctor: public WBFunctor<FFTStatus_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FFTStatus_WBFunctor_T
        */
        FFTStatus_WBFunctor(FFTStatus_WBFunctor_T* obj, void (FFTStatus_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FFTStatus &), guWhiteboard::WBTypes t): WBFunctor<FFTStatus_WBFunctor_T >(obj, (void (FFTStatus_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FFTStatus_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FFTStatus result = guWhiteboard::FFTStatus_t().get_from(m);
                FFTStatus_function_t funct((void (FFTStatus_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FFTStatus &))WBFunctor<FFTStatus_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FFTStatus_WBFunctor_T >::fObject->*funct)(WBFunctor<FFTStatus_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FFTStatus_WBFunctor_T::*FFTStatus_function_t) (guWhiteboard::WBTypes, guWhiteboard::FFTStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FFTStatus_WBFunctor_T *obj, void (FFTStatus_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FFTStatus &), guWhiteboard::WBTypes t) { return new FFTStatus_WBFunctor<FFTStatus_WBFunctor_T >(obj, f, t); }
};

#endif //FFTStatus_DEFINED


#ifdef FilteredArrayOneDimSonar_DEFINED
        
        /**
        * WBFunctor definition for FSOsighting_WBFunctor_T
        */
template <typename FSOsighting_WBFunctor_T >
class FSOsighting_WBFunctor: public WBFunctor<FSOsighting_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSOsighting_WBFunctor_T
        */
        FSOsighting_WBFunctor(FSOsighting_WBFunctor_T* obj, void (FSOsighting_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimSonar &), guWhiteboard::WBTypes t): WBFunctor<FSOsighting_WBFunctor_T >(obj, (void (FSOsighting_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSOsighting_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FilteredArrayOneDimSonar result = guWhiteboard::FSOsighting_t().get_from(m);
                FSOsighting_function_t funct((void (FSOsighting_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimSonar &))WBFunctor<FSOsighting_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSOsighting_WBFunctor_T >::fObject->*funct)(WBFunctor<FSOsighting_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSOsighting_WBFunctor_T::*FSOsighting_function_t) (guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimSonar &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSOsighting_WBFunctor_T *obj, void (FSOsighting_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimSonar &), guWhiteboard::WBTypes t) { return new FSOsighting_WBFunctor<FSOsighting_WBFunctor_T >(obj, f, t); }
};

#endif //FilteredArrayOneDimSonar_DEFINED


#ifdef TopParticles_DEFINED
        
        /**
        * WBFunctor definition for TopParticles_WBFunctor_T
        */
template <typename TopParticles_WBFunctor_T >
class TopParticles_WBFunctor: public WBFunctor<TopParticles_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for TopParticles_WBFunctor_T
        */
        TopParticles_WBFunctor(TopParticles_WBFunctor_T* obj, void (TopParticles_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::TopParticles &), guWhiteboard::WBTypes t): WBFunctor<TopParticles_WBFunctor_T >(obj, (void (TopParticles_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class TopParticles_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::TopParticles result = guWhiteboard::TopParticles_t().get_from(m);
                TopParticles_function_t funct((void (TopParticles_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::TopParticles &))WBFunctor<TopParticles_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<TopParticles_WBFunctor_T >::fObject->*funct)(WBFunctor<TopParticles_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (TopParticles_WBFunctor_T::*TopParticles_function_t) (guWhiteboard::WBTypes, guWhiteboard::TopParticles &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(TopParticles_WBFunctor_T *obj, void (TopParticles_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::TopParticles &), guWhiteboard::WBTypes t) { return new TopParticles_WBFunctor<TopParticles_WBFunctor_T >(obj, f, t); }
};

#endif //TopParticles_DEFINED


#ifdef FilteredArrayOneDimBall_DEFINED
        
        /**
        * WBFunctor definition for FilteredBallSighting_WBFunctor_T
        */
template <typename FilteredBallSighting_WBFunctor_T >
class FilteredBallSighting_WBFunctor: public WBFunctor<FilteredBallSighting_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FilteredBallSighting_WBFunctor_T
        */
        FilteredBallSighting_WBFunctor(FilteredBallSighting_WBFunctor_T* obj, void (FilteredBallSighting_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimBall &), guWhiteboard::WBTypes t): WBFunctor<FilteredBallSighting_WBFunctor_T >(obj, (void (FilteredBallSighting_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FilteredBallSighting_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FilteredArrayOneDimBall result = guWhiteboard::FilteredBallSighting_t().get_from(m);
                FilteredBallSighting_function_t funct((void (FilteredBallSighting_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimBall &))WBFunctor<FilteredBallSighting_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FilteredBallSighting_WBFunctor_T >::fObject->*funct)(WBFunctor<FilteredBallSighting_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FilteredBallSighting_WBFunctor_T::*FilteredBallSighting_function_t) (guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimBall &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FilteredBallSighting_WBFunctor_T *obj, void (FilteredBallSighting_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FilteredArrayOneDimBall &), guWhiteboard::WBTypes t) { return new FilteredBallSighting_WBFunctor<FilteredBallSighting_WBFunctor_T >(obj, f, t); }
};

#endif //FilteredArrayOneDimBall_DEFINED


        
        /**
        * WBFunctor definition for PF_ControlStatus_Modes_WBFunctor_T
        */
template <typename PF_ControlStatus_Modes_WBFunctor_T >
class PF_ControlStatus_Modes_WBFunctor: public WBFunctor<PF_ControlStatus_Modes_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for PF_ControlStatus_Modes_WBFunctor_T
        */
        PF_ControlStatus_Modes_WBFunctor(PF_ControlStatus_Modes_WBFunctor_T* obj, void (PF_ControlStatus_Modes_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<PF_ControlStatus_Modes_WBFunctor_T >(obj, (void (PF_ControlStatus_Modes_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class PF_ControlStatus_Modes_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::PF_ControlStatus_Modes_t().get_from(m);
                PF_ControlStatus_Modes_function_t funct((void (PF_ControlStatus_Modes_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<PF_ControlStatus_Modes_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<PF_ControlStatus_Modes_WBFunctor_T >::fObject->*funct)(WBFunctor<PF_ControlStatus_Modes_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (PF_ControlStatus_Modes_WBFunctor_T::*PF_ControlStatus_Modes_function_t) (guWhiteboard::WBTypes, int &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(PF_ControlStatus_Modes_WBFunctor_T *obj, void (PF_ControlStatus_Modes_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new PF_ControlStatus_Modes_WBFunctor<PF_ControlStatus_Modes_WBFunctor_T >(obj, f, t); }
};



#ifdef WEBOTS_NXT_bridge_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_bridge_WBFunctor_T
        */
template <typename WEBOTS_NXT_bridge_WBFunctor_T >
class WEBOTS_NXT_bridge_WBFunctor: public WBFunctor<WEBOTS_NXT_bridge_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_bridge_WBFunctor_T
        */
        WEBOTS_NXT_bridge_WBFunctor(WEBOTS_NXT_bridge_WBFunctor_T* obj, void (WEBOTS_NXT_bridge_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bridge &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_bridge_WBFunctor_T >(obj, (void (WEBOTS_NXT_bridge_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_bridge_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_bridge result = guWhiteboard::WEBOTS_NXT_bridge_t().get_from(m);
                WEBOTS_NXT_bridge_function_t funct((void (WEBOTS_NXT_bridge_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bridge &))WBFunctor<WEBOTS_NXT_bridge_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_bridge_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_bridge_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_bridge_WBFunctor_T::*WEBOTS_NXT_bridge_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bridge &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_bridge_WBFunctor_T *obj, void (WEBOTS_NXT_bridge_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bridge &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_bridge_WBFunctor<WEBOTS_NXT_bridge_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_bridge_DEFINED


#ifdef WEBOTS_NXT_encoders_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_encoders_WBFunctor_T
        */
template <typename WEBOTS_NXT_encoders_WBFunctor_T >
class WEBOTS_NXT_encoders_WBFunctor: public WBFunctor<WEBOTS_NXT_encoders_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_encoders_WBFunctor_T
        */
        WEBOTS_NXT_encoders_WBFunctor(WEBOTS_NXT_encoders_WBFunctor_T* obj, void (WEBOTS_NXT_encoders_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_encoders &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_encoders_WBFunctor_T >(obj, (void (WEBOTS_NXT_encoders_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_encoders_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_encoders result = guWhiteboard::WEBOTS_NXT_encoders_t().get_from(m);
                WEBOTS_NXT_encoders_function_t funct((void (WEBOTS_NXT_encoders_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_encoders &))WBFunctor<WEBOTS_NXT_encoders_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_encoders_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_encoders_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_encoders_WBFunctor_T::*WEBOTS_NXT_encoders_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_encoders &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_encoders_WBFunctor_T *obj, void (WEBOTS_NXT_encoders_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_encoders &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_encoders_WBFunctor<WEBOTS_NXT_encoders_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_encoders_DEFINED


#ifdef WEBOTS_NXT_camera_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_camera_WBFunctor_T
        */
template <typename WEBOTS_NXT_camera_WBFunctor_T >
class WEBOTS_NXT_camera_WBFunctor: public WBFunctor<WEBOTS_NXT_camera_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_camera_WBFunctor_T
        */
        WEBOTS_NXT_camera_WBFunctor(WEBOTS_NXT_camera_WBFunctor_T* obj, void (WEBOTS_NXT_camera_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_camera &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_camera_WBFunctor_T >(obj, (void (WEBOTS_NXT_camera_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_camera_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_camera result = guWhiteboard::WEBOTS_NXT_camera_t().get_from(m);
                WEBOTS_NXT_camera_function_t funct((void (WEBOTS_NXT_camera_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_camera &))WBFunctor<WEBOTS_NXT_camera_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_camera_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_camera_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_camera_WBFunctor_T::*WEBOTS_NXT_camera_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_camera &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_camera_WBFunctor_T *obj, void (WEBOTS_NXT_camera_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_camera &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_camera_WBFunctor<WEBOTS_NXT_camera_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_camera_DEFINED


#ifdef WEBOTS_NXT_walk_isRunning_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_walk_isRunning_WBFunctor_T
        */
template <typename WEBOTS_NXT_walk_isRunning_WBFunctor_T >
class WEBOTS_NXT_walk_isRunning_WBFunctor: public WBFunctor<WEBOTS_NXT_walk_isRunning_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_walk_isRunning_WBFunctor_T
        */
        WEBOTS_NXT_walk_isRunning_WBFunctor(WEBOTS_NXT_walk_isRunning_WBFunctor_T* obj, void (WEBOTS_NXT_walk_isRunning_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_walk_isRunning &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_walk_isRunning_WBFunctor_T >(obj, (void (WEBOTS_NXT_walk_isRunning_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_walk_isRunning_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_walk_isRunning result = guWhiteboard::WEBOTS_NXT_walk_isRunning_t().get_from(m);
                WEBOTS_NXT_walk_isRunning_function_t funct((void (WEBOTS_NXT_walk_isRunning_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_walk_isRunning &))WBFunctor<WEBOTS_NXT_walk_isRunning_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_walk_isRunning_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_walk_isRunning_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_walk_isRunning_WBFunctor_T::*WEBOTS_NXT_walk_isRunning_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_walk_isRunning &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_walk_isRunning_WBFunctor_T *obj, void (WEBOTS_NXT_walk_isRunning_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_walk_isRunning &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_walk_isRunning_WBFunctor<WEBOTS_NXT_walk_isRunning_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_walk_isRunning_DEFINED


#ifdef WEBOTS_NXT_deadReakoning_walk_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_deadReakoning_walk_WBFunctor_T
        */
template <typename WEBOTS_NXT_deadReakoning_walk_WBFunctor_T >
class WEBOTS_NXT_deadReakoning_walk_WBFunctor: public WBFunctor<WEBOTS_NXT_deadReakoning_walk_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_deadReakoning_walk_WBFunctor_T
        */
        WEBOTS_NXT_deadReakoning_walk_WBFunctor(WEBOTS_NXT_deadReakoning_walk_WBFunctor_T* obj, void (WEBOTS_NXT_deadReakoning_walk_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_deadReakoning_walk &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_deadReakoning_walk_WBFunctor_T >(obj, (void (WEBOTS_NXT_deadReakoning_walk_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_deadReakoning_walk_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_deadReakoning_walk result = guWhiteboard::WEBOTS_NXT_deadReakoning_walk_t().get_from(m);
                WEBOTS_NXT_deadReakoning_walk_function_t funct((void (WEBOTS_NXT_deadReakoning_walk_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_deadReakoning_walk &))WBFunctor<WEBOTS_NXT_deadReakoning_walk_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_deadReakoning_walk_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_deadReakoning_walk_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_deadReakoning_walk_WBFunctor_T::*WEBOTS_NXT_deadReakoning_walk_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_deadReakoning_walk &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_deadReakoning_walk_WBFunctor_T *obj, void (WEBOTS_NXT_deadReakoning_walk_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_deadReakoning_walk &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_deadReakoning_walk_WBFunctor<WEBOTS_NXT_deadReakoning_walk_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_deadReakoning_walk_DEFINED


#ifdef WEBOTS_NXT_colorLine_walk_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_colorLine_walk_WBFunctor_T
        */
template <typename WEBOTS_NXT_colorLine_walk_WBFunctor_T >
class WEBOTS_NXT_colorLine_walk_WBFunctor: public WBFunctor<WEBOTS_NXT_colorLine_walk_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_colorLine_walk_WBFunctor_T
        */
        WEBOTS_NXT_colorLine_walk_WBFunctor(WEBOTS_NXT_colorLine_walk_WBFunctor_T* obj, void (WEBOTS_NXT_colorLine_walk_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_colorLine_walk &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_colorLine_walk_WBFunctor_T >(obj, (void (WEBOTS_NXT_colorLine_walk_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_colorLine_walk_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_colorLine_walk result = guWhiteboard::WEBOTS_NXT_colorLine_walk_t().get_from(m);
                WEBOTS_NXT_colorLine_walk_function_t funct((void (WEBOTS_NXT_colorLine_walk_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_colorLine_walk &))WBFunctor<WEBOTS_NXT_colorLine_walk_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_colorLine_walk_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_colorLine_walk_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_colorLine_walk_WBFunctor_T::*WEBOTS_NXT_colorLine_walk_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_colorLine_walk &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_colorLine_walk_WBFunctor_T *obj, void (WEBOTS_NXT_colorLine_walk_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_colorLine_walk &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_colorLine_walk_WBFunctor<WEBOTS_NXT_colorLine_walk_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_colorLine_walk_DEFINED


#ifdef WEBOTS_NXT_gridMotions_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_gridMotions_WBFunctor_T
        */
template <typename WEBOTS_NXT_gridMotions_WBFunctor_T >
class WEBOTS_NXT_gridMotions_WBFunctor: public WBFunctor<WEBOTS_NXT_gridMotions_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_gridMotions_WBFunctor_T
        */
        WEBOTS_NXT_gridMotions_WBFunctor(WEBOTS_NXT_gridMotions_WBFunctor_T* obj, void (WEBOTS_NXT_gridMotions_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_gridMotions &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_gridMotions_WBFunctor_T >(obj, (void (WEBOTS_NXT_gridMotions_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_gridMotions_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_gridMotions result = guWhiteboard::WEBOTS_NXT_gridMotions_t().get_from(m);
                WEBOTS_NXT_gridMotions_function_t funct((void (WEBOTS_NXT_gridMotions_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_gridMotions &))WBFunctor<WEBOTS_NXT_gridMotions_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_gridMotions_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_gridMotions_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_gridMotions_WBFunctor_T::*WEBOTS_NXT_gridMotions_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_gridMotions &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_gridMotions_WBFunctor_T *obj, void (WEBOTS_NXT_gridMotions_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_gridMotions &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_gridMotions_WBFunctor<WEBOTS_NXT_gridMotions_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_gridMotions_DEFINED


#ifdef VisionBall_DEFINED
        
        /**
        * WBFunctor definition for VisionBall_WBFunctor_T
        */
template <typename VisionBall_WBFunctor_T >
class VisionBall_WBFunctor: public WBFunctor<VisionBall_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for VisionBall_WBFunctor_T
        */
        VisionBall_WBFunctor(VisionBall_WBFunctor_T* obj, void (VisionBall_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionBall &), guWhiteboard::WBTypes t): WBFunctor<VisionBall_WBFunctor_T >(obj, (void (VisionBall_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class VisionBall_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionBall result = guWhiteboard::VisionBall_t().get_from(m);
                VisionBall_function_t funct((void (VisionBall_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionBall &))WBFunctor<VisionBall_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<VisionBall_WBFunctor_T >::fObject->*funct)(WBFunctor<VisionBall_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (VisionBall_WBFunctor_T::*VisionBall_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionBall &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(VisionBall_WBFunctor_T *obj, void (VisionBall_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionBall &), guWhiteboard::WBTypes t) { return new VisionBall_WBFunctor<VisionBall_WBFunctor_T >(obj, f, t); }
};

#endif //VisionBall_DEFINED


#ifdef VisionGoals_DEFINED
        
        /**
        * WBFunctor definition for VisionGoals_WBFunctor_T
        */
template <typename VisionGoals_WBFunctor_T >
class VisionGoals_WBFunctor: public WBFunctor<VisionGoals_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for VisionGoals_WBFunctor_T
        */
        VisionGoals_WBFunctor(VisionGoals_WBFunctor_T* obj, void (VisionGoals_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionGoals &), guWhiteboard::WBTypes t): WBFunctor<VisionGoals_WBFunctor_T >(obj, (void (VisionGoals_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class VisionGoals_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionGoals result = guWhiteboard::VisionGoals_t().get_from(m);
                VisionGoals_function_t funct((void (VisionGoals_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionGoals &))WBFunctor<VisionGoals_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<VisionGoals_WBFunctor_T >::fObject->*funct)(WBFunctor<VisionGoals_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (VisionGoals_WBFunctor_T::*VisionGoals_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionGoals &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(VisionGoals_WBFunctor_T *obj, void (VisionGoals_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionGoals &), guWhiteboard::WBTypes t) { return new VisionGoals_WBFunctor<VisionGoals_WBFunctor_T >(obj, f, t); }
};

#endif //VisionGoals_DEFINED


#ifdef WalkData_DEFINED
        
        /**
        * WBFunctor definition for WalkData_WBFunctor_T
        */
template <typename WalkData_WBFunctor_T >
class WalkData_WBFunctor: public WBFunctor<WalkData_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WalkData_WBFunctor_T
        */
        WalkData_WBFunctor(WalkData_WBFunctor_T* obj, void (WalkData_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WalkData &), guWhiteboard::WBTypes t): WBFunctor<WalkData_WBFunctor_T >(obj, (void (WalkData_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WalkData_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WalkData result = guWhiteboard::WalkData_t().get_from(m);
                WalkData_function_t funct((void (WalkData_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WalkData &))WBFunctor<WalkData_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WalkData_WBFunctor_T >::fObject->*funct)(WBFunctor<WalkData_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WalkData_WBFunctor_T::*WalkData_function_t) (guWhiteboard::WBTypes, guWhiteboard::WalkData &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WalkData_WBFunctor_T *obj, void (WalkData_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WalkData &), guWhiteboard::WBTypes t) { return new WalkData_WBFunctor<WalkData_WBFunctor_T >(obj, f, t); }
};

#endif //WalkData_DEFINED


#ifdef TeleoperationControlStatus_DEFINED
        
        /**
        * WBFunctor definition for TeleoperationControlStatus_WBFunctor_T
        */
template <typename TeleoperationControlStatus_WBFunctor_T >
class TeleoperationControlStatus_WBFunctor: public WBFunctor<TeleoperationControlStatus_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for TeleoperationControlStatus_WBFunctor_T
        */
        TeleoperationControlStatus_WBFunctor(TeleoperationControlStatus_WBFunctor_T* obj, void (TeleoperationControlStatus_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::TeleoperationControlStatus &), guWhiteboard::WBTypes t): WBFunctor<TeleoperationControlStatus_WBFunctor_T >(obj, (void (TeleoperationControlStatus_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class TeleoperationControlStatus_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::TeleoperationControlStatus result = guWhiteboard::TeleoperationControlStatus_t().get_from(m);
                TeleoperationControlStatus_function_t funct((void (TeleoperationControlStatus_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::TeleoperationControlStatus &))WBFunctor<TeleoperationControlStatus_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<TeleoperationControlStatus_WBFunctor_T >::fObject->*funct)(WBFunctor<TeleoperationControlStatus_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (TeleoperationControlStatus_WBFunctor_T::*TeleoperationControlStatus_function_t) (guWhiteboard::WBTypes, guWhiteboard::TeleoperationControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(TeleoperationControlStatus_WBFunctor_T *obj, void (TeleoperationControlStatus_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::TeleoperationControlStatus &), guWhiteboard::WBTypes t) { return new TeleoperationControlStatus_WBFunctor<TeleoperationControlStatus_WBFunctor_T >(obj, f, t); }
};

#endif //TeleoperationControlStatus_DEFINED


        
        /**
        * WBFunctor definition for TeleoperationConnection_WBFunctor_T
        */
template <typename TeleoperationConnection_WBFunctor_T >
class TeleoperationConnection_WBFunctor: public WBFunctor<TeleoperationConnection_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for TeleoperationConnection_WBFunctor_T
        */
        TeleoperationConnection_WBFunctor(TeleoperationConnection_WBFunctor_T* obj, void (TeleoperationConnection_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<TeleoperationConnection_WBFunctor_T >(obj, (void (TeleoperationConnection_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class TeleoperationConnection_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::TeleoperationConnection_t().get_from(m);
                TeleoperationConnection_function_t funct((void (TeleoperationConnection_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<TeleoperationConnection_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<TeleoperationConnection_WBFunctor_T >::fObject->*funct)(WBFunctor<TeleoperationConnection_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (TeleoperationConnection_WBFunctor_T::*TeleoperationConnection_function_t) (guWhiteboard::WBTypes, int &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(TeleoperationConnection_WBFunctor_T *obj, void (TeleoperationConnection_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new TeleoperationConnection_WBFunctor<TeleoperationConnection_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for UDPWBNumber_WBFunctor_T
        */
template <typename UDPWBNumber_WBFunctor_T >
class UDPWBNumber_WBFunctor: public WBFunctor<UDPWBNumber_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for UDPWBNumber_WBFunctor_T
        */
        UDPWBNumber_WBFunctor(UDPWBNumber_WBFunctor_T* obj, void (UDPWBNumber_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<UDPWBNumber_WBFunctor_T >(obj, (void (UDPWBNumber_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class UDPWBNumber_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::UDPWBNumber_t().get_from(m);
                UDPWBNumber_function_t funct((void (UDPWBNumber_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<UDPWBNumber_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<UDPWBNumber_WBFunctor_T >::fObject->*funct)(WBFunctor<UDPWBNumber_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (UDPWBNumber_WBFunctor_T::*UDPWBNumber_function_t) (guWhiteboard::WBTypes, int &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(UDPWBNumber_WBFunctor_T *obj, void (UDPWBNumber_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new UDPWBNumber_WBFunctor<UDPWBNumber_WBFunctor_T >(obj, f, t); }
};



#ifdef WEBOTS_NXT_bumper_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_bumper_WBFunctor_T
        */
template <typename WEBOTS_NXT_bumper_WBFunctor_T >
class WEBOTS_NXT_bumper_WBFunctor: public WBFunctor<WEBOTS_NXT_bumper_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_bumper_WBFunctor_T
        */
        WEBOTS_NXT_bumper_WBFunctor(WEBOTS_NXT_bumper_WBFunctor_T* obj, void (WEBOTS_NXT_bumper_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bumper &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_bumper_WBFunctor_T >(obj, (void (WEBOTS_NXT_bumper_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_bumper_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_bumper result = guWhiteboard::WEBOTS_NXT_bumper_t().get_from(m);
                WEBOTS_NXT_bumper_function_t funct((void (WEBOTS_NXT_bumper_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bumper &))WBFunctor<WEBOTS_NXT_bumper_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_bumper_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_bumper_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_bumper_WBFunctor_T::*WEBOTS_NXT_bumper_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bumper &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_bumper_WBFunctor_T *obj, void (WEBOTS_NXT_bumper_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_bumper &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_bumper_WBFunctor<WEBOTS_NXT_bumper_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_bumper_DEFINED


#ifdef WEBOTS_NXT_vector_bridge_DEFINED
        
        /**
        * WBFunctor definition for WEBOTS_NXT_vector_bridge_WBFunctor_T
        */
template <typename WEBOTS_NXT_vector_bridge_WBFunctor_T >
class WEBOTS_NXT_vector_bridge_WBFunctor: public WBFunctor<WEBOTS_NXT_vector_bridge_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WEBOTS_NXT_vector_bridge_WBFunctor_T
        */
        WEBOTS_NXT_vector_bridge_WBFunctor(WEBOTS_NXT_vector_bridge_WBFunctor_T* obj, void (WEBOTS_NXT_vector_bridge_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_vector_bridge &), guWhiteboard::WBTypes t): WBFunctor<WEBOTS_NXT_vector_bridge_WBFunctor_T >(obj, (void (WEBOTS_NXT_vector_bridge_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WEBOTS_NXT_vector_bridge_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WEBOTS_NXT_vector_bridge result = guWhiteboard::WEBOTS_NXT_vector_bridge_t().get_from(m);
                WEBOTS_NXT_vector_bridge_function_t funct((void (WEBOTS_NXT_vector_bridge_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_vector_bridge &))WBFunctor<WEBOTS_NXT_vector_bridge_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WEBOTS_NXT_vector_bridge_WBFunctor_T >::fObject->*funct)(WBFunctor<WEBOTS_NXT_vector_bridge_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WEBOTS_NXT_vector_bridge_WBFunctor_T::*WEBOTS_NXT_vector_bridge_function_t) (guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_vector_bridge &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WEBOTS_NXT_vector_bridge_WBFunctor_T *obj, void (WEBOTS_NXT_vector_bridge_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WEBOTS_NXT_vector_bridge &), guWhiteboard::WBTypes t) { return new WEBOTS_NXT_vector_bridge_WBFunctor<WEBOTS_NXT_vector_bridge_WBFunctor_T >(obj, f, t); }
};

#endif //WEBOTS_NXT_vector_bridge_DEFINED


#ifdef VisionLines_DEFINED
        
        /**
        * WBFunctor definition for VisionLines_WBFunctor_T
        */
template <typename VisionLines_WBFunctor_T >
class VisionLines_WBFunctor: public WBFunctor<VisionLines_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for VisionLines_WBFunctor_T
        */
        VisionLines_WBFunctor(VisionLines_WBFunctor_T* obj, void (VisionLines_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::VisionLines &), guWhiteboard::WBTypes t): WBFunctor<VisionLines_WBFunctor_T >(obj, (void (VisionLines_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class VisionLines_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::VisionLines result = guWhiteboard::VisionLines_t().get_from(m);
                VisionLines_function_t funct((void (VisionLines_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::VisionLines &))WBFunctor<VisionLines_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<VisionLines_WBFunctor_T >::fObject->*funct)(WBFunctor<VisionLines_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (VisionLines_WBFunctor_T::*VisionLines_function_t) (guWhiteboard::WBTypes, guWhiteboard::VisionLines &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(VisionLines_WBFunctor_T *obj, void (VisionLines_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::VisionLines &), guWhiteboard::WBTypes t) { return new VisionLines_WBFunctor<VisionLines_WBFunctor_T >(obj, f, t); }
};

#endif //VisionLines_DEFINED


#ifdef DifferentialRobotControlStatus_DEFINED
        
        /**
        * WBFunctor definition for DifferentialRobotStatus_WBFunctor_T
        */
template <typename DifferentialRobotStatus_WBFunctor_T >
class DifferentialRobotStatus_WBFunctor: public WBFunctor<DifferentialRobotStatus_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for DifferentialRobotStatus_WBFunctor_T
        */
        DifferentialRobotStatus_WBFunctor(DifferentialRobotStatus_WBFunctor_T* obj, void (DifferentialRobotStatus_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t): WBFunctor<DifferentialRobotStatus_WBFunctor_T >(obj, (void (DifferentialRobotStatus_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class DifferentialRobotStatus_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::DifferentialRobotControlStatus result = guWhiteboard::DifferentialRobotStatus_t().get_from(m);
                DifferentialRobotStatus_function_t funct((void (DifferentialRobotStatus_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &))WBFunctor<DifferentialRobotStatus_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<DifferentialRobotStatus_WBFunctor_T >::fObject->*funct)(WBFunctor<DifferentialRobotStatus_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (DifferentialRobotStatus_WBFunctor_T::*DifferentialRobotStatus_function_t) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(DifferentialRobotStatus_WBFunctor_T *obj, void (DifferentialRobotStatus_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t) { return new DifferentialRobotStatus_WBFunctor<DifferentialRobotStatus_WBFunctor_T >(obj, f, t); }
};

#endif //DifferentialRobotControlStatus_DEFINED


#ifdef DifferentialRobotControlStatus_DEFINED
        
        /**
        * WBFunctor definition for DifferentialRobotControl_WBFunctor_T
        */
template <typename DifferentialRobotControl_WBFunctor_T >
class DifferentialRobotControl_WBFunctor: public WBFunctor<DifferentialRobotControl_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for DifferentialRobotControl_WBFunctor_T
        */
        DifferentialRobotControl_WBFunctor(DifferentialRobotControl_WBFunctor_T* obj, void (DifferentialRobotControl_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t): WBFunctor<DifferentialRobotControl_WBFunctor_T >(obj, (void (DifferentialRobotControl_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class DifferentialRobotControl_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::DifferentialRobotControlStatus result = guWhiteboard::DifferentialRobotControl_t().get_from(m);
                DifferentialRobotControl_function_t funct((void (DifferentialRobotControl_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &))WBFunctor<DifferentialRobotControl_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<DifferentialRobotControl_WBFunctor_T >::fObject->*funct)(WBFunctor<DifferentialRobotControl_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (DifferentialRobotControl_WBFunctor_T::*DifferentialRobotControl_function_t) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(DifferentialRobotControl_WBFunctor_T *obj, void (DifferentialRobotControl_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t) { return new DifferentialRobotControl_WBFunctor<DifferentialRobotControl_WBFunctor_T >(obj, f, t); }
};

#endif //DifferentialRobotControlStatus_DEFINED


#ifdef Point2D_DEFINED
        
        /**
        * WBFunctor definition for XEyesPos_WBFunctor_T
        */
template <typename XEyesPos_WBFunctor_T >
class XEyesPos_WBFunctor: public WBFunctor<XEyesPos_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for XEyesPos_WBFunctor_T
        */
        XEyesPos_WBFunctor(XEyesPos_WBFunctor_T* obj, void (XEyesPos_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Point2D &), guWhiteboard::WBTypes t): WBFunctor<XEyesPos_WBFunctor_T >(obj, (void (XEyesPos_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class XEyesPos_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Point2D result = guWhiteboard::XEyesPos_t().get_from(m);
                XEyesPos_function_t funct((void (XEyesPos_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Point2D &))WBFunctor<XEyesPos_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<XEyesPos_WBFunctor_T >::fObject->*funct)(WBFunctor<XEyesPos_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (XEyesPos_WBFunctor_T::*XEyesPos_function_t) (guWhiteboard::WBTypes, guWhiteboard::Point2D &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(XEyesPos_WBFunctor_T *obj, void (XEyesPos_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Point2D &), guWhiteboard::WBTypes t) { return new XEyesPos_WBFunctor<XEyesPos_WBFunctor_T >(obj, f, t); }
};

#endif //Point2D_DEFINED


        
        /**
        * WBFunctor definition for VisionFace_WBFunctor_T
        */
template <typename VisionFace_WBFunctor_T >
class VisionFace_WBFunctor: public WBFunctor<VisionFace_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for VisionFace_WBFunctor_T
        */
        VisionFace_WBFunctor(VisionFace_WBFunctor_T* obj, void (VisionFace_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::vector<int> &), guWhiteboard::WBTypes t): WBFunctor<VisionFace_WBFunctor_T >(obj, (void (VisionFace_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class VisionFace_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::vector<int> result = guWhiteboard::VisionFace_t().get_from(m);
                VisionFace_function_t funct((void (VisionFace_WBFunctor_T::*)(guWhiteboard::WBTypes, std::vector<int> &))WBFunctor<VisionFace_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<VisionFace_WBFunctor_T >::fObject->*funct)(WBFunctor<VisionFace_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (VisionFace_WBFunctor_T::*VisionFace_function_t) (guWhiteboard::WBTypes, std::vector<int> &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(VisionFace_WBFunctor_T *obj, void (VisionFace_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::vector<int> &), guWhiteboard::WBTypes t) { return new VisionFace_WBFunctor<VisionFace_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for Draw_WBFunctor_T
        */
template <typename Draw_WBFunctor_T >
class Draw_WBFunctor: public WBFunctor<Draw_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Draw_WBFunctor_T
        */
        Draw_WBFunctor(Draw_WBFunctor_T* obj, void (Draw_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Draw_WBFunctor_T >(obj, (void (Draw_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Draw_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Draw_t().get_from(m);
                Draw_function_t funct((void (Draw_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Draw_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Draw_WBFunctor_T >::fObject->*funct)(WBFunctor<Draw_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Draw_WBFunctor_T::*Draw_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Draw_WBFunctor_T *obj, void (Draw_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Draw_WBFunctor<Draw_WBFunctor_T >(obj, f, t); }
};



#ifdef FSMState_DEFINED
        
        /**
        * WBFunctor definition for FSM_States_WBFunctor_T
        */
template <typename FSM_States_WBFunctor_T >
class FSM_States_WBFunctor: public WBFunctor<FSM_States_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_States_WBFunctor_T
        */
        FSM_States_WBFunctor(FSM_States_WBFunctor_T* obj, void (FSM_States_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMState &), guWhiteboard::WBTypes t): WBFunctor<FSM_States_WBFunctor_T >(obj, (void (FSM_States_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_States_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMState result = guWhiteboard::FSM_States_t().get_from(m);
                FSM_States_function_t funct((void (FSM_States_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMState &))WBFunctor<FSM_States_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_States_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_States_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_States_WBFunctor_T::*FSM_States_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMState &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_States_WBFunctor_T *obj, void (FSM_States_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMState &), guWhiteboard::WBTypes t) { return new FSM_States_WBFunctor<FSM_States_WBFunctor_T >(obj, f, t); }
};

#endif //FSMState_DEFINED


#ifdef Giraff_MainSerialInterface_DEFINED
        
        /**
        * WBFunctor definition for Giraff_Interface_Status_WBFunctor_T
        */
template <typename Giraff_Interface_Status_WBFunctor_T >
class Giraff_Interface_Status_WBFunctor: public WBFunctor<Giraff_Interface_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Giraff_Interface_Status_WBFunctor_T
        */
        Giraff_Interface_Status_WBFunctor(Giraff_Interface_Status_WBFunctor_T* obj, void (Giraff_Interface_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &), guWhiteboard::WBTypes t): WBFunctor<Giraff_Interface_Status_WBFunctor_T >(obj, (void (Giraff_Interface_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Giraff_Interface_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Giraff_MainSerialInterface result = guWhiteboard::Giraff_Interface_Status_t().get_from(m);
                Giraff_Interface_Status_function_t funct((void (Giraff_Interface_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &))WBFunctor<Giraff_Interface_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Giraff_Interface_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<Giraff_Interface_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Giraff_Interface_Status_WBFunctor_T::*Giraff_Interface_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Giraff_Interface_Status_WBFunctor_T *obj, void (Giraff_Interface_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &), guWhiteboard::WBTypes t) { return new Giraff_Interface_Status_WBFunctor<Giraff_Interface_Status_WBFunctor_T >(obj, f, t); }
};

#endif //Giraff_MainSerialInterface_DEFINED


#ifdef Giraff_MainSerialInterface_DEFINED
        
        /**
        * WBFunctor definition for Giraff_Interface_Command_WBFunctor_T
        */
template <typename Giraff_Interface_Command_WBFunctor_T >
class Giraff_Interface_Command_WBFunctor: public WBFunctor<Giraff_Interface_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Giraff_Interface_Command_WBFunctor_T
        */
        Giraff_Interface_Command_WBFunctor(Giraff_Interface_Command_WBFunctor_T* obj, void (Giraff_Interface_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &), guWhiteboard::WBTypes t): WBFunctor<Giraff_Interface_Command_WBFunctor_T >(obj, (void (Giraff_Interface_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Giraff_Interface_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Giraff_MainSerialInterface result = guWhiteboard::Giraff_Interface_Command_t().get_from(m);
                Giraff_Interface_Command_function_t funct((void (Giraff_Interface_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &))WBFunctor<Giraff_Interface_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Giraff_Interface_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<Giraff_Interface_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Giraff_Interface_Command_WBFunctor_T::*Giraff_Interface_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Giraff_Interface_Command_WBFunctor_T *obj, void (Giraff_Interface_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Giraff_MainSerialInterface &), guWhiteboard::WBTypes t) { return new Giraff_Interface_Command_WBFunctor<Giraff_Interface_Command_WBFunctor_T >(obj, f, t); }
};

#endif //Giraff_MainSerialInterface_DEFINED


#ifdef NXT_Interface_DEFINED
        
        /**
        * WBFunctor definition for NXT_Status_WBFunctor_T
        */
template <typename NXT_Status_WBFunctor_T >
class NXT_Status_WBFunctor: public WBFunctor<NXT_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for NXT_Status_WBFunctor_T
        */
        NXT_Status_WBFunctor(NXT_Status_WBFunctor_T* obj, void (NXT_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &), guWhiteboard::WBTypes t): WBFunctor<NXT_Status_WBFunctor_T >(obj, (void (NXT_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class NXT_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::NXT_Interface result = guWhiteboard::NXT_Status_t().get_from(m);
                NXT_Status_function_t funct((void (NXT_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &))WBFunctor<NXT_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<NXT_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<NXT_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (NXT_Status_WBFunctor_T::*NXT_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(NXT_Status_WBFunctor_T *obj, void (NXT_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &), guWhiteboard::WBTypes t) { return new NXT_Status_WBFunctor<NXT_Status_WBFunctor_T >(obj, f, t); }
};

#endif //NXT_Interface_DEFINED


#ifdef NXT_Interface_DEFINED
        
        /**
        * WBFunctor definition for NXT_Command_WBFunctor_T
        */
template <typename NXT_Command_WBFunctor_T >
class NXT_Command_WBFunctor: public WBFunctor<NXT_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for NXT_Command_WBFunctor_T
        */
        NXT_Command_WBFunctor(NXT_Command_WBFunctor_T* obj, void (NXT_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &), guWhiteboard::WBTypes t): WBFunctor<NXT_Command_WBFunctor_T >(obj, (void (NXT_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class NXT_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::NXT_Interface result = guWhiteboard::NXT_Command_t().get_from(m);
                NXT_Command_function_t funct((void (NXT_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &))WBFunctor<NXT_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<NXT_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<NXT_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (NXT_Command_WBFunctor_T::*NXT_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(NXT_Command_WBFunctor_T *obj, void (NXT_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NXT_Interface &), guWhiteboard::WBTypes t) { return new NXT_Command_WBFunctor<NXT_Command_WBFunctor_T >(obj, f, t); }
};

#endif //NXT_Interface_DEFINED


#ifdef APM_Interface_DEFINED
        
        /**
        * WBFunctor definition for APM_Status_WBFunctor_T
        */
template <typename APM_Status_WBFunctor_T >
class APM_Status_WBFunctor: public WBFunctor<APM_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for APM_Status_WBFunctor_T
        */
        APM_Status_WBFunctor(APM_Status_WBFunctor_T* obj, void (APM_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::APM_Interface &), guWhiteboard::WBTypes t): WBFunctor<APM_Status_WBFunctor_T >(obj, (void (APM_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class APM_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::APM_Interface result = guWhiteboard::APM_Status_t().get_from(m);
                APM_Status_function_t funct((void (APM_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::APM_Interface &))WBFunctor<APM_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<APM_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<APM_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (APM_Status_WBFunctor_T::*APM_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::APM_Interface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(APM_Status_WBFunctor_T *obj, void (APM_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::APM_Interface &), guWhiteboard::WBTypes t) { return new APM_Status_WBFunctor<APM_Status_WBFunctor_T >(obj, f, t); }
};

#endif //APM_Interface_DEFINED


#ifdef APM_Interface_DEFINED
        
        /**
        * WBFunctor definition for APM_Command_WBFunctor_T
        */
template <typename APM_Command_WBFunctor_T >
class APM_Command_WBFunctor: public WBFunctor<APM_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for APM_Command_WBFunctor_T
        */
        APM_Command_WBFunctor(APM_Command_WBFunctor_T* obj, void (APM_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::APM_Interface &), guWhiteboard::WBTypes t): WBFunctor<APM_Command_WBFunctor_T >(obj, (void (APM_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class APM_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::APM_Interface result = guWhiteboard::APM_Command_t().get_from(m);
                APM_Command_function_t funct((void (APM_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::APM_Interface &))WBFunctor<APM_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<APM_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<APM_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (APM_Command_WBFunctor_T::*APM_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::APM_Interface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(APM_Command_WBFunctor_T *obj, void (APM_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::APM_Interface &), guWhiteboard::WBTypes t) { return new APM_Command_WBFunctor<APM_Command_WBFunctor_T >(obj, f, t); }
};

#endif //APM_Interface_DEFINED


#ifdef WALK2014_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for WALK2014_Command_WBFunctor_T
        */
template <typename WALK2014_Command_WBFunctor_T >
class WALK2014_Command_WBFunctor: public WBFunctor<WALK2014_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WALK2014_Command_WBFunctor_T
        */
        WALK2014_Command_WBFunctor(WALK2014_Command_WBFunctor_T* obj, void (WALK2014_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<WALK2014_Command_WBFunctor_T >(obj, (void (WALK2014_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WALK2014_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WALK2014_ControlStatus result = guWhiteboard::WALK2014_Command_t().get_from(m);
                WALK2014_Command_function_t funct((void (WALK2014_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &))WBFunctor<WALK2014_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WALK2014_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<WALK2014_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WALK2014_Command_WBFunctor_T::*WALK2014_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WALK2014_Command_WBFunctor_T *obj, void (WALK2014_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &), guWhiteboard::WBTypes t) { return new WALK2014_Command_WBFunctor<WALK2014_Command_WBFunctor_T >(obj, f, t); }
};

#endif //WALK2014_ControlStatus_DEFINED


#ifdef WALK2014_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for WALK2014_Status_WBFunctor_T
        */
template <typename WALK2014_Status_WBFunctor_T >
class WALK2014_Status_WBFunctor: public WBFunctor<WALK2014_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for WALK2014_Status_WBFunctor_T
        */
        WALK2014_Status_WBFunctor(WALK2014_Status_WBFunctor_T* obj, void (WALK2014_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<WALK2014_Status_WBFunctor_T >(obj, (void (WALK2014_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class WALK2014_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::WALK2014_ControlStatus result = guWhiteboard::WALK2014_Status_t().get_from(m);
                WALK2014_Status_function_t funct((void (WALK2014_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &))WBFunctor<WALK2014_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<WALK2014_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<WALK2014_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (WALK2014_Status_WBFunctor_T::*WALK2014_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(WALK2014_Status_WBFunctor_T *obj, void (WALK2014_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::WALK2014_ControlStatus &), guWhiteboard::WBTypes t) { return new WALK2014_Status_WBFunctor<WALK2014_Status_WBFunctor_T >(obj, f, t); }
};

#endif //WALK2014_ControlStatus_DEFINED


        
        /**
        * WBFunctor definition for CBall_WBFunctor_T
        */
template <typename CBall_WBFunctor_T >
class CBall_WBFunctor: public WBFunctor<CBall_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for CBall_WBFunctor_T
        */
        CBall_WBFunctor(CBall_WBFunctor_T* obj, void (CBall_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t): WBFunctor<CBall_WBFunctor_T >(obj, (void (CBall_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class CBall_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                int result = guWhiteboard::CBall_t().get_from(m);
                CBall_function_t funct((void (CBall_WBFunctor_T::*)(guWhiteboard::WBTypes, int &))WBFunctor<CBall_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<CBall_WBFunctor_T >::fObject->*funct)(WBFunctor<CBall_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (CBall_WBFunctor_T::*CBall_function_t) (guWhiteboard::WBTypes, int &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(CBall_WBFunctor_T *obj, void (CBall_WBFunctor_T::*f)(guWhiteboard::WBTypes, int &), guWhiteboard::WBTypes t) { return new CBall_WBFunctor<CBall_WBFunctor_T >(obj, f, t); }
};



#ifdef OculusPrimeInterface_DEFINED
        
        /**
        * WBFunctor definition for OculusPrime_Command_WBFunctor_T
        */
template <typename OculusPrime_Command_WBFunctor_T >
class OculusPrime_Command_WBFunctor: public WBFunctor<OculusPrime_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for OculusPrime_Command_WBFunctor_T
        */
        OculusPrime_Command_WBFunctor(OculusPrime_Command_WBFunctor_T* obj, void (OculusPrime_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::OculusPrimeInterface &), guWhiteboard::WBTypes t): WBFunctor<OculusPrime_Command_WBFunctor_T >(obj, (void (OculusPrime_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class OculusPrime_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::OculusPrimeInterface result = guWhiteboard::OculusPrime_Command_t().get_from(m);
                OculusPrime_Command_function_t funct((void (OculusPrime_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::OculusPrimeInterface &))WBFunctor<OculusPrime_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<OculusPrime_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<OculusPrime_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (OculusPrime_Command_WBFunctor_T::*OculusPrime_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::OculusPrimeInterface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(OculusPrime_Command_WBFunctor_T *obj, void (OculusPrime_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::OculusPrimeInterface &), guWhiteboard::WBTypes t) { return new OculusPrime_Command_WBFunctor<OculusPrime_Command_WBFunctor_T >(obj, f, t); }
};

#endif //OculusPrimeInterface_DEFINED


#ifdef Input3D_DEFINED
        
        /**
        * WBFunctor definition for Input3D_WBFunctor_T
        */
template <typename Input3D_WBFunctor_T >
class Input3D_WBFunctor: public WBFunctor<Input3D_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Input3D_WBFunctor_T
        */
        Input3D_WBFunctor(Input3D_WBFunctor_T* obj, void (Input3D_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Input3D &), guWhiteboard::WBTypes t): WBFunctor<Input3D_WBFunctor_T >(obj, (void (Input3D_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Input3D_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Input3D result = guWhiteboard::Input3D_t().get_from(m);
                Input3D_function_t funct((void (Input3D_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Input3D &))WBFunctor<Input3D_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Input3D_WBFunctor_T >::fObject->*funct)(WBFunctor<Input3D_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Input3D_WBFunctor_T::*Input3D_function_t) (guWhiteboard::WBTypes, guWhiteboard::Input3D &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Input3D_WBFunctor_T *obj, void (Input3D_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Input3D &), guWhiteboard::WBTypes t) { return new Input3D_WBFunctor<Input3D_WBFunctor_T >(obj, f, t); }
};

#endif //Input3D_DEFINED


#ifdef Oculus_PrimeSerialInterface_DEFINED
        
        /**
        * WBFunctor definition for Oculus_Prime_Command_WBFunctor_T
        */
template <typename Oculus_Prime_Command_WBFunctor_T >
class Oculus_Prime_Command_WBFunctor: public WBFunctor<Oculus_Prime_Command_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Oculus_Prime_Command_WBFunctor_T
        */
        Oculus_Prime_Command_WBFunctor(Oculus_Prime_Command_WBFunctor_T* obj, void (Oculus_Prime_Command_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Oculus_PrimeSerialInterface &), guWhiteboard::WBTypes t): WBFunctor<Oculus_Prime_Command_WBFunctor_T >(obj, (void (Oculus_Prime_Command_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Oculus_Prime_Command_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Oculus_PrimeSerialInterface result = guWhiteboard::Oculus_Prime_Command_t().get_from(m);
                Oculus_Prime_Command_function_t funct((void (Oculus_Prime_Command_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Oculus_PrimeSerialInterface &))WBFunctor<Oculus_Prime_Command_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Oculus_Prime_Command_WBFunctor_T >::fObject->*funct)(WBFunctor<Oculus_Prime_Command_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Oculus_Prime_Command_WBFunctor_T::*Oculus_Prime_Command_function_t) (guWhiteboard::WBTypes, guWhiteboard::Oculus_PrimeSerialInterface &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Oculus_Prime_Command_WBFunctor_T *obj, void (Oculus_Prime_Command_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Oculus_PrimeSerialInterface &), guWhiteboard::WBTypes t) { return new Oculus_Prime_Command_WBFunctor<Oculus_Prime_Command_WBFunctor_T >(obj, f, t); }
};

#endif //Oculus_PrimeSerialInterface_DEFINED


#ifdef IOPins_DEFINED
        
        /**
        * WBFunctor definition for IOPins_WBFunctor_T
        */
template <typename IOPins_WBFunctor_T >
class IOPins_WBFunctor: public WBFunctor<IOPins_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for IOPins_WBFunctor_T
        */
        IOPins_WBFunctor(IOPins_WBFunctor_T* obj, void (IOPins_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::IOPins &), guWhiteboard::WBTypes t): WBFunctor<IOPins_WBFunctor_T >(obj, (void (IOPins_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class IOPins_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::IOPins result = guWhiteboard::IOPins_t().get_from(m);
                IOPins_function_t funct((void (IOPins_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::IOPins &))WBFunctor<IOPins_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<IOPins_WBFunctor_T >::fObject->*funct)(WBFunctor<IOPins_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (IOPins_WBFunctor_T::*IOPins_function_t) (guWhiteboard::WBTypes, guWhiteboard::IOPins &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(IOPins_WBFunctor_T *obj, void (IOPins_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::IOPins &), guWhiteboard::WBTypes t) { return new IOPins_WBFunctor<IOPins_WBFunctor_T >(obj, f, t); }
};

#endif //IOPins_DEFINED


#ifdef NXT_Two_Touch_Status_DEFINED
        
        /**
        * WBFunctor definition for NXT_Two_Touch_Status_WBFunctor_T
        */
template <typename NXT_Two_Touch_Status_WBFunctor_T >
class NXT_Two_Touch_Status_WBFunctor: public WBFunctor<NXT_Two_Touch_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for NXT_Two_Touch_Status_WBFunctor_T
        */
        NXT_Two_Touch_Status_WBFunctor(NXT_Two_Touch_Status_WBFunctor_T* obj, void (NXT_Two_Touch_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NXT_Two_Touch_Status &), guWhiteboard::WBTypes t): WBFunctor<NXT_Two_Touch_Status_WBFunctor_T >(obj, (void (NXT_Two_Touch_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class NXT_Two_Touch_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::NXT_Two_Touch_Status result = guWhiteboard::NXT_Two_Touch_Status_t().get_from(m);
                NXT_Two_Touch_Status_function_t funct((void (NXT_Two_Touch_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NXT_Two_Touch_Status &))WBFunctor<NXT_Two_Touch_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<NXT_Two_Touch_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<NXT_Two_Touch_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (NXT_Two_Touch_Status_WBFunctor_T::*NXT_Two_Touch_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::NXT_Two_Touch_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(NXT_Two_Touch_Status_WBFunctor_T *obj, void (NXT_Two_Touch_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NXT_Two_Touch_Status &), guWhiteboard::WBTypes t) { return new NXT_Two_Touch_Status_WBFunctor<NXT_Two_Touch_Status_WBFunctor_T >(obj, f, t); }
};

#endif //NXT_Two_Touch_Status_DEFINED


#ifdef NXT_Sound_Control_DEFINED
        
        /**
        * WBFunctor definition for NXT_Sound_Control_WBFunctor_T
        */
template <typename NXT_Sound_Control_WBFunctor_T >
class NXT_Sound_Control_WBFunctor: public WBFunctor<NXT_Sound_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for NXT_Sound_Control_WBFunctor_T
        */
        NXT_Sound_Control_WBFunctor(NXT_Sound_Control_WBFunctor_T* obj, void (NXT_Sound_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NXT_Sound_Control &), guWhiteboard::WBTypes t): WBFunctor<NXT_Sound_Control_WBFunctor_T >(obj, (void (NXT_Sound_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class NXT_Sound_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::NXT_Sound_Control result = guWhiteboard::NXT_Sound_Control_t().get_from(m);
                NXT_Sound_Control_function_t funct((void (NXT_Sound_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NXT_Sound_Control &))WBFunctor<NXT_Sound_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<NXT_Sound_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<NXT_Sound_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (NXT_Sound_Control_WBFunctor_T::*NXT_Sound_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::NXT_Sound_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(NXT_Sound_Control_WBFunctor_T *obj, void (NXT_Sound_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NXT_Sound_Control &), guWhiteboard::WBTypes t) { return new NXT_Sound_Control_WBFunctor<NXT_Sound_Control_WBFunctor_T >(obj, f, t); }
};

#endif //NXT_Sound_Control_DEFINED


#ifdef NXT_Lights_Control_DEFINED
        
        /**
        * WBFunctor definition for NXT_Lights_Control_WBFunctor_T
        */
template <typename NXT_Lights_Control_WBFunctor_T >
class NXT_Lights_Control_WBFunctor: public WBFunctor<NXT_Lights_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for NXT_Lights_Control_WBFunctor_T
        */
        NXT_Lights_Control_WBFunctor(NXT_Lights_Control_WBFunctor_T* obj, void (NXT_Lights_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::NXT_Lights_Control &), guWhiteboard::WBTypes t): WBFunctor<NXT_Lights_Control_WBFunctor_T >(obj, (void (NXT_Lights_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class NXT_Lights_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::NXT_Lights_Control result = guWhiteboard::NXT_Lights_Control_t().get_from(m);
                NXT_Lights_Control_function_t funct((void (NXT_Lights_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::NXT_Lights_Control &))WBFunctor<NXT_Lights_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<NXT_Lights_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<NXT_Lights_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (NXT_Lights_Control_WBFunctor_T::*NXT_Lights_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::NXT_Lights_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(NXT_Lights_Control_WBFunctor_T *obj, void (NXT_Lights_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::NXT_Lights_Control &), guWhiteboard::WBTypes t) { return new NXT_Lights_Control_WBFunctor<NXT_Lights_Control_WBFunctor_T >(obj, f, t); }
};

#endif //NXT_Lights_Control_DEFINED


#ifdef Clocks_DEFINED
        
        /**
        * WBFunctor definition for Clocks_WBFunctor_T
        */
template <typename Clocks_WBFunctor_T >
class Clocks_WBFunctor: public WBFunctor<Clocks_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Clocks_WBFunctor_T
        */
        Clocks_WBFunctor(Clocks_WBFunctor_T* obj, void (Clocks_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Clocks &), guWhiteboard::WBTypes t): WBFunctor<Clocks_WBFunctor_T >(obj, (void (Clocks_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Clocks_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Clocks result = guWhiteboard::Clocks_t().get_from(m);
                Clocks_function_t funct((void (Clocks_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Clocks &))WBFunctor<Clocks_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Clocks_WBFunctor_T >::fObject->*funct)(WBFunctor<Clocks_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Clocks_WBFunctor_T::*Clocks_function_t) (guWhiteboard::WBTypes, guWhiteboard::Clocks &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Clocks_WBFunctor_T *obj, void (Clocks_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Clocks &), guWhiteboard::WBTypes t) { return new Clocks_WBFunctor<Clocks_WBFunctor_T >(obj, f, t); }
};

#endif //Clocks_DEFINED


#ifdef Channels_DEFINED
        
        /**
        * WBFunctor definition for Channels_WBFunctor_T
        */
template <typename Channels_WBFunctor_T >
class Channels_WBFunctor: public WBFunctor<Channels_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Channels_WBFunctor_T
        */
        Channels_WBFunctor(Channels_WBFunctor_T* obj, void (Channels_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Channels &), guWhiteboard::WBTypes t): WBFunctor<Channels_WBFunctor_T >(obj, (void (Channels_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Channels_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Channels result = guWhiteboard::Channels_t().get_from(m);
                Channels_function_t funct((void (Channels_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Channels &))WBFunctor<Channels_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Channels_WBFunctor_T >::fObject->*funct)(WBFunctor<Channels_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Channels_WBFunctor_T::*Channels_function_t) (guWhiteboard::WBTypes, guWhiteboard::Channels &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Channels_WBFunctor_T *obj, void (Channels_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Channels &), guWhiteboard::WBTypes t) { return new Channels_WBFunctor<Channels_WBFunctor_T >(obj, f, t); }
};

#endif //Channels_DEFINED


#ifdef SwitchSubsumption_DEFINED
        
        /**
        * WBFunctor definition for SwitchSubsumption_WBFunctor_T
        */
template <typename SwitchSubsumption_WBFunctor_T >
class SwitchSubsumption_WBFunctor: public WBFunctor<SwitchSubsumption_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SwitchSubsumption_WBFunctor_T
        */
        SwitchSubsumption_WBFunctor(SwitchSubsumption_WBFunctor_T* obj, void (SwitchSubsumption_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SwitchSubsumption &), guWhiteboard::WBTypes t): WBFunctor<SwitchSubsumption_WBFunctor_T >(obj, (void (SwitchSubsumption_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SwitchSubsumption_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SwitchSubsumption result = guWhiteboard::SwitchSubsumption_t().get_from(m);
                SwitchSubsumption_function_t funct((void (SwitchSubsumption_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SwitchSubsumption &))WBFunctor<SwitchSubsumption_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SwitchSubsumption_WBFunctor_T >::fObject->*funct)(WBFunctor<SwitchSubsumption_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SwitchSubsumption_WBFunctor_T::*SwitchSubsumption_function_t) (guWhiteboard::WBTypes, guWhiteboard::SwitchSubsumption &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SwitchSubsumption_WBFunctor_T *obj, void (SwitchSubsumption_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SwitchSubsumption &), guWhiteboard::WBTypes t) { return new SwitchSubsumption_WBFunctor<SwitchSubsumption_WBFunctor_T >(obj, f, t); }
};

#endif //SwitchSubsumption_DEFINED


