/**                                                                     
 *  /file WBFunctor_types_generated.h                                   
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     


//Generated on: Tue Feb 19 16:06:30 2013
//Generated by user: carl

         template <typename kPrint_WBFunctor_T>
         class kPrint_WBFunctor: public WBFunctor<kPrint_WBFunctor_T> {
         public:
         kPrint_WBFunctor(kPrint_WBFunctor_T* obj, void (kPrint_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kPrint_WBFunctor_T *obj, void (kPrint_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kPrint_WBFunctor<kPrint_WBFunctor_T>(obj, kPrint_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
         template <typename kSay_WBFunctor_T>
         class kSay_WBFunctor: public WBFunctor<kSay_WBFunctor_T> {
         public:
         kSay_WBFunctor(kSay_WBFunctor_T* obj, void (kSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kSay_WBFunctor_T *obj, void (kSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kSay_WBFunctor<kSay_WBFunctor_T>(obj, kSay_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
         template <typename kSpeech_WBFunctor_T>
         class kSpeech_WBFunctor: public WBFunctor<kSpeech_WBFunctor_T> {
         public:
         kSpeech_WBFunctor(kSpeech_WBFunctor_T* obj, void (kSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kSpeech_WBFunctor_T *obj, void (kSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kSpeech_WBFunctor<kSpeech_WBFunctor_T>(obj, kSpeech_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
         template <typename kQSay_WBFunctor_T>
         class kQSay_WBFunctor: public WBFunctor<kQSay_WBFunctor_T> {
         public:
         kQSay_WBFunctor(kQSay_WBFunctor_T* obj, void (kQSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kQSay_WBFunctor_T *obj, void (kQSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kQSay_WBFunctor<kQSay_WBFunctor_T>(obj, kQSay_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
         template <typename kQSpeech_WBFunctor_T>
         class kQSpeech_WBFunctor: public WBFunctor<kQSpeech_WBFunctor_T> {
         public:
         kQSpeech_WBFunctor(kQSpeech_WBFunctor_T* obj, void (kQSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kQSpeech_WBFunctor_T *obj, void (kQSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new kQSpeech_WBFunctor<kQSpeech_WBFunctor_T>(obj, kQSpeech_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
         template <typename kSpeechOutput_WBFunctor_T>
         class kSpeechOutput_WBFunctor: public WBFunctor<kSpeechOutput_WBFunctor_T> {
         public:
         kSpeechOutput_WBFunctor(kSpeechOutput_WBFunctor_T* obj, void (kSpeechOutput_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kSpeechOutput_WBFunctor_T *obj, void (kSpeechOutput_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kSpeechOutput_WBFunctor<kSpeechOutput_WBFunctor_T>(obj, kSpeechOutput_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
         template <typename kBoolExample_WBFunctor_T>
         class kBoolExample_WBFunctor: public WBFunctor<kBoolExample_WBFunctor_T> {
         public:
         kBoolExample_WBFunctor(kBoolExample_WBFunctor_T* obj, void (kBoolExample_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t):          WBFunctor<T>(obj, pFunc, t) { };
        static WBFunctorBase *bind(kBoolExample_WBFunctor_T *obj, void (kBoolExample_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new kBoolExample_WBFunctor<kBoolExample_WBFunctor_T>(obj, kBoolExample_WBFunctor_T::func(f), t); }
         void call(gu_simple_message *m)
