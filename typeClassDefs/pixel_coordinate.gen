-author Callum McColl

-comment

A `pixel_coordinate` is the whiteboard representation for the position of a
pixel in an image in centered pixel coordinate. The centered pixel coordinate
coordinate system is defined using four fields (x, y, resWidth, resHeight).
The x and y fields are contained within this type, however, the resWidth
and resHeight values are contained elsewhere. This is to save space within
this message; often multiple pixel coordinates are used and having to
stipulate the resolution width and height for each coordinate is wasteful.

The x and y fields must conform to the following constraints:
    `-floor((resWidth - 1) / 2) <= x <= ceil((resWidth - 1) / 2)`,
    `-floor((resHeight - 1) / 2) <= y <= ceil((resHeight - 1) / 2)`.

This places the (0, 0) point in the center of the image. The coordinate
system can be depicted graphically as follows:
```
                            ceil((resHeight - 1) / 2)
                                       ---
                                        ^
                                        |
                                       y|
                                        |
                               -x       |        x
 -floor((resWidth - 1) / 2) |<----------|---------->| ceil((resWidth - 1) / 2)
                                  (0,0)*|
                                        |
                                      -y|
                                        |
                                        V
                                       ---
                           -floor((resHeight - 1) / 2)
```
Importantly here, the (0, 0) pixel is in the 3rd quadrant. This is because
when even numbers are used for resWidth and resHeight, the (0, 0) point
would be between pixels. Below is a table detailing the bounds for common
resolutions:

           Resolution      |                    left/rightmost pixel                |               bottom/topmost pixel
     (resWidth, resHeight) | (-floor((resWidth - 1) / 2), ceil((resWidth - 1) / 2)) | (-floor((resHeight - 1) / 2), ceil(resHeight - 1) / 2)
    -----------------------+--------------------------------------------------------+--------------------------------------------------------
     (640, 480)            | (-319, 320)                                            | (-239, 240)
     (800, 600)            | (-399, 400)                                            | (-299, 300)
     (1280, 720)           | (-639, 640)                                            | (-359, 360)
     (1920, 1080)          | (-959, 960)                                            | (-539, 540)

-properties

/**
 *  The x coordinate.
 *
 *  This coordinate represents a pixel within an image in centered pixel
 *  coordinates. This coordinate system is bound by some resolution width
 *  and height (resWidth, resHeight). This coordinate represents a position
 *  along the horizontal axis bound by `resWidth`. As such, the value assigned
 *  to this property must be in the following range in order to be in the image:
 *      -floor((resWidth - 1) / 2) <= x <= ceil((resWidth - 1) / 2)
 *
 *  This therefore shifts the center coordinate (0) to the third quadrant. The
 *  coordinate system can be depicted graphically as follows:
 *  ```
 *                             ceil((resHeight - 1) / 2)
 *                                        ---
 *                                         ^
 *                                         |
 *                                        y|
 *                                         |
 *                                -x       |        x
 *  -floor((resWidth - 1) / 2) |<----------|---------->| ceil((resWidth - 1) / 2)
 *                                   (0,0)*|
 *                                         |
 *                                       -y|
 *                                         |
 *                                         V
 *                                        ---
 *                            -floor((resHeight - 1) / 2)
 *  ```
 */
int16_t x = 0

/**
 *  The y coordinate.
 *
 *  This coordinate represents a pixel within an image in centered pixel
 *  coordinates. This coordinate system is bound by some resolution width
 *  and height (resWidth, resHeight). This coordinate represents a position
 *  along the vertical axis bound by `resHeight`. As such, the value assigned to
 *  this property must be in the following range in order to be in the image:
 *      -floor((resHeight - 1) / 2) <= y <= ceil((resHeight - 1) / 2)
 *
 *  This therefore shifts the center coordinate (0) to the third quadrant. The
 *  coordinate system can be depicted graphically as follows:
 *  ```
 *                             ceil((resHeight - 1) / 2)
 *                                        ---
 *                                         ^
 *                                         |
 *                                        y|
 *                                         |
 *                                -x       |        x
 *  -floor((resWidth - 1) / 2) |<----------|---------->| ceil((resWidth - 1) / 2)
 *                                   (0,0)*|
 *                                         |
 *                                       -y|
 *                                         |
 *                                         V
 *                                        ---
 *                            -floor((resHeight - 1) / 2)
 *  ```
 */
int16_t y = 0

-c

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>

+c

struct wb_pixel_coordinate px_coord_to_wb_px_coord(const gu_pixel_coordinate coord);

gu_pixel_coordinate wb_px_coord_to_px_coord(const struct wb_pixel_coordinate coord, const uint16_t resWidth, const uint16_t resHeight);

#c

struct wb_pixel_coordinate px_coord_to_wb_px_coord(const gu_pixel_coordinate coord)
{
    const struct wb_pixel_coordinate temp = { px_t_to_i16(coord.x), px_t_to_i16(coord.y) };
    return temp;
}

gu_pixel_coordinate wb_px_coord_to_px_coord(const struct wb_pixel_coordinate coord, const uint16_t resWidth, const uint16_t resHeight)
{
    const gu_pixel_coordinate temp = { i16_to_px_t(coord.x), i16_to_px_t(coord.y), u16_to_px_u(resWidth), u16_to_px_u(resHeight) };
    return temp;
}

-c++

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>

%c++

PixelCoordinate(const GU::PixelCoordinate &other) {
    this->init(px_t_to_i16(other.x()), px_t_to_i16(other.y()));
}

PixelCoordinate(const ::gu_pixel_coordinate &other) {
    this->init(px_t_to_i16(other.x), px_t_to_i16(other.y));
}

GU::PixelCoordinate pixelCoordinate(const uint16_t resWidth, const uint16_t resHeight)
{
    return GU::PixelCoordinate(wb_px_coord_to_px_coord(*this, resWidth, resHeight));
}

-swift

#if canImport(GUUnits) && canImport(GUCoordinates)
import GUUnits
import GUCoordinates
#endif

%swift

#if canImport(GUUnits) && canImport(GUCoordinates)
public init(_ other: GUCoordinates.PixelCoordinate) {
    self.init(x: Int16(other.x), y: Int16(other.y))
}

public init(_ other: gu_pixel_coordinate) {
    self.init(x: px_t_to_i16(other.x), y: px_t_to_i16(other.y))
}

public func pixelCoordinate(resWidth: UInt16, resHeight: UInt16) -> GUCoordinates.PixelCoordinate {
    return GUCoordinates.PixelCoordinate(x: Pixels_t(self.x), y: Pixels_t(self.y), resWidth: Pixels_u(resWidth), resHeight: Pixels_u(resHeight))
}
#endif

