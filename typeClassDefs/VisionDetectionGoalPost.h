/*
 * file VisionDetectionGoalPost.h
 *
 * This file was generated by classgenerator from vision_detection_goal_post.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2020 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef VisionDetectionGoalPost_DEFINED
#define VisionDetectionGoalPost_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include <gu_util.h>
#include "wb_vision_detection_goal_post.h"

#include "PixelCoordinate.h"

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>
#include "PixelCoordinate.h"

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>
#include "PixelCoordinate.h"

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>
#include "PixelCoordinate.h"

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_vision_detection_goal_post`.
     */
    class VisionDetectionGoalPost: public wb_vision_detection_goal_post {

    private:

        /**
         * Set the members of the class.
         */
        void init(enum GoalPostOptions t_sightingType = NoPostDetected, enum GoalPostOrientation t_orientation = GenericPost, struct wb_pixel_coordinate t_topLeftCoordinate = wb_pixel_coordinate(), struct wb_pixel_coordinate t_topRightCoordinate = wb_pixel_coordinate(), struct wb_pixel_coordinate t_bottomLeftCoordinate = wb_pixel_coordinate(), struct wb_pixel_coordinate t_bottomRightCoordinate = wb_pixel_coordinate()) {
            set_sightingType(t_sightingType);
            set_orientation(t_orientation);
            set_topLeftCoordinate(t_topLeftCoordinate);
            set_topRightCoordinate(t_topRightCoordinate);
            set_bottomLeftCoordinate(t_bottomLeftCoordinate);
            set_bottomRightCoordinate(t_bottomRightCoordinate);
        }

    public:

        /**
         * Create a new `VisionDetectionGoalPost`.
         */
        VisionDetectionGoalPost(enum GoalPostOptions t_sightingType = NoPostDetected, enum GoalPostOrientation t_orientation = GenericPost, struct wb_pixel_coordinate t_topLeftCoordinate = wb_pixel_coordinate(), struct wb_pixel_coordinate t_topRightCoordinate = wb_pixel_coordinate(), struct wb_pixel_coordinate t_bottomLeftCoordinate = wb_pixel_coordinate(), struct wb_pixel_coordinate t_bottomRightCoordinate = wb_pixel_coordinate()) {
            this->init(t_sightingType, t_orientation, t_topLeftCoordinate, t_topRightCoordinate, t_bottomLeftCoordinate, t_bottomRightCoordinate);
        }

        /**
         * Copy Constructor.
         */
        VisionDetectionGoalPost(const VisionDetectionGoalPost &t_other): wb_vision_detection_goal_post() {
            this->init(t_other.sightingType(), t_other.orientation(), t_other.topLeftCoordinate(), t_other.topRightCoordinate(), t_other.bottomLeftCoordinate(), t_other.bottomRightCoordinate());
        }

        /**
         * Copy Constructor.
         */
        VisionDetectionGoalPost(const struct wb_vision_detection_goal_post &t_other): wb_vision_detection_goal_post() {
            this->init(t_other.sightingType, t_other.orientation, t_other.topLeftCoordinate, t_other.topRightCoordinate, t_other.bottomLeftCoordinate, t_other.bottomRightCoordinate);
        }

        /**
         * Copy Assignment Operator.
         */
        VisionDetectionGoalPost &operator = (const VisionDetectionGoalPost &t_other) {
            this->init(t_other.sightingType(), t_other.orientation(), t_other.topLeftCoordinate(), t_other.topRightCoordinate(), t_other.bottomLeftCoordinate(), t_other.bottomRightCoordinate());
            return *this;
        }

        /**
         * Copy Assignment Operator.
         */
        VisionDetectionGoalPost &operator = (const struct wb_vision_detection_goal_post &t_other) {
            this->init(t_other.sightingType, t_other.orientation, t_other.topLeftCoordinate, t_other.topRightCoordinate, t_other.bottomLeftCoordinate, t_other.bottomRightCoordinate);
            return *this;
        }

        bool operator ==(const VisionDetectionGoalPost &t_other) const
        {
            return sightingType() == t_other.sightingType()
                && orientation() == t_other.orientation()
                && PixelCoordinate(topLeftCoordinate()) == PixelCoordinate(t_other.topLeftCoordinate())
                && PixelCoordinate(topRightCoordinate()) == PixelCoordinate(t_other.topRightCoordinate())
                && PixelCoordinate(bottomLeftCoordinate()) == PixelCoordinate(t_other.bottomLeftCoordinate())
                && PixelCoordinate(bottomRightCoordinate()) == PixelCoordinate(t_other.bottomRightCoordinate());
        }

        bool operator !=(const VisionDetectionGoalPost &t_other) const
        {
            return !(*this == t_other);
        }

        bool operator ==(const wb_vision_detection_goal_post &t_other) const
        {
            return *this == VisionDetectionGoalPost(t_other);
        }

        bool operator !=(const wb_vision_detection_goal_post &t_other) const
        {
            return !(*this == t_other);
        }

        enum GoalPostOptions sightingType() const
        {
            return wb_vision_detection_goal_post::sightingType;
        }

        void set_sightingType(const enum GoalPostOptions &t_newValue)
        {
            wb_vision_detection_goal_post::sightingType = t_newValue;
        }

        enum GoalPostOrientation orientation() const
        {
            return wb_vision_detection_goal_post::orientation;
        }

        void set_orientation(const enum GoalPostOrientation &t_newValue)
        {
            wb_vision_detection_goal_post::orientation = t_newValue;
        }

        const PixelCoordinate topLeftCoordinate() const
        {
            return PixelCoordinate(wb_vision_detection_goal_post::topLeftCoordinate);
        }

        void set_topLeftCoordinate(const PixelCoordinate &t_newValue)
        {
            wb_vision_detection_goal_post::topLeftCoordinate = static_cast<wb_pixel_coordinate>(t_newValue);
        }

        const PixelCoordinate topRightCoordinate() const
        {
            return PixelCoordinate(wb_vision_detection_goal_post::topRightCoordinate);
        }

        void set_topRightCoordinate(const PixelCoordinate &t_newValue)
        {
            wb_vision_detection_goal_post::topRightCoordinate = static_cast<wb_pixel_coordinate>(t_newValue);
        }

        const PixelCoordinate bottomLeftCoordinate() const
        {
            return PixelCoordinate(wb_vision_detection_goal_post::bottomLeftCoordinate);
        }

        void set_bottomLeftCoordinate(const PixelCoordinate &t_newValue)
        {
            wb_vision_detection_goal_post::bottomLeftCoordinate = static_cast<wb_pixel_coordinate>(t_newValue);
        }

        const PixelCoordinate bottomRightCoordinate() const
        {
            return PixelCoordinate(wb_vision_detection_goal_post::bottomRightCoordinate);
        }

        void set_bottomRightCoordinate(const PixelCoordinate &t_newValue)
        {
            wb_vision_detection_goal_post::bottomRightCoordinate = static_cast<wb_pixel_coordinate>(t_newValue);
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        VisionDetectionGoalPost(const std::string &t_str) {
            this->init();
            this->from_string(t_str);
        }

        std::string description() {
#ifdef USE_WB_VISION_DETECTION_GOAL_POST_C_CONVERSION
            char buffer[VISION_DETECTION_GOAL_POST_DESC_BUFFER_SIZE];
            wb_vision_detection_goal_post_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            switch (this->sightingType()) {
                case FullPostSeen:
                {
                    ss << "sightingType=" << "FullPostSeen";
                    break;
                }
                case NoPostDetected:
                {
                    ss << "sightingType=" << "NoPostDetected";
                    break;
                }
                case PartialPostSeen:
                {
                    ss << "sightingType=" << "PartialPostSeen";
                    break;
                }
            }
            ss << ", ";
            switch (this->orientation()) {
                case GenericPost:
                {
                    ss << "orientation=" << "GenericPost";
                    break;
                }
                case LeftPost:
                {
                    ss << "orientation=" << "LeftPost";
                    break;
                }
                case RightPost:
                {
                    ss << "orientation=" << "RightPost";
                    break;
                }
            }
            ss << ", ";
            ss << "topLeftCoordinate=" << "{" << PixelCoordinate(this->topLeftCoordinate()).description() << "}";
            ss << ", ";
            ss << "topRightCoordinate=" << "{" << PixelCoordinate(this->topRightCoordinate()).description() << "}";
            ss << ", ";
            ss << "bottomLeftCoordinate=" << "{" << PixelCoordinate(this->bottomLeftCoordinate()).description() << "}";
            ss << ", ";
            ss << "bottomRightCoordinate=" << "{" << PixelCoordinate(this->bottomRightCoordinate()).description() << "}";
            return ss.str();
#endif /// USE_WB_VISION_DETECTION_GOAL_POST_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_VISION_DETECTION_GOAL_POST_C_CONVERSION
            char buffer[VISION_DETECTION_GOAL_POST_TO_STRING_BUFFER_SIZE];
            wb_vision_detection_goal_post_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            switch (this->sightingType()) {
                case FullPostSeen:
                {
                    ss << "FullPostSeen";
                    break;
                }
                case NoPostDetected:
                {
                    ss << "NoPostDetected";
                    break;
                }
                case PartialPostSeen:
                {
                    ss << "PartialPostSeen";
                    break;
                }
            }
            ss << ", ";
            switch (this->orientation()) {
                case GenericPost:
                {
                    ss << "GenericPost";
                    break;
                }
                case LeftPost:
                {
                    ss << "LeftPost";
                    break;
                }
                case RightPost:
                {
                    ss << "RightPost";
                    break;
                }
            }
            ss << ", ";
            ss << "{" << PixelCoordinate(this->topLeftCoordinate()).to_string() << "}";
            ss << ", ";
            ss << "{" << PixelCoordinate(this->topRightCoordinate()).to_string() << "}";
            ss << ", ";
            ss << "{" << PixelCoordinate(this->bottomLeftCoordinate()).to_string() << "}";
            ss << ", ";
            ss << "{" << PixelCoordinate(this->bottomRightCoordinate()).to_string() << "}";
            return ss.str();
#endif /// USE_WB_VISION_DETECTION_GOAL_POST_C_CONVERSION
        }

#ifdef USE_WB_VISION_DETECTION_GOAL_POST_C_CONVERSION
        void from_string(const std::string &t_str) {
            wb_vision_detection_goal_post_from_string(this, t_str.c_str());
#else
        void from_string(const std::string &t_str) {
            char * str_cstr = const_cast<char *>(t_str.c_str());
            size_t temp_length = strlen(str_cstr);
            int length = (temp_length <= INT_MAX) ? static_cast<int>(static_cast<ssize_t>(temp_length)) : -1;
            if (length < 1 || length > VISION_DETECTION_GOAL_POST_DESC_BUFFER_SIZE) {
                return;
            }
            char var_str_buffer[VISION_DETECTION_GOAL_POST_DESC_BUFFER_SIZE + 1];
            char* var_str = &var_str_buffer[0];
            char key_buffer[22];
            char* key = &key_buffer[0];
            int bracecount = 0;
            int startVar = 0;
            int index = 0;
            int startKey = 0;
            int endKey = -1;
            int varIndex = 0;
            if (index == 0 && str_cstr[0] == '{') {
                index = 1;
            }
            startVar = index;
            startKey = startVar;
            do {
                for (int i = index; i < length; i++) {
                    index = i + 1;
                    if (bracecount == 0 && str_cstr[i] == '=') {
                        endKey = i - 1;
                        startVar = index;
                        continue;
                    }
                    if (bracecount == 0 && isspace(str_cstr[i])) {
                        startVar = index;
                        if (endKey == -1) {
                            startKey = index;
                        }
                        continue;
                    }
                    if (bracecount == 0 && str_cstr[i] == ',') {
                        index = i - 1;
                        break;
                    }
                    if (str_cstr[i] == '{') {
                        bracecount++;
                        continue;
                    }
                    if (str_cstr[i] == '}') {
                        bracecount--;
                        if (bracecount < 0) {
                            index = i - 1;
                            break;
                        }
                    }
                    if (i == length - 1) {
                        index = i;
                    }
                }
                if (endKey >= startKey && endKey - startKey < length) {
                    strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                    key[(endKey - startKey) + 1] = 0;
                } else {
                    key[0] = 0;
                }
                strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                var_str[(index - startVar) + 1] = 0;
                bracecount = 0;
                index += 2;
                startVar = index;
                startKey = startVar;
                endKey = -1;
                if (strlen(key) > 0) {
                    if (0 == strcmp("sightingType", key)) {
                        varIndex = 0;
                    } else if (0 == strcmp("orientation", key)) {
                        varIndex = 1;
                    } else if (0 == strcmp("topLeftCoordinate", key)) {
                        varIndex = 2;
                    } else if (0 == strcmp("topRightCoordinate", key)) {
                        varIndex = 3;
                    } else if (0 == strcmp("bottomLeftCoordinate", key)) {
                        varIndex = 4;
                    } else if (0 == strcmp("bottomRightCoordinate", key)) {
                        varIndex = 5;
                    } else {
                        varIndex = -1;
                    }
                }
                switch (varIndex) {
                    case -1: { break; }
                    case 0:
                    {
                        if (strcmp("FullPostSeen", var_str) == 0) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_sightingType(FullPostSeen);
#pragma clang diagnostic pop
                        } else if (strcmp("NoPostDetected", var_str) == 0) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_sightingType(NoPostDetected);
#pragma clang diagnostic pop
                        } else if (strcmp("PartialPostSeen", var_str) == 0) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_sightingType(PartialPostSeen);
#pragma clang diagnostic pop
                        } else {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_sightingType(static_cast<enum GoalPostOptions>(atoi(var_str)));
#pragma clang diagnostic pop
                        }
                        break;
                    }
                    case 1:
                    {
                        if (strcmp("GenericPost", var_str) == 0) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_orientation(GenericPost);
#pragma clang diagnostic pop
                        } else if (strcmp("LeftPost", var_str) == 0) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_orientation(LeftPost);
#pragma clang diagnostic pop
                        } else if (strcmp("RightPost", var_str) == 0) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_orientation(RightPost);
#pragma clang diagnostic pop
                        } else {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_orientation(static_cast<enum GoalPostOrientation>(atoi(var_str)));
#pragma clang diagnostic pop
                        }
                        break;
                    }
                    case 2:
                    {
                        PixelCoordinate topLeftCoordinate_temp = PixelCoordinate();
                        topLeftCoordinate_temp.from_string(var_str);
                        this->set_topLeftCoordinate(topLeftCoordinate_temp);
                        break;
                    }
                    case 3:
                    {
                        PixelCoordinate topRightCoordinate_temp = PixelCoordinate();
                        topRightCoordinate_temp.from_string(var_str);
                        this->set_topRightCoordinate(topRightCoordinate_temp);
                        break;
                    }
                    case 4:
                    {
                        PixelCoordinate bottomLeftCoordinate_temp = PixelCoordinate();
                        bottomLeftCoordinate_temp.from_string(var_str);
                        this->set_bottomLeftCoordinate(bottomLeftCoordinate_temp);
                        break;
                    }
                    case 5:
                    {
                        PixelCoordinate bottomRightCoordinate_temp = PixelCoordinate();
                        bottomRightCoordinate_temp.from_string(var_str);
                        this->set_bottomRightCoordinate(bottomRightCoordinate_temp);
                        break;
                    }
                }
                if (varIndex >= 0) {
                    varIndex++;
                }
            } while(index < length);
#endif /// USE_WB_VISION_DETECTION_GOAL_POST_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

        GU::PixelCoordinate topLeftCoordinatePixelCoordinate(const uint16_t resWidth, const uint16_t resHeight)
        {
            return PixelCoordinate(topLeftCoordinate()).pixelCoordinate(resWidth, resHeight);
        }
        GU::PixelCoordinate topRightCoordinatePixelCoordinate(const uint16_t resWidth, const uint16_t resHeight)
        {
            return PixelCoordinate(topRightCoordinate()).pixelCoordinate(resWidth, resHeight);
        }
        GU::PixelCoordinate bottomLeftCoordinatePixelCoordinate(const uint16_t resWidth, const uint16_t resHeight)
        {
            return PixelCoordinate(bottomLeftCoordinate()).pixelCoordinate(resWidth, resHeight);
        }
        GU::PixelCoordinate bottomRightCoordinatePixelCoordinate(const uint16_t resWidth, const uint16_t resHeight)
        {
            return PixelCoordinate(bottomRightCoordinate()).pixelCoordinate(resWidth, resHeight);
        }
    };

} /// namespace guWhiteboard

#endif /// VisionDetectionGoalPost_DEFINED
