/*
 * file HalLegTarget.swift
 *
 * This file was generated by classgenerator from hal_leg_target.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2019 Dimitri Joukoff. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Dimitri Joukoff.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * Classgenerator version
 */
extension wb_hal_leg_target {

    public var _target_hipyawpitch_active: Bool {
        get {
            return self.target_hipyawpitch_active == 1
        } set {
            self.target_hipyawpitch_active = true == newValue ? 1 : 0
        }
    }

    public var _target_hiproll_active: Bool {
        get {
            return self.target_hiproll_active == 1
        } set {
            self.target_hiproll_active = true == newValue ? 1 : 0
        }
    }

    public var _target_hippitch_active: Bool {
        get {
            return self.target_hippitch_active == 1
        } set {
            self.target_hippitch_active = true == newValue ? 1 : 0
        }
    }

    public var _target_kneepitch_active: Bool {
        get {
            return self.target_kneepitch_active == 1
        } set {
            self.target_kneepitch_active = true == newValue ? 1 : 0
        }
    }

    public var _target_anklepitch_active: Bool {
        get {
            return self.target_anklepitch_active == 1
        } set {
            self.target_anklepitch_active = true == newValue ? 1 : 0
        }
    }

    public var _target_ankleroll_active: Bool {
        get {
            return self.target_ankleroll_active == 1
        } set {
            self.target_ankleroll_active = true == newValue ? 1 : 0
        }
    }

    public var _target_leg_at_goal: Bool {
        get {
            return self.target_leg_at_goal == 1
        } set {
            self.target_leg_at_goal = true == newValue ? 1 : 0
        }
    }

    public var _target_leg_stop: Bool {
        get {
            return self.target_leg_stop == 1
        } set {
            self.target_leg_stop = true == newValue ? 1 : 0
        }
    }

    /**
     * Create a new `wb_hal_leg_target`.
     */
    public static func make() -> wb_hal_leg_target {
        return wb_hal_leg_target(INT_MAX)
    }

    /**
     * Create a new `wb_hal_leg_target`.
     */
    public init(_ target_movement_time: Int32 = INT_MAX, target_hipyawpitch: Int16 = 0, target_hiproll: Int16 = 0, target_hippitch: Int16 = 0, target_kneepitch: Int16 = 0, target_anklepitch: Int16 = 0, target_ankleroll: Int16 = 0, target_leg: UInt8 = LEFT_LEG, target_hipyawpitchstiffness: UInt8 = 0, target_hiprollstiffness: UInt8 = 0, target_hippitchstiffness: UInt8 = 0, target_kneepitchstiffness: UInt8 = 0, target_anklepitchstiffness: UInt8 = 0, target_anklerollstiffness: UInt8 = 0, target_pliability: UInt8 = 0, target_hipyawpitch_active: Bool = true, target_hiproll_active: Bool = true, target_hippitch_active: Bool = true, target_kneepitch_active: Bool = true, target_anklepitch_active: Bool = true, target_ankleroll_active: Bool = true, target_leg_at_goal: Bool = false, target_leg_stop: Bool = false) {
        self.init()
        self.target_movement_time = target_movement_time
        self.target_hipyawpitch = target_hipyawpitch
        self.target_hiproll = target_hiproll
        self.target_hippitch = target_hippitch
        self.target_kneepitch = target_kneepitch
        self.target_anklepitch = target_anklepitch
        self.target_ankleroll = target_ankleroll
        self.target_leg = target_leg
        self.target_hipyawpitchstiffness = target_hipyawpitchstiffness
        self.target_hiprollstiffness = target_hiprollstiffness
        self.target_hippitchstiffness = target_hippitchstiffness
        self.target_kneepitchstiffness = target_kneepitchstiffness
        self.target_anklepitchstiffness = target_anklepitchstiffness
        self.target_anklerollstiffness = target_anklerollstiffness
        self.target_pliability = target_pliability
        self._target_hipyawpitch_active = target_hipyawpitch_active
        self._target_hiproll_active = target_hiproll_active
        self._target_hippitch_active = target_hippitch_active
        self._target_kneepitch_active = target_kneepitch_active
        self._target_anklepitch_active = target_anklepitch_active
        self._target_ankleroll_active = target_ankleroll_active
        self._target_leg_at_goal = target_leg_at_goal
        self._target_leg_stop = target_leg_stop
    }

    /**
     * Create a `wb_hal_leg_target` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let target_movement_time = dictionary["target_movement_time"] as? Int32,
            let target_hipyawpitch = dictionary["target_hipyawpitch"] as? Int16,
            let target_hiproll = dictionary["target_hiproll"] as? Int16,
            let target_hippitch = dictionary["target_hippitch"] as? Int16,
            let target_kneepitch = dictionary["target_kneepitch"] as? Int16,
            let target_anklepitch = dictionary["target_anklepitch"] as? Int16,
            let target_ankleroll = dictionary["target_ankleroll"] as? Int16,
            let target_leg = dictionary["target_leg"] as? UInt8,
            let target_hipyawpitchstiffness = dictionary["target_hipyawpitchstiffness"] as? UInt8,
            let target_hiprollstiffness = dictionary["target_hiprollstiffness"] as? UInt8,
            let target_hippitchstiffness = dictionary["target_hippitchstiffness"] as? UInt8,
            let target_kneepitchstiffness = dictionary["target_kneepitchstiffness"] as? UInt8,
            let target_anklepitchstiffness = dictionary["target_anklepitchstiffness"] as? UInt8,
            let target_anklerollstiffness = dictionary["target_anklerollstiffness"] as? UInt8,
            let target_pliability = dictionary["target_pliability"] as? UInt8,
            let target_hipyawpitch_active = dictionary["target_hipyawpitch_active"] as? UInt32,
            let target_hiproll_active = dictionary["target_hiproll_active"] as? UInt32,
            let target_hippitch_active = dictionary["target_hippitch_active"] as? UInt32,
            let target_kneepitch_active = dictionary["target_kneepitch_active"] as? UInt32,
            let target_anklepitch_active = dictionary["target_anklepitch_active"] as? UInt32,
            let target_ankleroll_active = dictionary["target_ankleroll_active"] as? UInt32,
            let target_leg_at_goal = dictionary["target_leg_at_goal"] as? UInt32,
            let target_leg_stop = dictionary["target_leg_stop"] as? UInt32
        else {
            fatalError("Unable to convert \(dictionary) to wb_hal_leg_target.")
        }
        self.target_movement_time = target_movement_time
        self.target_hipyawpitch = target_hipyawpitch
        self.target_hiproll = target_hiproll
        self.target_hippitch = target_hippitch
        self.target_kneepitch = target_kneepitch
        self.target_anklepitch = target_anklepitch
        self.target_ankleroll = target_ankleroll
        self.target_leg = target_leg
        self.target_hipyawpitchstiffness = target_hipyawpitchstiffness
        self.target_hiprollstiffness = target_hiprollstiffness
        self.target_hippitchstiffness = target_hippitchstiffness
        self.target_kneepitchstiffness = target_kneepitchstiffness
        self.target_anklepitchstiffness = target_anklepitchstiffness
        self.target_anklerollstiffness = target_anklerollstiffness
        self.target_pliability = target_pliability
        self.target_hipyawpitch_active = target_hipyawpitch_active
        self.target_hiproll_active = target_hiproll_active
        self.target_hippitch_active = target_hippitch_active
        self.target_kneepitch_active = target_kneepitch_active
        self.target_anklepitch_active = target_anklepitch_active
        self.target_ankleroll_active = target_ankleroll_active
        self.target_leg_at_goal = target_leg_at_goal
        self.target_leg_stop = target_leg_stop
    }

}

extension wb_hal_leg_target: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "target_movement_time=\(self.target_movement_time)"
        descString += ", "
        descString += "target_hipyawpitch=\(self.target_hipyawpitch)"
        descString += ", "
        descString += "target_hiproll=\(self.target_hiproll)"
        descString += ", "
        descString += "target_hippitch=\(self.target_hippitch)"
        descString += ", "
        descString += "target_kneepitch=\(self.target_kneepitch)"
        descString += ", "
        descString += "target_anklepitch=\(self.target_anklepitch)"
        descString += ", "
        descString += "target_ankleroll=\(self.target_ankleroll)"
        descString += ", "
        descString += "target_leg=\(self.target_leg)"
        descString += ", "
        descString += "target_hipyawpitchstiffness=\(self.target_hipyawpitchstiffness)"
        descString += ", "
        descString += "target_hiprollstiffness=\(self.target_hiprollstiffness)"
        descString += ", "
        descString += "target_hippitchstiffness=\(self.target_hippitchstiffness)"
        descString += ", "
        descString += "target_kneepitchstiffness=\(self.target_kneepitchstiffness)"
        descString += ", "
        descString += "target_anklepitchstiffness=\(self.target_anklepitchstiffness)"
        descString += ", "
        descString += "target_anklerollstiffness=\(self.target_anklerollstiffness)"
        descString += ", "
        descString += "target_pliability=\(self.target_pliability)"
        descString += ", "
        descString += "target_hipyawpitch_active=\(self.target_hipyawpitch_active)"
        descString += ", "
        descString += "target_hiproll_active=\(self.target_hiproll_active)"
        descString += ", "
        descString += "target_hippitch_active=\(self.target_hippitch_active)"
        descString += ", "
        descString += "target_kneepitch_active=\(self.target_kneepitch_active)"
        descString += ", "
        descString += "target_anklepitch_active=\(self.target_anklepitch_active)"
        descString += ", "
        descString += "target_ankleroll_active=\(self.target_ankleroll_active)"
        descString += ", "
        descString += "target_leg_at_goal=\(self.target_leg_at_goal)"
        descString += ", "
        descString += "target_leg_stop=\(self.target_leg_stop)"
        return descString
    }

}

extension wb_hal_leg_target: Equatable {}

public func == (lhs: wb_hal_leg_target, rhs: wb_hal_leg_target) -> Bool {
    return lhs.target_movement_time == rhs.target_movement_time
        && lhs.target_hipyawpitch == rhs.target_hipyawpitch
        && lhs.target_hiproll == rhs.target_hiproll
        && lhs.target_hippitch == rhs.target_hippitch
        && lhs.target_kneepitch == rhs.target_kneepitch
        && lhs.target_anklepitch == rhs.target_anklepitch
        && lhs.target_ankleroll == rhs.target_ankleroll
        && lhs.target_leg == rhs.target_leg
        && lhs.target_hipyawpitchstiffness == rhs.target_hipyawpitchstiffness
        && lhs.target_hiprollstiffness == rhs.target_hiprollstiffness
        && lhs.target_hippitchstiffness == rhs.target_hippitchstiffness
        && lhs.target_kneepitchstiffness == rhs.target_kneepitchstiffness
        && lhs.target_anklepitchstiffness == rhs.target_anklepitchstiffness
        && lhs.target_anklerollstiffness == rhs.target_anklerollstiffness
        && lhs.target_pliability == rhs.target_pliability
        && lhs.target_hipyawpitch_active == rhs.target_hipyawpitch_active
        && lhs.target_hiproll_active == rhs.target_hiproll_active
        && lhs.target_hippitch_active == rhs.target_hippitch_active
        && lhs.target_kneepitch_active == rhs.target_kneepitch_active
        && lhs.target_anklepitch_active == rhs.target_anklepitch_active
        && lhs.target_ankleroll_active == rhs.target_ankleroll_active
        && lhs.target_leg_at_goal == rhs.target_leg_at_goal
        && lhs.target_leg_stop == rhs.target_leg_stop
}
