/*
 * file wb_hal_leg_target.h
 *
 * This file was generated by classgenerator from hal_leg_target.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2019 Dimitri Joukoff. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Dimitri Joukoff.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef wb_hal_leg_target_h
#define wb_hal_leg_target_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"

#ifdef __linux
# ifndef _POSIX_SOURCE
#  define _POSIX_SOURCE 200112L
# endif
#endif
#ifndef _XOPEN_SOURCE
# define _XOPEN_SOURCE 700
#endif
#ifdef __APPLE__
# ifndef _DARWIN_C_SOURCE
#  define _DARWIN_C_SOURCE 200112L
# endif
# ifndef __DARWIN_C_LEVEL
#  define __DARWIN_C_LEVEL 200112L
# endif
#endif

#pragma clang diagnostic pop

#include <gu_util.h>
#include <stdint.h>

#include <stdint.h>

#ifdef __cplusplus
#define LEFT_LEG (static_cast<uint8_t>(0))
#define RIGHT_LEG (static_cast<uint8_t>(1))
#else
#define LEFT_LEG ((uint8_t)0)
#define RIGHT_LEG ((uint8_t)1)
#endif

/** Issued Commands that exceed the movement limits given below
 *  are treated as NO-OP.  I.e. the pose of the joint is not altered
 *  by the command.
 */

/** Limits expressed in degrees (from Aldebaran Docs ./family/nao_h25/joints_h25.html) */
#define HIP_YAWPITCH_LIMIT_BACK_DEG -65.62f
#define HIP_YAWPITCH_LIMIT_FRONT_DEG 42.44f

#define LEFT_HIP_ROLL_OUT_DEG 45.29f
#define LEFT_HIP_ROLL_IN_DEG -21.74f
#define LEFT_HIP_PITCH_FRONT_DEG -88.00f
#define LEFT_HIP_PITCH_BACK_DEG 27.73f
#define LEFT_KNEE_PITCH_FRONT_DEG -5.29f
#define LEFT_KNEE_PITCH_BACK_DEG 121.04f
#define LEFT_ANKLE_PITCH_FRONT_DEG -68.15f
#define LEFT_ANKLE_PITCH_BACK_DEG 52.86f
#define LEFT_ANKLE_ROLL_OUT_DEG 44.06f
#define LEFT_ANKLE_ROLL_IN_DEG -22.79f

#define RIGHT_HIP_ROLL_OUT_DEG -45.29f
#define RIGHT_HIP_ROLL_IN_DEG 21.74f
#define RIGHT_HIP_PITCH_FRONT_DEG -88.00f
#define RIGHT_HIP_PITCH_BACK_DEG 27.73f
#define RIGHT_KNEE_PITCH_FRONT_DEG -5.90f
#define RIGHT_KNEE_PITCH_BACK_DEG 121.47f
#define RIGHT_ANKLE_PITCH_FRONT_DEG -67.97f
#define RIGHT_ANKLE_PITCH_BACK_DEG 53.40f
#define RIGHT_ANKLE_ROLL_OUT_DEG -44.06f
#define RIGHT_ANKLE_ROLL_IN_DEG 22.80f

/** Limits expressed in radians */
#define HIP_YAWPITCH_LIMIT_BACK_RAD -1.145303f
#define HIP_YAWPITCH_LIMIT_FRONT_RAD 0.740810f

#define LEFT_HIP_ROLL_OUT_RAD 0.790477f
#define LEFT_HIP_ROLL_IN_RAD -0.379472f
#define LEFT_HIP_PITCH_FRONT_RAD -1.535889f
#define LEFT_HIP_PITCH_BACK_RAD 0.484090f
#define LEFT_KNEE_PITCH_FRONT_RAD -0.092346f
#define LEFT_KNEE_PITCH_BACK_RAD 2.112528f
#define LEFT_ANKLE_PITCH_FRONT_RAD -1.189516f
#define LEFT_ANKLE_PITCH_BACK_RAD 0.922747f
#define LEFT_ANKLE_ROLL_OUT_RAD 0.769001f
#define LEFT_ANKLE_ROLL_IN_RAD -0.397880f

#define RIGHT_HIP_ROLL_OUT_RAD -0.790477f
#define RIGHT_HIP_ROLL_IN_RAD 0.379472f
#define RIGHT_HIP_PITCH_FRONT_RAD -1.535889f
#define RIGHT_HIP_PITCH_BACK_RAD 0.484090f
#define RIGHT_KNEE_PITCH_FRONT_RAD -0.103083f
#define RIGHT_KNEE_PITCH_BACK_RAD 2.120198f
#define RIGHT_ANKLE_PITCH_FRONT_RAD -1.186448f
#define RIGHT_ANKLE_PITCH_BACK_RAD 0.932056f
#define RIGHT_ANKLE_ROLL_OUT_RAD -0.768992f
#define RIGHT_ANKLE_ROLL_IN_RAD 0.397935f

#define HAL_LEG_TARGET_GENERATED 
#define HAL_LEG_TARGET_C_STRUCT wb_hal_leg_target 
#define HAL_LEG_TARGET_NUMBER_OF_VARIABLES 23

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#define HAL_LEG_TARGET_DESC_BUFFER_SIZE 691
#define HAL_LEG_TARGET_TO_STRING_BUFFER_SIZE 204
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * Classgenerator version
 */
struct wb_hal_leg_target
{

    /**
     * Control Message: The elapsed time, in mSec, in which the movement should be completed. Status Message: Absolute time when the current action will complete. (Thus this is an int32_t.)
     */
    PROPERTY(int32_t, target_movement_time)

    /**
     * target hip yaw pitch angle in 10ths of degrees
     */
    PROPERTY(int16_t, target_hipyawpitch)

    /**
     * target hip roll angle angle in 10ths of degrees
     */
    PROPERTY(int16_t, target_hiproll)

    /**
     * target hip pitch angle in 10ths of degrees
     */
    PROPERTY(int16_t, target_hippitch)

    /**
     * target knee pitch angle in 10ths of degrees
     */
    PROPERTY(int16_t, target_kneepitch)

    /**
     * target ankle pitch angle in 10ths of degrees
     */
    PROPERTY(int16_t, target_anklepitch)

    /**
     * target ankle roll angle in 10ths of degrees
     */
    PROPERTY(int16_t, target_ankleroll)

    /**
     * target leg number; This property is used strictly for accounting purposes when the struct is stored within an array and the robot has numerous legs.
     */
    PROPERTY(uint8_t, target_leg)

    /**
     * target hip yaw pitch stiffness as a percentage
     */
    PROPERTY(uint8_t, target_hipyawpitchstiffness)

    /**
     * target hip roll stiffness as a percentage
     */
    PROPERTY(uint8_t, target_hiprollstiffness)

    /**
     * target hip pitch stiffness as a percentage
     */
    PROPERTY(uint8_t, target_hippitchstiffness)

    /**
     * target knee pitch stiffness as a percentage
     */
    PROPERTY(uint8_t, target_kneepitchstiffness)

    /**
     * target ankle pitch stiffness as a percentage
     */
    PROPERTY(uint8_t, target_anklepitchstiffness)

    /**
     * target ankle roll stiffness as a percentage
     */
    PROPERTY(uint8_t, target_anklerollstiffness)

    /**
     * target leg's pliability when in Passive Mode; When the leg is passive, this value reduces the update frequency, thus making the leg more resistant to external forces. Use of values from 0 to 10 is recommended. A value of zero (0), allows the quickest reponse to external forces (e.g. gravity). Higher values stiffen the leg and reduce responsiveness, the movement will become stepped. HOWEVER, the robot will fall under its own weight unless active mode is re-engaged.
     */
    PROPERTY(uint8_t, target_pliability)

    /**
     * Is the hipyawpitch Active (true[DEFAULT]) or Passive (false). Active :  The robot's DCM will prevent movement of the hip from the requested pose in accordance to the joint stiffness. (This is the normal behaviour of the robot.) Passive:  Once the requested pose is achieved, the DCM will automatically update the requested pose according to deviations in the joints. The effect of this is that the robot's legs will be susceptible to gravity (and will fall slowly over time) as well as to externally applied forces (allowing it to be manipulated).
     */
    BIT_PROPERTY(target_hipyawpitch_active)

    /**
     * Is the hip roll Active (true[DEFAULT]) or Passive (false)
     */
    BIT_PROPERTY(target_hiproll_active)

    /**
     * Is the hip pitch Active (true[DEFAULT]) or Passive (false)
     */
    BIT_PROPERTY(target_hippitch_active)

    /**
     * Is the knee pitch Active (true[DEFAULT]) or Passive (false)
     */
    BIT_PROPERTY(target_kneepitch_active)

    /**
     * Is the ankle pitch Active (true[DEFAULT]) or Passive (false)
     */
    BIT_PROPERTY(target_anklepitch_active)

    /**
     * Is the ankle roll Active (true[DEFAULT]) or Passive (false)
     */
    BIT_PROPERTY(target_ankleroll_active)

    /**
     * Control Message: Not used. Status Message: Naoqiinterface reports that the goal location of all joints have been reached (within specified tolerance).
     */
    BIT_PROPERTY(target_leg_at_goal)

    /**
     * Control Message: Stop the leg at its current location. Status Message: Indicates if the last control message issued a STOP command.
     */
    BIT_PROPERTY(target_leg_stop)

};

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * Convert to a description string.
 */
const char* wb_hal_leg_target_description(const struct wb_hal_leg_target* self, char* descString, size_t bufferSize);

/**
 * Convert to a string.
 */
const char* wb_hal_leg_target_to_string(const struct wb_hal_leg_target* self, char* toString, size_t bufferSize);

/**
 * Convert from a string.
 */
struct wb_hal_leg_target* wb_hal_leg_target_from_string(struct wb_hal_leg_target* self, const char* str);

#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
const char* wb_hal_leg_target_value_description(const struct wb_hal_leg_target* self, char* toString, size_t bufferSize);
#endif

/*#ifdef WHITEBOARD_SERIALISATION*/

/**
 * Network stream serialisation
 */
size_t wb_hal_leg_target_to_network_serialised(const struct wb_hal_leg_target *self, char *dst);

/**
 * Network stream deserialisation
 */
size_t wb_hal_leg_target_from_network_serialised(const char *src, struct wb_hal_leg_target *dst);

/*#endif /// WHITEBOARD_SERIALISATION*/

#ifdef __cplusplus
}
#endif

#endif /// wb_hal_leg_target_h
