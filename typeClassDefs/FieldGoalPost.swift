/*
 * file FieldGoalPost.swift
 *
 * This file was generated by classgenerator from fieldGoalPost.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Carl Lusty at 07:40, 13/04/2018.
 * Copyright Â© 2018 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * Results for the Goal Ray Tracer (guvision).
 */
extension wb_field_goal_post {



    /**
     * Create a new `wb_field_goal_post`.
     */
    public static func make() -> wb_field_goal_post {
        return wb_field_goal_post(goalType: FoundNothing)
    }

    /**
     * Create a new `wb_field_goal_post`.
     */
    public init(goalType: GoalOptions = FoundNothing, tlx: UInt16 = 0, tly: UInt16 = 0, trx: UInt16 = 0, try: UInt16 = 0, blx: UInt16 = 0, bly: UInt16 = 0, brx: UInt16 = 0, bry: UInt16 = 0) {
        self.goalType = goalType
        self.tlx = tlx
        self.tly = tly
        self.trx = trx
        self.try = try
        self.blx = blx
        self.bly = bly
        self.brx = brx
        self.bry = bry
    }

    /**
     * Create a `wb_field_goal_post` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        guard
            let goalType = dictionary["goalType"] as? GoalOptions,
            let tlx = dictionary["tlx"] as? UInt16,
            let tly = dictionary["tly"] as? UInt16,
            let trx = dictionary["trx"] as? UInt16,
            let try = dictionary["try"] as? UInt16,
            let blx = dictionary["blx"] as? UInt16,
            let bly = dictionary["bly"] as? UInt16,
            let brx = dictionary["brx"] as? UInt16,
            let bry = dictionary["bry"] as? UInt16
        else {
            fatalError("Unable to convert \(dictionary) to wb_field_goal_post.")
        }
        self.goalType = goalType
        self.tlx = tlx
        self.tly = tly
        self.trx = trx
        self.try = try
        self.blx = blx
        self.bly = bly
        self.brx = brx
        self.bry = bry
    }

}

extension wb_field_goal_post: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "goalType=\(self.goalType)"
        descString += ", "
        descString += "tlx=\(self.tlx)"
        descString += ", "
        descString += "tly=\(self.tly)"
        descString += ", "
        descString += "trx=\(self.trx)"
        descString += ", "
        descString += "try=\(self.try)"
        descString += ", "
        descString += "blx=\(self.blx)"
        descString += ", "
        descString += "bly=\(self.bly)"
        descString += ", "
        descString += "brx=\(self.brx)"
        descString += ", "
        descString += "bry=\(self.bry)"
        return descString
    }

}

extension wb_field_goal_post: Equatable {}

public func == (lhs: wb_field_goal_post, rhs: wb_field_goal_post) -> Bool {
    return lhs.goalType == rhs.goalType
        && lhs.tlx == rhs.tlx
        && lhs.tly == rhs.tly
        && lhs.trx == rhs.trx
        && lhs.try == rhs.try
        && lhs.blx == rhs.blx
        && lhs.bly == rhs.bly
        && lhs.brx == rhs.brx
        && lhs.bry == rhs.bry
}
