/*
 * file HalArmTarget.swift
 *
 * This file was generated by classgenerator from hal_arm_target.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2019 Dimitri Joukoff. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Dimitri Joukoff.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * Classgenerator version
 */
extension wb_hal_arm_target {

    public var _target_shoulderpitch_active: Bool {
        get {
            return self.target_shoulderpitch_active == 1
        } set {
            self.target_shoulderpitch_active = true == newValue ? 1 : 0
        }
    }

    public var _target_shoulderroll_active: Bool {
        get {
            return self.target_shoulderroll_active == 1
        } set {
            self.target_shoulderroll_active = true == newValue ? 1 : 0
        }
    }

    public var _target_elbowroll_active: Bool {
        get {
            return self.target_elbowroll_active == 1
        } set {
            self.target_elbowroll_active = true == newValue ? 1 : 0
        }
    }

    public var _target_elbowyaw_active: Bool {
        get {
            return self.target_elbowyaw_active == 1
        } set {
            self.target_elbowyaw_active = true == newValue ? 1 : 0
        }
    }

    public var _target_wrist_active: Bool {
        get {
            return self.target_wrist_active == 1
        } set {
            self.target_wrist_active = true == newValue ? 1 : 0
        }
    }

    public var _target_hand_active: Bool {
        get {
            return self.target_hand_active == 1
        } set {
            self.target_hand_active = true == newValue ? 1 : 0
        }
    }

    public var _target_arm_at_goal: Bool {
        get {
            return self.target_arm_at_goal == 1
        } set {
            self.target_arm_at_goal = true == newValue ? 1 : 0
        }
    }

    public var _target_arm_stop: Bool {
        get {
            return self.target_arm_stop == 1
        } set {
            self.target_arm_stop = true == newValue ? 1 : 0
        }
    }

    /**
     * Create a new `wb_hal_arm_target`.
     */
    public static func make() -> wb_hal_arm_target {
        return wb_hal_arm_target(INT_MAX)
    }

    /**
     * Create a new `wb_hal_arm_target`.
     */
    public init(_ target_movement_time: Int32 = INT_MAX, target_shoulderpitch: Int16 = 0, target_shoulderroll: Int16 = 0, target_elbowroll: Int16 = 0, target_elbowyaw: Int16 = 0, target_wristyaw: Int16 = 0, target_arm: UInt8 = LEFT_ARM, target_hand: UInt8 = 0, target_shoulderpitchstiffness: UInt8 = 0, target_shoulderrollstiffness: UInt8 = 0, target_elbowrollstiffness: UInt8 = 0, target_elbowyawstiffness: UInt8 = 0, target_wristyawstiffness: UInt8 = 0, target_handstiffness: UInt8 = 0, target_pliability: UInt8 = 0, target_shoulderpitch_active: Bool = true, target_shoulderroll_active: Bool = true, target_elbowroll_active: Bool = true, target_elbowyaw_active: Bool = true, target_wrist_active: Bool = true, target_hand_active: Bool = true, target_arm_at_goal: Bool = false, target_arm_stop: Bool = false) {
        self.init()
        self.target_movement_time = target_movement_time
        self.target_shoulderpitch = target_shoulderpitch
        self.target_shoulderroll = target_shoulderroll
        self.target_elbowroll = target_elbowroll
        self.target_elbowyaw = target_elbowyaw
        self.target_wristyaw = target_wristyaw
        self.target_arm = target_arm
        self.target_hand = target_hand
        self.target_shoulderpitchstiffness = target_shoulderpitchstiffness
        self.target_shoulderrollstiffness = target_shoulderrollstiffness
        self.target_elbowrollstiffness = target_elbowrollstiffness
        self.target_elbowyawstiffness = target_elbowyawstiffness
        self.target_wristyawstiffness = target_wristyawstiffness
        self.target_handstiffness = target_handstiffness
        self.target_pliability = target_pliability
        self._target_shoulderpitch_active = target_shoulderpitch_active
        self._target_shoulderroll_active = target_shoulderroll_active
        self._target_elbowroll_active = target_elbowroll_active
        self._target_elbowyaw_active = target_elbowyaw_active
        self._target_wrist_active = target_wrist_active
        self._target_hand_active = target_hand_active
        self._target_arm_at_goal = target_arm_at_goal
        self._target_arm_stop = target_arm_stop
    }

    /**
     * Create a `wb_hal_arm_target` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let target_movement_time = dictionary["target_movement_time"] as? Int32,
            let target_shoulderpitch = dictionary["target_shoulderpitch"] as? Int16,
            let target_shoulderroll = dictionary["target_shoulderroll"] as? Int16,
            let target_elbowroll = dictionary["target_elbowroll"] as? Int16,
            let target_elbowyaw = dictionary["target_elbowyaw"] as? Int16,
            let target_wristyaw = dictionary["target_wristyaw"] as? Int16,
            let target_arm = dictionary["target_arm"] as? UInt8,
            let target_hand = dictionary["target_hand"] as? UInt8,
            let target_shoulderpitchstiffness = dictionary["target_shoulderpitchstiffness"] as? UInt8,
            let target_shoulderrollstiffness = dictionary["target_shoulderrollstiffness"] as? UInt8,
            let target_elbowrollstiffness = dictionary["target_elbowrollstiffness"] as? UInt8,
            let target_elbowyawstiffness = dictionary["target_elbowyawstiffness"] as? UInt8,
            let target_wristyawstiffness = dictionary["target_wristyawstiffness"] as? UInt8,
            let target_handstiffness = dictionary["target_handstiffness"] as? UInt8,
            let target_pliability = dictionary["target_pliability"] as? UInt8,
            let target_shoulderpitch_active = dictionary["target_shoulderpitch_active"] as? UInt32,
            let target_shoulderroll_active = dictionary["target_shoulderroll_active"] as? UInt32,
            let target_elbowroll_active = dictionary["target_elbowroll_active"] as? UInt32,
            let target_elbowyaw_active = dictionary["target_elbowyaw_active"] as? UInt32,
            let target_wrist_active = dictionary["target_wrist_active"] as? UInt32,
            let target_hand_active = dictionary["target_hand_active"] as? UInt32,
            let target_arm_at_goal = dictionary["target_arm_at_goal"] as? UInt32,
            let target_arm_stop = dictionary["target_arm_stop"] as? UInt32
        else {
            fatalError("Unable to convert \(dictionary) to wb_hal_arm_target.")
        }
        self.target_movement_time = target_movement_time
        self.target_shoulderpitch = target_shoulderpitch
        self.target_shoulderroll = target_shoulderroll
        self.target_elbowroll = target_elbowroll
        self.target_elbowyaw = target_elbowyaw
        self.target_wristyaw = target_wristyaw
        self.target_arm = target_arm
        self.target_hand = target_hand
        self.target_shoulderpitchstiffness = target_shoulderpitchstiffness
        self.target_shoulderrollstiffness = target_shoulderrollstiffness
        self.target_elbowrollstiffness = target_elbowrollstiffness
        self.target_elbowyawstiffness = target_elbowyawstiffness
        self.target_wristyawstiffness = target_wristyawstiffness
        self.target_handstiffness = target_handstiffness
        self.target_pliability = target_pliability
        self.target_shoulderpitch_active = target_shoulderpitch_active
        self.target_shoulderroll_active = target_shoulderroll_active
        self.target_elbowroll_active = target_elbowroll_active
        self.target_elbowyaw_active = target_elbowyaw_active
        self.target_wrist_active = target_wrist_active
        self.target_hand_active = target_hand_active
        self.target_arm_at_goal = target_arm_at_goal
        self.target_arm_stop = target_arm_stop
    }

}

extension wb_hal_arm_target: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "target_movement_time=\(self.target_movement_time)"
        descString += ", "
        descString += "target_shoulderpitch=\(self.target_shoulderpitch)"
        descString += ", "
        descString += "target_shoulderroll=\(self.target_shoulderroll)"
        descString += ", "
        descString += "target_elbowroll=\(self.target_elbowroll)"
        descString += ", "
        descString += "target_elbowyaw=\(self.target_elbowyaw)"
        descString += ", "
        descString += "target_wristyaw=\(self.target_wristyaw)"
        descString += ", "
        descString += "target_arm=\(self.target_arm)"
        descString += ", "
        descString += "target_hand=\(self.target_hand)"
        descString += ", "
        descString += "target_shoulderpitchstiffness=\(self.target_shoulderpitchstiffness)"
        descString += ", "
        descString += "target_shoulderrollstiffness=\(self.target_shoulderrollstiffness)"
        descString += ", "
        descString += "target_elbowrollstiffness=\(self.target_elbowrollstiffness)"
        descString += ", "
        descString += "target_elbowyawstiffness=\(self.target_elbowyawstiffness)"
        descString += ", "
        descString += "target_wristyawstiffness=\(self.target_wristyawstiffness)"
        descString += ", "
        descString += "target_handstiffness=\(self.target_handstiffness)"
        descString += ", "
        descString += "target_pliability=\(self.target_pliability)"
        descString += ", "
        descString += "target_shoulderpitch_active=\(self.target_shoulderpitch_active)"
        descString += ", "
        descString += "target_shoulderroll_active=\(self.target_shoulderroll_active)"
        descString += ", "
        descString += "target_elbowroll_active=\(self.target_elbowroll_active)"
        descString += ", "
        descString += "target_elbowyaw_active=\(self.target_elbowyaw_active)"
        descString += ", "
        descString += "target_wrist_active=\(self.target_wrist_active)"
        descString += ", "
        descString += "target_hand_active=\(self.target_hand_active)"
        descString += ", "
        descString += "target_arm_at_goal=\(self.target_arm_at_goal)"
        descString += ", "
        descString += "target_arm_stop=\(self.target_arm_stop)"
        return descString
    }

}

extension wb_hal_arm_target: Equatable {}

public func == (lhs: wb_hal_arm_target, rhs: wb_hal_arm_target) -> Bool {
    return lhs.target_movement_time == rhs.target_movement_time
        && lhs.target_shoulderpitch == rhs.target_shoulderpitch
        && lhs.target_shoulderroll == rhs.target_shoulderroll
        && lhs.target_elbowroll == rhs.target_elbowroll
        && lhs.target_elbowyaw == rhs.target_elbowyaw
        && lhs.target_wristyaw == rhs.target_wristyaw
        && lhs.target_arm == rhs.target_arm
        && lhs.target_hand == rhs.target_hand
        && lhs.target_shoulderpitchstiffness == rhs.target_shoulderpitchstiffness
        && lhs.target_shoulderrollstiffness == rhs.target_shoulderrollstiffness
        && lhs.target_elbowrollstiffness == rhs.target_elbowrollstiffness
        && lhs.target_elbowyawstiffness == rhs.target_elbowyawstiffness
        && lhs.target_wristyawstiffness == rhs.target_wristyawstiffness
        && lhs.target_handstiffness == rhs.target_handstiffness
        && lhs.target_pliability == rhs.target_pliability
        && lhs.target_shoulderpitch_active == rhs.target_shoulderpitch_active
        && lhs.target_shoulderroll_active == rhs.target_shoulderroll_active
        && lhs.target_elbowroll_active == rhs.target_elbowroll_active
        && lhs.target_elbowyaw_active == rhs.target_elbowyaw_active
        && lhs.target_wrist_active == rhs.target_wrist_active
        && lhs.target_hand_active == rhs.target_hand_active
        && lhs.target_arm_at_goal == rhs.target_arm_at_goal
        && lhs.target_arm_stop == rhs.target_arm_stop
}
