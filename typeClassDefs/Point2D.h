/** 
 * file Point2D.h 
 * 
 * This file was generated by classgenerator from point2D.txt. 
 * DO NOT CHANGE MANUALLY! 
 * 
 * Created by Mick Hawkins on 22:13, 14/12/2015 
 * Copyright (c) 2015 Mick Hawkins 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer in the documentation and/or other materials 
 *    provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this 
 *    software must display the following acknowledgement: 
 * 
 *    This product includes software developed by Mick Hawkins. 
 * 
 * 4. Neither the name of the author nor the names of contributors 
 *    may be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * ----------------------------------------------------------------------- 
 * This program is free software; you can redistribute it and/or 
 * modify it under the above terms or under the terms of the GNU 
 * General Public License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses/ 
 * or write to the Free Software Foundation, Inc., 51 Franklin Street, 
 * Fifth Floor, Boston, MA  02110-1301, USA. 
 */ 


#ifndef Point2D_DEFINED 
#define Point2D_DEFINED 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
#include <cstdlib> 
#include <string.h> 
#include <sstream> 
#endif 

#include "wb_point2d.h" 

namespace guWhiteboard 
{
    /** 
     * Point2D has an x and a y coordinate 
     */ 
    class Point2D: public wb_point2d 
    { 
    public:
        /** Constructor */ 
        Point2D(int16_t x = 0, int16_t y = 0)
        { 
            set_x(x); 
            set_y(y); 
        } 

        /** Copy Constructor */ 
        Point2D(const Point2D &other) : wb_point2d() 
        { 
            set_x(other.x()); 
            set_y(other.y()); 
        } 

        /** Copy Assignment Operator */ 
        Point2D &operator = (const Point2D &other) 
        { 
            set_x(other.x()); 
            set_y(other.y()); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        /** String Constructor -- is this needed? */ 
        Point2D(const std::string &str) { from_string(str.c_str()); }
        
        std::string description()
        { 
#ifdef USE_WB_POINT2D_C_CONVERSION 
            char buffer[POINT2D_DESC_BUFFER_SIZE]; 
            wb_point2d_description(this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::ostringstream ss; 
            ss << "x=" << x(); 
            ss << ", "; 
            ss << "y=" << y(); 

            return ss.str(); 

#endif /// USE_WB_POINT2D_C_CONVERSION
        } 

        std::string to_string() 
        { 
#ifdef USE_WB_POINT2D_C_CONVERSION 
            char buffer[POINT2D_DESC_BUFFER_SIZE]; 
            wb_point2d_to_string(this, buffer, sizeof(buffer)); 
            std::string toString = buffer; 
            return toString; 
#else 
            std::ostringstream ss; 
            ss << x(); 
            ss << ", "; 
            ss << y(); 

            return ss.str(); 

#endif /// USE_WB_POINT2D_C_CONVERSION
        } 

        void from_string(const std::string &str) 
        { 
#ifdef USE_WB_POINT2D_C_CONVERSION 
            wb_point2d_from_string(this, str); 
#else 
            std::istringstream iss(str); 
            std::string strings[POINT2D_NUMBER_OF_VARIABLES]; 
            memset(strings, 0, sizeof(strings)); 
            std::string token; 
            int count = 0; 
            while (getline(iss, token, ',')) 
            { 
                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 

                size_t pos = token.find('='); 

                if (pos != std::string::npos) 
                { 
                     token.erase(0, pos+1); 
                } 

                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 
                strings[count] = token; 
                count++; 
            } 

            if (!strings[0].empty()) 
                set_x(int16_t(atoi(strings[0].c_str()))); 

            if (!strings[1].empty()) 
                set_y(int16_t(atoi(strings[1].c_str()))); 

#endif /// USE_WB_POINT2D_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
#endif /// Point2D_DEFINED 
