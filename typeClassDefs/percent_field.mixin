@mixin(type = uint8_t, label, defaultValue = 0, comment, min = 0, max = 255)

-comment
This mixin creates a numeric integer property <label> which represents a float.
This integer property represents the float as a percentage such that the value
of <label> fits within a range such that <min> <= <label> <= <max>.

The mixin creates functions which converts between this integer representation
and the corresponding floating point number where <max> equal 1.0 and <min>
equals 0.0. These functions are in the form of getters and setters for a
<label>Percent property.

Parameters:
    - type: The integer type of the raw integer property.
    - label: The label of the raw integer property.
    - defaultValue: The initial default value of <label>.
    - min: The value of <label> which represents zero percent.
    - max: The value of <label> which represents one hundred percent.

-properties

{{type}} {{label}} = {{defaultValue}} // {{comment}} This value represents a percentage value where the 0 percent is equal to {{min}} and 100 percent is equal to {{max}}.

+c

/**
 *  \brief Converts {{structName}}.{{label}} to its corresponding floating point
 *  percentage representation.
 *
 *  \param[in] strct The {{structName}} containing the {{label}} property
 *  being converted.
 *
 *  \returns A double representing {{structName}}.{{label}} as a percentage
 *  where {{min}} represents 0.0 and {{max}} represents 1.0.
 */
double {{structName}}_{{label}}_percent(const struct {{structName}} strct) __attribute__((const));

/**
 *  \brief Converts and stores a percentage floating point value in
 *  {{structName}}.{{label}}.
 *
 *  \param[in,out] strct A pointer to a{{structName}} containing the {{label}}
 *  property which will be set.
 *
 *  \param[in] newValue The floating point percentage value which will be
 *  converted to the integer representations such that 0.0 equals {{min}} and
 *  1.0 equals {{max}}.
 */
void {{structName}}_set_{{label}}_percent(struct {{structName}} *strct, const double newValue) __attribute__((nonnull));

#c

/**
 *  \brief Converts {{structName}}.{{label}} to its corresponding floating point
 *  percentage representation.
 *
 *  \param[in] strct The {{structName}} containing the {{label}} property
 *  being converted.
 *
 *  \returns A double representing {{structName}}.{{label}} as a percentage
 *  where {{min}} represents 0.0 and {{max}} represents 1.0.
 */
double {{structName}}_{{label}}_percent(const struct {{structName}} strct)
{
    return ((double) (strct.{{label}} - {{min}})) / ((double) ({{max}} - {{min}}));
}

/**
 *  \brief Converts and stores a percentage floating point value in
 *  {{structName}}.{{label}}.
 *
 *  \param[in,out] strct A pointer to a{{structName}} containing the {{label}}
 *  property which will be set.
 *
 *  \param[in] newValue The floating point percentage value which will be
 *  converted to the integer representations such that 0.0 equals {{min}} and
 *  1.0 equals {{max}}.
 */
void {{structName}}_set_{{label}}_percent(struct {{structName}} *strct, const double newValue)
{
    strct->{{label}} = (({{type}}) (round(newValue * ((double) ({{max}} - {{min}}))))) + {{min}};
}

%c++

/**
 *  \brief Converts {{className}}.{{label}}() to its corresponding floating point
 *  percentage representation.
 *
 *  \returns A double representing {{className}}.{{label}}() as a percentage
 *  where {{min}} represents 0.0 and {{max}} represents 1.0.
 */
double {{label}}Percent() const
{
    return static_cast<double>(strct.{{label}} - {{min}}) / static_cast<double>({{max}} - {{min}});
}

/**
 *  \brief Converts and stores a percentage floating point value in
 *  {{className}}.{{label}}.
 *
 *  \param[in] newValue The floating point percentage value which will be
 *  converted to the integer representations such that 0.0 equals {{min}} and
 *  1.0 equals {{max}}.
 */
void set_{{label}}Percent(const double newValue)
{
    set_{{label}}(static_cast<{{type}}>(round(newValue * static_cast<double>({{max}} - {{min}})) + {{min}}));
}
