/*
 * file wb_nao_sonar_protected_walk_command.h
 *
 * This file was generated by classgenerator from nao_sonar_protected_walk_command.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2019 Vlad Estivill-Castro. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Vlad Estivill-Castro.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef wb_nao_sonar_protected_walk_command_h
#define wb_nao_sonar_protected_walk_command_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"

#ifdef __linux
# ifndef _POSIX_SOURCE
#  define _POSIX_SOURCE 200112L
# endif
#endif
#ifndef _XOPEN_SOURCE
# define _XOPEN_SOURCE 700
#endif
#ifdef __APPLE__
# ifndef _DARWIN_C_SOURCE
#  define _DARWIN_C_SOURCE 200112L
# endif
# ifndef __DARWIN_C_LEVEL
#  define __DARWIN_C_LEVEL 200112L
# endif
#endif

#pragma clang diagnostic pop

#include <gu_util.h>
#include <stdint.h>

#define NAO_SONAR_PROTECTED_WALK_COMMAND_GENERATED 
#define NAO_SONAR_PROTECTED_WALK_COMMAND_C_STRUCT wb_nao_sonar_protected_walk_command 
#define NAO_SONAR_PROTECTED_WALK_COMMAND_NUMBER_OF_VARIABLES 8

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#define NAO_SONAR_PROTECTED_WALK_COMMAND_DESC_BUFFER_SIZE 137
#define NAO_SONAR_PROTECTED_WALK_COMMAND_TO_STRING_BUFFER_SIZE 51
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * This message should be used when you want to issue a walk command that is protected by sonar; so
 * if you attempt to walk into something that sonar detects it would replace it by suitable walk
 * that avoids the obstacle.
 */
struct wb_nao_sonar_protected_walk_command
{

    /**
     * connects the dcm callbacks. Essentially turning the walk on. When enabled, the walk engine controls all joint values except the head pitch and yaw.
     */
    PROPERTY(bool, walkEngineOn)

    /**
     * [-300 - 300] step-size(mm) per second, limited to +/- 300mm/step
     */
    PROPERTY(int16_t, forward)

    /**
     * [-200 - 200] step-size(mm) per second, limited to +/- 200mm/step
     */
    PROPERTY(int16_t, left)

    /**
     * [-85 - 85] step-size(mm) per second, limited to +/- 85deg/step
     */
    PROPERTY(int8_t, turn)

    /**
     * subsumption priority 1: unprotected walk, command unmodified. If priority 2 use protected by sonar mode.
     */
    PROPERTY(int8_t, priority)

    /**
     * No ratcheting, no speed 'buildup', just full step sizes. This is good for exact movements, like walk 23cm forward for a kick.
     */
    PROPERTY(bool, exactStepsRequested)

    /**
     * Odometry will reset any time this is changed or incremented.
     */
    PROPERTY(uint8_t, odometryResetCounter)

    /**
     * [0 - 1] controls what the robot does when stopped, 0 == STAND and lower stiffness, 1 == stay in READY, crouched and ready to walk immediately.
     */
    PROPERTY(uint8_t, bend)

};

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * Convert to a description string.
 */
const char* wb_nao_sonar_protected_walk_command_description(const struct wb_nao_sonar_protected_walk_command* self, char* descString, size_t bufferSize);

/**
 * Convert to a string.
 */
const char* wb_nao_sonar_protected_walk_command_to_string(const struct wb_nao_sonar_protected_walk_command* self, char* toString, size_t bufferSize);

/**
 * Convert from a string.
 */
struct wb_nao_sonar_protected_walk_command* wb_nao_sonar_protected_walk_command_from_string(struct wb_nao_sonar_protected_walk_command* self, const char* str);

#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

/*#ifdef WHITEBOARD_SERIALISATION*/

/**
 * Network stream serialisation
 */
size_t wb_nao_sonar_protected_walk_command_to_network_serialised(const struct wb_nao_sonar_protected_walk_command *self, char *dst);

/**
 * Network stream deserialisation
 */
size_t wb_nao_sonar_protected_walk_command_from_network_serialised(const char *src, struct wb_nao_sonar_protected_walk_command *dst);

/*#endif /// WHITEBOARD_SERIALISATION*/

#ifdef __cplusplus
}
#endif

#endif /// wb_nao_sonar_protected_walk_command_h
