/** 
 * file SENSORSLegJointSensors.h 
 * 
 * This file was generated by classgenerator from SENSORS_LegJointSensors.txt. 
 * DO NOT CHANGE MANUALLY! 
 * 
 * Created by Carl Lusty on 8:2, 30/4/2016 
 * Copyright (c) 2016 Carl Lusty 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer in the documentation and/or other materials 
 *    provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this 
 *    software must display the following acknowledgement: 
 * 
 *    This product includes software developed by Carl Lusty. 
 * 
 * 4. Neither the name of the author nor the names of contributors 
 *    may be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * ----------------------------------------------------------------------- 
 * This program is free software; you can redistribute it and/or 
 * modify it under the above terms or under the terms of the GNU 
 * General Public License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses/ 
 * or write to the Free Software Foundation, Inc., 51 Franklin Street, 
 * Fifth Floor, Boston, MA  02110-1301, USA. 
 */ 


#ifndef SENSORSLegJointSensors_DEFINED 
#define SENSORSLegJointSensors_DEFINED 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
#include <cstdlib> 
#include <string.h> 
#include <sstream> 
#endif 

#include "wb_sensors_legjointsensors.h" 

namespace guWhiteboard 
{
    /** 
     * @brief Leg joints 
     */ 
    class SENSORSLegJointSensors: public wb_sensors_legjointsensors 
    { 
    public:
        /** Constructor */ 
        SENSORSLegJointSensors(float LKneePitch  = 0.0f, float LAnklePitch  = 0.0f, float LAnkleRoll  = 0.0f, float RKneePitch  = 0.0f, float RAnklePitch  = 0.0f, float RAnkleRoll  = 0.0f, float LHipYawPitch  = 0.0f, float LHipRoll  = 0.0f, float LHipPitch  = 0.0f, float RHipYawPitch  = 0.0f, float RHipRoll  = 0.0f, float RHipPitch  = 0.0f)
        { 
            set_LKneePitch (LKneePitch ); 
            set_LAnklePitch (LAnklePitch ); 
            set_LAnkleRoll (LAnkleRoll ); 
            set_RKneePitch (RKneePitch ); 
            set_RAnklePitch (RAnklePitch ); 
            set_RAnkleRoll (RAnkleRoll ); 
            set_LHipYawPitch (LHipYawPitch ); 
            set_LHipRoll (LHipRoll ); 
            set_LHipPitch (LHipPitch ); 
            set_RHipYawPitch (RHipYawPitch ); 
            set_RHipRoll (RHipRoll ); 
            set_RHipPitch (RHipPitch ); 
        } 

        /** Copy Constructor */ 
        SENSORSLegJointSensors(const SENSORSLegJointSensors &other) : wb_sensors_legjointsensors() 
        { 
            set_LKneePitch (other.LKneePitch ()); 
            set_LAnklePitch (other.LAnklePitch ()); 
            set_LAnkleRoll (other.LAnkleRoll ()); 
            set_RKneePitch (other.RKneePitch ()); 
            set_RAnklePitch (other.RAnklePitch ()); 
            set_RAnkleRoll (other.RAnkleRoll ()); 
            set_LHipYawPitch (other.LHipYawPitch ()); 
            set_LHipRoll (other.LHipRoll ()); 
            set_LHipPitch (other.LHipPitch ()); 
            set_RHipYawPitch (other.RHipYawPitch ()); 
            set_RHipRoll (other.RHipRoll ()); 
            set_RHipPitch (other.RHipPitch ()); 
        } 

        /** Copy Assignment Operator */ 
        SENSORSLegJointSensors &operator = (const SENSORSLegJointSensors &other) 
        { 
            set_LKneePitch (other.LKneePitch ()); 
            set_LAnklePitch (other.LAnklePitch ()); 
            set_LAnkleRoll (other.LAnkleRoll ()); 
            set_RKneePitch (other.RKneePitch ()); 
            set_RAnklePitch (other.RAnklePitch ()); 
            set_RAnkleRoll (other.RAnkleRoll ()); 
            set_LHipYawPitch (other.LHipYawPitch ()); 
            set_LHipRoll (other.LHipRoll ()); 
            set_LHipPitch (other.LHipPitch ()); 
            set_RHipYawPitch (other.RHipYawPitch ()); 
            set_RHipRoll (other.RHipRoll ()); 
            set_RHipPitch (other.RHipPitch ()); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        /** String Constructor */ 
        SENSORSLegJointSensors(const std::string &str) { from_string(str.c_str()); }  

        std::string description() 
        { 
#ifdef USE_WB_SENSORS_LEGJOINTSENSORS_C_CONVERSION 
            char buffer[SENSORS_LEGJOINTSENSORS_DESC_BUFFER_SIZE]; 
            wb_sensors_legjointsensors_description(this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::ostringstream ss; 
            ss << "LKneePitch =" << LKneePitch (); 
            ss << ", "; 
            ss << "LAnklePitch =" << LAnklePitch (); 
            ss << ", "; 
            ss << "LAnkleRoll =" << LAnkleRoll (); 
            ss << ", "; 
            ss << "RKneePitch =" << RKneePitch (); 
            ss << ", "; 
            ss << "RAnklePitch =" << RAnklePitch (); 
            ss << ", "; 
            ss << "RAnkleRoll =" << RAnkleRoll (); 
            ss << ", "; 
            ss << "LHipYawPitch =" << LHipYawPitch (); 
            ss << ", "; 
            ss << "LHipRoll =" << LHipRoll (); 
            ss << ", "; 
            ss << "LHipPitch =" << LHipPitch (); 
            ss << ", "; 
            ss << "RHipYawPitch =" << RHipYawPitch (); 
            ss << ", "; 
            ss << "RHipRoll =" << RHipRoll (); 
            ss << ", "; 
            ss << "RHipPitch =" << RHipPitch (); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_LEGJOINTSENSORS_C_CONVERSION
        } 

        std::string to_string() 
        { 
#ifdef USE_WB_SENSORS_LEGJOINTSENSORS_C_CONVERSION 
            char buffer[SENSORS_LEGJOINTSENSORS_DESC_BUFFER_SIZE]; 
            wb_sensors_legjointsensors_to_string(this, buffer, sizeof(buffer)); 
            std::string toString = buffer; 
            return toString; 
#else 
            std::ostringstream ss; 
            ss << LKneePitch (); 
            ss << ", "; 
            ss << LAnklePitch (); 
            ss << ", "; 
            ss << LAnkleRoll (); 
            ss << ", "; 
            ss << RKneePitch (); 
            ss << ", "; 
            ss << RAnklePitch (); 
            ss << ", "; 
            ss << RAnkleRoll (); 
            ss << ", "; 
            ss << LHipYawPitch (); 
            ss << ", "; 
            ss << LHipRoll (); 
            ss << ", "; 
            ss << LHipPitch (); 
            ss << ", "; 
            ss << RHipYawPitch (); 
            ss << ", "; 
            ss << RHipRoll (); 
            ss << ", "; 
            ss << RHipPitch (); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_LEGJOINTSENSORS_C_CONVERSION
        } 

        void from_string(const std::string &str) 
        { 
#ifdef USE_WB_SENSORS_LEGJOINTSENSORS_C_CONVERSION 
            wb_sensors_legjointsensors_from_string(this, str); 
#else 
            std::istringstream iss(str); 
            std::string strings[SENSORS_LEGJOINTSENSORS_NUMBER_OF_VARIABLES]; 
            memset(strings, 0, sizeof(strings)); 
            std::string token; 
            int count = 0; 
            while (getline(iss, token, ',')) 
            { 
                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 

                size_t pos = token.find('='); 

                if (pos != std::string::npos) 
                { 
                     token.erase(0, pos+1); 
                } 

                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 
                strings[count] = token; 
                count++; 
            } 

            if (!strings[0].empty()) 
                set_LKneePitch (float(atof(strings[0].c_str()))); 

            if (!strings[1].empty()) 
                set_LAnklePitch (float(atof(strings[1].c_str()))); 

            if (!strings[2].empty()) 
                set_LAnkleRoll (float(atof(strings[2].c_str()))); 

            if (!strings[3].empty()) 
                set_RKneePitch (float(atof(strings[3].c_str()))); 

            if (!strings[4].empty()) 
                set_RAnklePitch (float(atof(strings[4].c_str()))); 

            if (!strings[5].empty()) 
                set_RAnkleRoll (float(atof(strings[5].c_str()))); 

            if (!strings[6].empty()) 
                set_LHipYawPitch (float(atof(strings[6].c_str()))); 

            if (!strings[7].empty()) 
                set_LHipRoll (float(atof(strings[7].c_str()))); 

            if (!strings[8].empty()) 
                set_LHipPitch (float(atof(strings[8].c_str()))); 

            if (!strings[9].empty()) 
                set_RHipYawPitch (float(atof(strings[9].c_str()))); 

            if (!strings[10].empty()) 
                set_RHipRoll (float(atof(strings[10].c_str()))); 

            if (!strings[11].empty()) 
                set_RHipPitch (float(atof(strings[11].c_str()))); 

#endif /// USE_WB_SENSORS_LEGJOINTSENSORS_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
#endif /// SENSORSLegJointSensors_DEFINED 
