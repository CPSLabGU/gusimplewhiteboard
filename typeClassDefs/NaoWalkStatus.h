/*
 * file NaoWalkStatus.h
 *
 * This file was generated by classgenerator from naoWalkStatus.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Carl Lusty at 09:53, 27/10/2017.
 * Copyright Â© 2017 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef NaoWalkStatus_DEFINED
#define NaoWalkStatus_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include "gu_util.h"
#include "wb_nao_walk_status.h"

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_nao_walk_status`.
     */
    class NaoWalkStatus: public wb_nao_walk_status {

    public:

        /**
         * Create a new `NaoWalkStatus`.
         */
        NaoWalkStatus(int16_t forward = 0, int16_t left = 0, int8_t turn = 0) {
            set_forward(forward);
            set_left(left);
            set_turn(turn);
        }

        /**
         * Copy Constructor.
         */
        NaoWalkStatus(const NaoWalkStatus &other): wb_nao_walk_status() {
            set_forward(other.forward());
            set_left(other.left());
            set_turn(other.turn());
        }

        /**
         * Copy Assignment Operator.
         */
        NaoWalkStatus &operator = (const NaoWalkStatus &other) {
            set_forward(other.forward());
            set_left(other.left());
            set_turn(other.turn());
            return *this;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        NaoWalkStatus(const std::string &str) { wb_nao_walk_status_from_string(this, str.c_str()); }

        std::string description() {
#ifdef USE_WB_NAO_WALK_STATUS_C_CONVERSION
            char buffer[NAOWALKSTATUS_DESC_BUFFER_SIZE];
            wb_nao_walk_status_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            ss << "forward=" << static_cast<signed>(this->forward());
            ss << ", ";
            ss << "left=" << static_cast<signed>(this->left());
            ss << ", ";
            ss << "turn=" << static_cast<signed>(this->turn());
            return ss.str();
#endif /// USE_WB_NAO_WALK_STATUS_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_NAO_WALK_STATUS_C_CONVERSION
            char buffer[NAOWALKSTATUS_TO_STRING_BUFFER_SIZE];
            wb_nao_walk_status_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            ss << static_cast<signed>(this->forward());
            ss << ", ";
            ss << static_cast<signed>(this->left());
            ss << ", ";
            ss << static_cast<signed>(this->turn());
            return ss.str();
#endif /// USE_WB_NAO_WALK_STATUS_C_CONVERSION
        }

        void from_string(const std::string &str) {
#ifdef USE_WB_NAOWALKSTATUS_C_CONVERSION
            wb_nao_walk_status_from_string(this, str.c_str());
#else
            char var[255];
            unsigned long forward_index = str.find("forward=");
            if (forward_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(forward_index, str.length()).c_str(), "forward = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_forward(static_cast<int16_t>(atoi(value.c_str())));
                }
            }
            unsigned long left_index = str.find(" left=");
            if (left_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(left_index + 1, str.length()).c_str(), "left = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_left(static_cast<int16_t>(atoi(value.c_str())));
                }
            }
            unsigned long turn_index = str.find(" turn=");
            if (turn_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(turn_index + 1, str.length()).c_str(), "turn = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_turn(static_cast<int8_t>(atoi(value.c_str())));
                }
            }
#endif /// USE_WB_NAOWALKSTATUS_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION
    };

} /// namespace guWhiteboard
#endif /// NaoWalkStatus_DEFINED
