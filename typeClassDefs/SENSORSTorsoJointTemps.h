/** 
 * file SENSORSTorsoJointTemps.h 
 * 
 * This file was generated by classgenerator from SENSORS_TorsoJointTemps.txt. 
 * DO NOT CHANGE MANUALLY! 
 * 
 * Created by Carl Lusty on 12:26, 13/4/2016 
 * Copyright (c) 2016 Carl Lusty 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer in the documentation and/or other materials 
 *    provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this 
 *    software must display the following acknowledgement: 
 * 
 *    This product includes software developed by Carl Lusty. 
 * 
 * 4. Neither the name of the author nor the names of contributors 
 *    may be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * ----------------------------------------------------------------------- 
 * This program is free software; you can redistribute it and/or 
 * modify it under the above terms or under the terms of the GNU 
 * General Public License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses/ 
 * or write to the Free Software Foundation, Inc., 51 Franklin Street, 
 * Fifth Floor, Boston, MA  02110-1301, USA. 
 */ 


#ifndef SENSORSTorsoJointTemps_DEFINED 
#define SENSORSTorsoJointTemps_DEFINED 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
#include <cstdlib> 
#include <string.h> 
#include <sstream> 
#endif 

#include "wb_sensors_torsojointtemps.h" 

namespace guWhiteboard 
{
    /** 
     * @brief Temp class for various joints 
     * From Nao Docs: There are two different Devices that return a temperature: the MotorBoard, and the Battery. For both, the temperature returned in “Value” is in deg Celsius. The motor temperature is a simulated one, using electric current value of the motor. Even when the robot just starts, the temperature is quite high (50°C).The simulation starts at this value mainly due to the internal temperature value. The motor board implements a temperature limitation: as long as the simulated temperature reaches 75°C, the current limitation is decreased to stay under 85°C. 
     *   
     */ 
    class SENSORSTorsoJointTemps: public wb_sensors_torsojointtemps 
    { 
    public:
        /** Constructor */ 
        SENSORSTorsoJointTemps(float  HeadYaw = 0.0f, float  HeadPitch = 0.0f, float  LShoulderPitch = 0.0f, float  LShoulderRoll = 0.0f, float  LElbowYaw = 0.0f, float  LElbowRoll = 0.0f, float  LHipYawPitch = 0.0f, float  LHipRoll = 0.0f, float  LHipPitch = 0.0f, float  RHipRoll = 0.0f, float  RHipPitch = 0.0f, float  RShoulderPitch = 0.0f, float  RShoulderRoll = 0.0f, float  RElbowYaw = 0.0f, float  RElbowRoll = 0.0f)
        { 
            set_ HeadYaw( HeadYaw); 
            set_ HeadPitch( HeadPitch); 
            set_ LShoulderPitch( LShoulderPitch); 
            set_ LShoulderRoll( LShoulderRoll); 
            set_ LElbowYaw( LElbowYaw); 
            set_ LElbowRoll( LElbowRoll); 
            set_ LHipYawPitch( LHipYawPitch); 
            set_ LHipRoll( LHipRoll); 
            set_ LHipPitch( LHipPitch); 
            set_ RHipRoll( RHipRoll); 
            set_ RHipPitch( RHipPitch); 
            set_ RShoulderPitch( RShoulderPitch); 
            set_ RShoulderRoll( RShoulderRoll); 
            set_ RElbowYaw( RElbowYaw); 
            set_ RElbowRoll( RElbowRoll); 
        } 

        /** Copy Constructor */ 
        SENSORSTorsoJointTemps(const SENSORSTorsoJointTemps &other) : wb_sensors_torsojointtemps() 
        { 
            set_ HeadYaw(other. HeadYaw()); 
            set_ HeadPitch(other. HeadPitch()); 
            set_ LShoulderPitch(other. LShoulderPitch()); 
            set_ LShoulderRoll(other. LShoulderRoll()); 
            set_ LElbowYaw(other. LElbowYaw()); 
            set_ LElbowRoll(other. LElbowRoll()); 
            set_ LHipYawPitch(other. LHipYawPitch()); 
            set_ LHipRoll(other. LHipRoll()); 
            set_ LHipPitch(other. LHipPitch()); 
            set_ RHipRoll(other. RHipRoll()); 
            set_ RHipPitch(other. RHipPitch()); 
            set_ RShoulderPitch(other. RShoulderPitch()); 
            set_ RShoulderRoll(other. RShoulderRoll()); 
            set_ RElbowYaw(other. RElbowYaw()); 
            set_ RElbowRoll(other. RElbowRoll()); 
        } 

        /** Copy Assignment Operator */ 
        SENSORSTorsoJointTemps &operator = (const SENSORSTorsoJointTemps &other) 
        { 
            set_ HeadYaw(other. HeadYaw()); 
            set_ HeadPitch(other. HeadPitch()); 
            set_ LShoulderPitch(other. LShoulderPitch()); 
            set_ LShoulderRoll(other. LShoulderRoll()); 
            set_ LElbowYaw(other. LElbowYaw()); 
            set_ LElbowRoll(other. LElbowRoll()); 
            set_ LHipYawPitch(other. LHipYawPitch()); 
            set_ LHipRoll(other. LHipRoll()); 
            set_ LHipPitch(other. LHipPitch()); 
            set_ RHipRoll(other. RHipRoll()); 
            set_ RHipPitch(other. RHipPitch()); 
            set_ RShoulderPitch(other. RShoulderPitch()); 
            set_ RShoulderRoll(other. RShoulderRoll()); 
            set_ RElbowYaw(other. RElbowYaw()); 
            set_ RElbowRoll(other. RElbowRoll()); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        /** String Constructor */ 
        SENSORSTorsoJointTemps(const std::string &str) { from_string(str.c_str()); }  

        std::string description() 
        { 
#ifdef USE_WB_SENSORS_TORSOJOINTTEMPS_C_CONVERSION 
            char buffer[SENSORS_TORSOJOINTTEMPS_DESC_BUFFER_SIZE]; 
            wb_sensors_torsojointtemps_description(this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::ostringstream ss; 
            ss << " HeadYaw=" <<  HeadYaw(); 
            ss << ", "; 
            ss << " HeadPitch=" <<  HeadPitch(); 
            ss << ", "; 
            ss << " LShoulderPitch=" <<  LShoulderPitch(); 
            ss << ", "; 
            ss << " LShoulderRoll=" <<  LShoulderRoll(); 
            ss << ", "; 
            ss << " LElbowYaw=" <<  LElbowYaw(); 
            ss << ", "; 
            ss << " LElbowRoll=" <<  LElbowRoll(); 
            ss << ", "; 
            ss << " LHipYawPitch=" <<  LHipYawPitch(); 
            ss << ", "; 
            ss << " LHipRoll=" <<  LHipRoll(); 
            ss << ", "; 
            ss << " LHipPitch=" <<  LHipPitch(); 
            ss << ", "; 
            ss << " RHipRoll=" <<  RHipRoll(); 
            ss << ", "; 
            ss << " RHipPitch=" <<  RHipPitch(); 
            ss << ", "; 
            ss << " RShoulderPitch=" <<  RShoulderPitch(); 
            ss << ", "; 
            ss << " RShoulderRoll=" <<  RShoulderRoll(); 
            ss << ", "; 
            ss << " RElbowYaw=" <<  RElbowYaw(); 
            ss << ", "; 
            ss << " RElbowRoll=" <<  RElbowRoll(); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_TORSOJOINTTEMPS_C_CONVERSION
        } 

        std::string to_string() 
        { 
#ifdef USE_WB_SENSORS_TORSOJOINTTEMPS_C_CONVERSION 
            char buffer[SENSORS_TORSOJOINTTEMPS_DESC_BUFFER_SIZE]; 
            wb_sensors_torsojointtemps_to_string(this, buffer, sizeof(buffer)); 
            std::string toString = buffer; 
            return toString; 
#else 
            std::ostringstream ss; 
            ss <<  HeadYaw(); 
            ss << ", "; 
            ss <<  HeadPitch(); 
            ss << ", "; 
            ss <<  LShoulderPitch(); 
            ss << ", "; 
            ss <<  LShoulderRoll(); 
            ss << ", "; 
            ss <<  LElbowYaw(); 
            ss << ", "; 
            ss <<  LElbowRoll(); 
            ss << ", "; 
            ss <<  LHipYawPitch(); 
            ss << ", "; 
            ss <<  LHipRoll(); 
            ss << ", "; 
            ss <<  LHipPitch(); 
            ss << ", "; 
            ss <<  RHipRoll(); 
            ss << ", "; 
            ss <<  RHipPitch(); 
            ss << ", "; 
            ss <<  RShoulderPitch(); 
            ss << ", "; 
            ss <<  RShoulderRoll(); 
            ss << ", "; 
            ss <<  RElbowYaw(); 
            ss << ", "; 
            ss <<  RElbowRoll(); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_TORSOJOINTTEMPS_C_CONVERSION
        } 

        void from_string(const std::string &str) 
        { 
#ifdef USE_WB_SENSORS_TORSOJOINTTEMPS_C_CONVERSION 
            wb_sensors_torsojointtemps_from_string(this, str); 
#else 
            std::istringstream iss(str); 
            std::string strings[SENSORS_TORSOJOINTTEMPS_NUMBER_OF_VARIABLES]; 
            memset(strings, 0, sizeof(strings)); 
            std::string token; 
            int count = 0; 
            while (getline(iss, token, ',')) 
            { 
                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 

                size_t pos = token.find('='); 

                if (pos != std::string::npos) 
                { 
                     token.erase(0, pos+1); 
                } 

                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 
                strings[count] = token; 
                count++; 
            } 

            if (!strings[0].empty()) 
                set_ HeadYaw(float(atof(strings[0].c_str()))); 

            if (!strings[1].empty()) 
                set_ HeadPitch(float(atof(strings[1].c_str()))); 

            if (!strings[2].empty()) 
                set_ LShoulderPitch(float(atof(strings[2].c_str()))); 

            if (!strings[3].empty()) 
                set_ LShoulderRoll(float(atof(strings[3].c_str()))); 

            if (!strings[4].empty()) 
                set_ LElbowYaw(float(atof(strings[4].c_str()))); 

            if (!strings[5].empty()) 
                set_ LElbowRoll(float(atof(strings[5].c_str()))); 

            if (!strings[6].empty()) 
                set_ LHipYawPitch(float(atof(strings[6].c_str()))); 

            if (!strings[7].empty()) 
                set_ LHipRoll(float(atof(strings[7].c_str()))); 

            if (!strings[8].empty()) 
                set_ LHipPitch(float(atof(strings[8].c_str()))); 

            if (!strings[9].empty()) 
                set_ RHipRoll(float(atof(strings[9].c_str()))); 

            if (!strings[10].empty()) 
                set_ RHipPitch(float(atof(strings[10].c_str()))); 

            if (!strings[11].empty()) 
                set_ RShoulderPitch(float(atof(strings[11].c_str()))); 

            if (!strings[12].empty()) 
                set_ RShoulderRoll(float(atof(strings[12].c_str()))); 

            if (!strings[13].empty()) 
                set_ RElbowYaw(float(atof(strings[13].c_str()))); 

            if (!strings[14].empty()) 
                set_ RElbowRoll(float(atof(strings[14].c_str()))); 

#endif /// USE_WB_SENSORS_TORSOJOINTTEMPS_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
#endif /// SENSORSTorsoJointTemps_DEFINED 
