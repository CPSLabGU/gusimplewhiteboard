/** 
 * file SENSORSBodySensors.h 
 * 
 * This file was generated by classgenerator from SENSORS_BodySensors.txt. 
 * DO NOT CHANGE MANUALLY! 
 * 
 * Created by Carl Lusty on 17:43, 26/8/2017 
 * Copyright (c) 2017 Carl Lusty 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer in the documentation and/or other materials 
 *    provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this 
 *    software must display the following acknowledgement: 
 * 
 *    This product includes software developed by Carl Lusty. 
 * 
 * 4. Neither the name of the author nor the names of contributors 
 *    may be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * ----------------------------------------------------------------------- 
 * This program is free software; you can redistribute it and/or 
 * modify it under the above terms or under the terms of the GNU 
 * General Public License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses/ 
 * or write to the Free Software Foundation, Inc., 51 Franklin Street, 
 * Fifth Floor, Boston, MA  02110-1301, USA. 
 */ 


#ifndef SENSORSBodySensors_DEFINED 
#define SENSORSBodySensors_DEFINED 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
#include <cstdlib> 
#include <string.h> 
#include <sstream> 
#endif 

#include "wb_sensors_bodysensors.h" 

namespace guWhiteboard 
{
    /** 
     * @brief Contains the current values of sensors located in the robots chest (designed for Nao) 
     * Examples 
     * -------- 
     * Get the state of the Chest Button 
     *     SENSORSBodySensors s = SENSORSBodySensors_t.get(); //get from the whiteboard 
     *     bool button_state = s.ChestBoard_Button(); //pull the variable out of the class 
     */ 
    class SENSORSBodySensors: public wb_sensors_bodysensors 
    { 
    public:
        /** Constructor */ 
        SENSORSBodySensors(float InertialSensor_AccX = 0.0f, float InertialSensor_AccY = 0.0f, float InertialSensor_AccZ = 0.0f, float InertialSensor_GyrX = 0.0f, float InertialSensor_GyrY = 0.0f, float InertialSensor_GyrRef = 0.0f, float InertialSensor_AngleX = 0.0f, float InertialSensor_AngleY = 0.0f, uint8_t Battery_Charge = 0, uint8_t Battery_Current = 0, float US = 0.0f, bool ChestBoard_Button = false, bool pad1 = false, int16_t pad2 = 0)
        { 
            set_InertialSensor_AccX(InertialSensor_AccX); 
            set_InertialSensor_AccY(InertialSensor_AccY); 
            set_InertialSensor_AccZ(InertialSensor_AccZ); 
            set_InertialSensor_GyrX(InertialSensor_GyrX); 
            set_InertialSensor_GyrY(InertialSensor_GyrY); 
            set_InertialSensor_GyrRef(InertialSensor_GyrRef); 
            set_InertialSensor_AngleX(InertialSensor_AngleX); 
            set_InertialSensor_AngleY(InertialSensor_AngleY); 
            set_Battery_Charge(Battery_Charge); 
            set_Battery_Current(Battery_Current); 
            set_US(US); 
            set_ChestBoard_Button(ChestBoard_Button); 
            set_pad1(pad1); 
            set_pad2(pad2); 
        } 

        /** Copy Constructor */ 
        SENSORSBodySensors(const SENSORSBodySensors &other) : wb_sensors_bodysensors() 
        { 
            set_InertialSensor_AccX(other.InertialSensor_AccX()); 
            set_InertialSensor_AccY(other.InertialSensor_AccY()); 
            set_InertialSensor_AccZ(other.InertialSensor_AccZ()); 
            set_InertialSensor_GyrX(other.InertialSensor_GyrX()); 
            set_InertialSensor_GyrY(other.InertialSensor_GyrY()); 
            set_InertialSensor_GyrRef(other.InertialSensor_GyrRef()); 
            set_InertialSensor_AngleX(other.InertialSensor_AngleX()); 
            set_InertialSensor_AngleY(other.InertialSensor_AngleY()); 
            set_Battery_Charge(other.Battery_Charge()); 
            set_Battery_Current(other.Battery_Current()); 
            set_US(other.US()); 
            set_ChestBoard_Button(other.ChestBoard_Button()); 
            set_pad1(other.pad1()); 
            set_pad2(other.pad2()); 
        } 

        /** Copy Assignment Operator */ 
        SENSORSBodySensors &operator = (const SENSORSBodySensors &other) 
        { 
            set_InertialSensor_AccX(other.InertialSensor_AccX()); 
            set_InertialSensor_AccY(other.InertialSensor_AccY()); 
            set_InertialSensor_AccZ(other.InertialSensor_AccZ()); 
            set_InertialSensor_GyrX(other.InertialSensor_GyrX()); 
            set_InertialSensor_GyrY(other.InertialSensor_GyrY()); 
            set_InertialSensor_GyrRef(other.InertialSensor_GyrRef()); 
            set_InertialSensor_AngleX(other.InertialSensor_AngleX()); 
            set_InertialSensor_AngleY(other.InertialSensor_AngleY()); 
            set_Battery_Charge(other.Battery_Charge()); 
            set_Battery_Current(other.Battery_Current()); 
            set_US(other.US()); 
            set_ChestBoard_Button(other.ChestBoard_Button()); 
            set_pad1(other.pad1()); 
            set_pad2(other.pad2()); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        /** String Constructor */ 
        SENSORSBodySensors(const std::string &str) { from_string(str.c_str()); }  

        std::string description() 
        { 
#ifdef USE_WB_SENSORS_BODYSENSORS_C_CONVERSION 
            char buffer[SENSORS_BODYSENSORS_DESC_BUFFER_SIZE]; 
            wb_sensors_bodysensors_description(this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::ostringstream ss; 
            ss << "InertialSensor_AccX=" << InertialSensor_AccX(); 
            ss << ", "; 
            ss << "InertialSensor_AccY=" << InertialSensor_AccY(); 
            ss << ", "; 
            ss << "InertialSensor_AccZ=" << InertialSensor_AccZ(); 
            ss << ", "; 
            ss << "InertialSensor_GyrX=" << InertialSensor_GyrX(); 
            ss << ", "; 
            ss << "InertialSensor_GyrY=" << InertialSensor_GyrY(); 
            ss << ", "; 
            ss << "InertialSensor_GyrRef=" << InertialSensor_GyrRef(); 
            ss << ", "; 
            ss << "InertialSensor_AngleX=" << InertialSensor_AngleX(); 
            ss << ", "; 
            ss << "InertialSensor_AngleY=" << InertialSensor_AngleY(); 
            ss << ", "; 
            ss << "Battery_Charge=" << static_cast<int>(Battery_Charge());
            ss << ", "; 
            ss << "Battery_Current=" << static_cast<int>(Battery_Current());
            ss << ", "; 
            ss << "US=" << US(); 
            ss << ", "; 
            ss << "ChestBoard_Button=" << ChestBoard_Button(); 
            ss << ", "; 
            ss << "pad1=" << pad1(); 
            ss << ", "; 
            ss << "pad2=" << pad2();
            
            return ss.str(); 

#endif /// USE_WB_SENSORS_BODYSENSORS_C_CONVERSION
        } 

        std::string to_string() 
        { 
#ifdef USE_WB_SENSORS_BODYSENSORS_C_CONVERSION 
            char buffer[SENSORS_BODYSENSORS_DESC_BUFFER_SIZE]; 
            wb_sensors_bodysensors_to_string(this, buffer, sizeof(buffer)); 
            std::string toString = buffer; 
            return toString; 
#else 
            std::ostringstream ss; 
            ss << InertialSensor_AccX(); 
            ss << ", "; 
            ss << InertialSensor_AccY(); 
            ss << ", "; 
            ss << InertialSensor_AccZ(); 
            ss << ", "; 
            ss << InertialSensor_GyrX(); 
            ss << ", "; 
            ss << InertialSensor_GyrY(); 
            ss << ", "; 
            ss << InertialSensor_GyrRef(); 
            ss << ", "; 
            ss << InertialSensor_AngleX(); 
            ss << ", "; 
            ss << InertialSensor_AngleY(); 
            ss << ", "; 
            ss << Battery_Charge(); 
            ss << ", "; 
            ss << Battery_Current(); 
            ss << ", "; 
            ss << US(); 
            ss << ", "; 
            ss << ChestBoard_Button(); 
            ss << ", "; 
            ss << pad1(); 
            ss << ", "; 
            ss << pad2(); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_BODYSENSORS_C_CONVERSION
        } 

        void from_string(const std::string &str) 
        { 
#ifdef USE_WB_SENSORS_BODYSENSORS_C_CONVERSION 
            wb_sensors_bodysensors_from_string(this, str); 
#else 
            char var[100]; 
            unsigned long InertialSensor_AccX_index = str.find("InertialSensor_AccX");
            if(InertialSensor_AccX_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_AccX_index, str.length()).c_str(), "InertialSensor_AccX = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_AccX(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_AccY_index = str.find("InertialSensor_AccY");
            if(InertialSensor_AccY_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_AccY_index, str.length()).c_str(), "InertialSensor_AccY = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_AccY(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_AccZ_index = str.find("InertialSensor_AccZ");
            if(InertialSensor_AccZ_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_AccZ_index, str.length()).c_str(), "InertialSensor_AccZ = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_AccZ(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_GyrX_index = str.find("InertialSensor_GyrX");
            if(InertialSensor_GyrX_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_GyrX_index, str.length()).c_str(), "InertialSensor_GyrX = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_GyrX(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_GyrY_index = str.find("InertialSensor_GyrY");
            if(InertialSensor_GyrY_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_GyrY_index, str.length()).c_str(), "InertialSensor_GyrY = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_GyrY(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_GyrRef_index = str.find("InertialSensor_GyrRef");
            if(InertialSensor_GyrRef_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_GyrRef_index, str.length()).c_str(), "InertialSensor_GyrRef = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_GyrRef(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_AngleX_index = str.find("InertialSensor_AngleX");
            if(InertialSensor_AngleX_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_AngleX_index, str.length()).c_str(), "InertialSensor_AngleX = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_AngleX(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long InertialSensor_AngleY_index = str.find("InertialSensor_AngleY");
            if(InertialSensor_AngleY_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(InertialSensor_AngleY_index, str.length()).c_str(), "InertialSensor_AngleY = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_InertialSensor_AngleY(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long Battery_Charge_index = str.find("Battery_Charge");
            if(Battery_Charge_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(Battery_Charge_index, str.length()).c_str(), "Battery_Charge = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_Battery_Charge(uint8_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long Battery_Current_index = str.find("Battery_Current");
            if(Battery_Current_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(Battery_Current_index, str.length()).c_str(), "Battery_Current = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_Battery_Current(uint8_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long US_index = str.find("US");
            if(US_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(US_index, str.length()).c_str(), "US = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_US(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long ChestBoard_Button_index = str.find("ChestBoard_Button");
            if(ChestBoard_Button_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ChestBoard_Button_index, str.length()).c_str(), "ChestBoard_Button = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ChestBoard_Button(value.compare("true") == 0  || value.compare("1") == 0 ? true : false); 
                } 
            } 

            unsigned long pad1_index = str.find("pad1");
            if(pad1_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(pad1_index, str.length()).c_str(), "pad1 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_pad1(value.compare("true") == 0  || value.compare("1") == 0 ? true : false); 
                } 
            } 

            unsigned long pad2_index = str.find("pad2");
            if(pad2_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(pad2_index, str.length()).c_str(), "pad2 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_pad2(int16_t(atoi(value.c_str()))); 
                } 
            } 

#endif /// USE_WB_SENSORS_BODYSENSORS_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
#endif /// SENSORSBodySensors_DEFINED 
