/*
 * file SENSORSTorsoJointTemps.swift
 *
 * This file was generated by classgenerator from SENSORS_TorsoJointTemps.txt.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright © 2019 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * @brief Temp class for various joints
 * From Nao Docs: There are two different Devices that return a temperature: the MotorBoard, and the Battery. For both, the temperature returned in “Value” is in deg Celsius. The motor temperature is a simulated one, using electric current value of the motor. Even when the robot just starts, the temperature is quite high (50°C).The simulation starts at this value mainly due to the internal temperature value. The motor board implements a temperature limitation: as long as the simulated temperature reaches 75°C, the current limitation is decreased to stay under 85°C.
 */
extension wb_sensors_torsojointtemps {

    /**
     * Create a new `wb_sensors_torsojointtemps`.
     */
    public static func make() -> wb_sensors_torsojointtemps {
        return wb_sensors_torsojointtemps(0.0)
    }

    /**
     * Create a new `wb_sensors_torsojointtemps`.
     */
    public init(_ HeadYaw: Float = 0.0, HeadPitch: Float = 0.0, LShoulderPitch: Float = 0.0, LShoulderRoll: Float = 0.0, LElbowYaw: Float = 0.0, LElbowRoll: Float = 0.0, LHipYawPitch: Float = 0.0, LHipRoll: Float = 0.0, LHipPitch: Float = 0.0, RHipRoll: Float = 0.0, RHipPitch: Float = 0.0, RShoulderPitch: Float = 0.0, RShoulderRoll: Float = 0.0, RElbowYaw: Float = 0.0, RElbowRoll: Float = 0.0) {
        self.init()
        self.HeadYaw = HeadYaw
        self.HeadPitch = HeadPitch
        self.LShoulderPitch = LShoulderPitch
        self.LShoulderRoll = LShoulderRoll
        self.LElbowYaw = LElbowYaw
        self.LElbowRoll = LElbowRoll
        self.LHipYawPitch = LHipYawPitch
        self.LHipRoll = LHipRoll
        self.LHipPitch = LHipPitch
        self.RHipRoll = RHipRoll
        self.RHipPitch = RHipPitch
        self.RShoulderPitch = RShoulderPitch
        self.RShoulderRoll = RShoulderRoll
        self.RElbowYaw = RElbowYaw
        self.RElbowRoll = RElbowRoll
    }

    /**
     * Create a `wb_sensors_torsojointtemps` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let HeadYaw = dictionary["HeadYaw"] as? Float,
            let HeadPitch = dictionary["HeadPitch"] as? Float,
            let LShoulderPitch = dictionary["LShoulderPitch"] as? Float,
            let LShoulderRoll = dictionary["LShoulderRoll"] as? Float,
            let LElbowYaw = dictionary["LElbowYaw"] as? Float,
            let LElbowRoll = dictionary["LElbowRoll"] as? Float,
            let LHipYawPitch = dictionary["LHipYawPitch"] as? Float,
            let LHipRoll = dictionary["LHipRoll"] as? Float,
            let LHipPitch = dictionary["LHipPitch"] as? Float,
            let RHipRoll = dictionary["RHipRoll"] as? Float,
            let RHipPitch = dictionary["RHipPitch"] as? Float,
            let RShoulderPitch = dictionary["RShoulderPitch"] as? Float,
            let RShoulderRoll = dictionary["RShoulderRoll"] as? Float,
            let RElbowYaw = dictionary["RElbowYaw"] as? Float,
            let RElbowRoll = dictionary["RElbowRoll"] as? Float
        else {
            fatalError("Unable to convert \(dictionary) to wb_sensors_torsojointtemps.")
        }
        self.HeadYaw = HeadYaw
        self.HeadPitch = HeadPitch
        self.LShoulderPitch = LShoulderPitch
        self.LShoulderRoll = LShoulderRoll
        self.LElbowYaw = LElbowYaw
        self.LElbowRoll = LElbowRoll
        self.LHipYawPitch = LHipYawPitch
        self.LHipRoll = LHipRoll
        self.LHipPitch = LHipPitch
        self.RHipRoll = RHipRoll
        self.RHipPitch = RHipPitch
        self.RShoulderPitch = RShoulderPitch
        self.RShoulderRoll = RShoulderRoll
        self.RElbowYaw = RElbowYaw
        self.RElbowRoll = RElbowRoll
    }

}

extension wb_sensors_torsojointtemps: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "HeadYaw=\(self.HeadYaw)"
        descString += ", "
        descString += "HeadPitch=\(self.HeadPitch)"
        descString += ", "
        descString += "LShoulderPitch=\(self.LShoulderPitch)"
        descString += ", "
        descString += "LShoulderRoll=\(self.LShoulderRoll)"
        descString += ", "
        descString += "LElbowYaw=\(self.LElbowYaw)"
        descString += ", "
        descString += "LElbowRoll=\(self.LElbowRoll)"
        descString += ", "
        descString += "LHipYawPitch=\(self.LHipYawPitch)"
        descString += ", "
        descString += "LHipRoll=\(self.LHipRoll)"
        descString += ", "
        descString += "LHipPitch=\(self.LHipPitch)"
        descString += ", "
        descString += "RHipRoll=\(self.RHipRoll)"
        descString += ", "
        descString += "RHipPitch=\(self.RHipPitch)"
        descString += ", "
        descString += "RShoulderPitch=\(self.RShoulderPitch)"
        descString += ", "
        descString += "RShoulderRoll=\(self.RShoulderRoll)"
        descString += ", "
        descString += "RElbowYaw=\(self.RElbowYaw)"
        descString += ", "
        descString += "RElbowRoll=\(self.RElbowRoll)"
        return descString
    }

}

extension wb_sensors_torsojointtemps: Equatable {}

public func == (lhs: wb_sensors_torsojointtemps, rhs: wb_sensors_torsojointtemps) -> Bool {
    return lhs.HeadYaw == rhs.HeadYaw
        && lhs.HeadPitch == rhs.HeadPitch
        && lhs.LShoulderPitch == rhs.LShoulderPitch
        && lhs.LShoulderRoll == rhs.LShoulderRoll
        && lhs.LElbowYaw == rhs.LElbowYaw
        && lhs.LElbowRoll == rhs.LElbowRoll
        && lhs.LHipYawPitch == rhs.LHipYawPitch
        && lhs.LHipRoll == rhs.LHipRoll
        && lhs.LHipPitch == rhs.LHipPitch
        && lhs.RHipRoll == rhs.RHipRoll
        && lhs.RHipPitch == rhs.RHipPitch
        && lhs.RShoulderPitch == rhs.RShoulderPitch
        && lhs.RShoulderRoll == rhs.RShoulderRoll
        && lhs.RElbowYaw == rhs.RElbowYaw
        && lhs.RElbowRoll == rhs.RElbowRoll
}
