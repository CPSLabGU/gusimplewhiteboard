-author Carl Lusty

-c

#include "wb_machine_line_sighting.h"

enum GoalSightingType {
    NoSightingType,
    LeftPostSightingType,
    RightPostSightingType,
    GoalSightingType
};

enum HorizonSightingType {
    NoHorizonSightingType,
    LineHorizonSightingType,
    CornerHorizonSightingType
};

-c++

#include "MachineLineSighting.h"

-properties
int8_t ball_direction = 0 //degrees, relative to the center of the nao torso. + == left, 0 == straight, - == right.
uint16_t ball_distance = 0 //CM distance to the ball.
bool ball_visible = 0 //has the ball been seen enough by vision to be considered actually 'visible'.

int8_t goal_direction = 0 //degrees, relative to the center of the nao torso. + == left, 0 == straight, - == right. NYI
uint16_t goal_distance = 0 //CM distance to the ball. NYI
bool goal_visible = 0 //has the ball been seen enough by vision to be considered actually 'visible'. NYI
enum GoalSightingType goal_sightingType = NoSightingType // The type of the goal sighting.

int8_t horizon_direction = 0 //degrees to the center point of the horizon, relative to the center of the nao torso. + == left, 0 == straight, - == right.
uint16_t horizon_distance = 0 //CM distance to the center point of the horizon.
bool horizon_visible = 0 //has the horizon been seen enough by vision to be considered actually 'visible'.
enum HorizonSightingType horizon_sightingType = NoHorizonSightingType // The type of the horizon sighting.

gen machine_line_sighting lineSightings[8] // Contains all line sightings.
int numLineSightings = 0 // How many line objects did we see? This number corresponds to the number of elements in the `lineSightings` array.

-comment
Results of the FSM (and sub machines) "SMFilterVision".
This machine applies some basic filtering to vision output messages.
It also handles the coord conversion and kinematics for distance and bearing calculations on the Nao robot.

