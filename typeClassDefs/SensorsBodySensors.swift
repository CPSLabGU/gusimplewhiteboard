/*
 * file SensorsBodySensors.swift
 *
 * This file was generated by classgenerator from sensors_body_sensors.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Carl Lusty at 16:12, 08/11/2018.
 * Copyright Â© 2018 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 *  Contains the current values of sensors located in the robots chest (designed for Nao) 
 * 
 * Examples
 * 
 * Get the state of the Chest Button
 * 
 *     SensorsBodySensors s = SensorsBodySensors_t.get(); //get from the whiteboard
 *     bool button_state = s.ChestBoard_Button(); //pull the variable out of the class
 * 
 * Notes:
 * 1)  InertialSensor_GyrRef does not exist in Naoqi 2.1.4.13, thus removed.
 * 2)  doc/family/nao_dcm/actuator_sensor_names.html states "There are other deprecated values still returned."
 *     This comment likely applies to AccX, AccY, AccZ, GyrX, GyrY, and GyrZ, which appear to be replaced with
 *     AccelerometerX, AccelerometerY, AccelerometerZ, GyroscopeX, GyroscopeY, and GyroscopeZ.
 * 3)  InertialSensor_GyrZ added.
 * 4)  On the Nao V4/V5, DCM_Time is a 4 byte 'int'.
 */
extension wb_sensors_body_sensors {

    /**
     * Create a new `wb_sensors_body_sensors`.
     */
    public static func make() -> wb_sensors_body_sensors {
        return wb_sensors_body_sensors(0)
    }

    /**
     * Create a new `wb_sensors_body_sensors`.
     */
    public init(_ DCM_Time: Int32 = 0, InertialSensor_AccX: Float = 0.0, InertialSensor_AccY: Float = 0.0, InertialSensor_AccZ: Float = 0.0, InertialSensor_GyrX: Float = 0.0, InertialSensor_GyrY: Float = 0.0, InertialSensor_GyrZ: Float = 0.0, InertialSensor_AngleX: Float = 0.0, InertialSensor_AngleY: Float = 0.0, InertialSensor_AngleZ: Float = 0.0, InertialSensor_AccelerometerX: Float = 0.0, InertialSensor_AccelerometerY: Float = 0.0, InertialSensor_AccelerometerZ: Float = 0.0, InertialSensor_GyroscopeX: Float = 0.0, InertialSensor_GyroscopeY: Float = 0.0, InertialSensor_GyroscopeZ: Float = 0.0, Battery_Charge: UInt8 = 0, Battery_Current: UInt8 = 0, US: Float = 0.0, ChestBoard_Button: Bool = true) {
        self.init()
        self.DCM_Time = DCM_Time
        self.InertialSensor_AccX = InertialSensor_AccX
        self.InertialSensor_AccY = InertialSensor_AccY
        self.InertialSensor_AccZ = InertialSensor_AccZ
        self.InertialSensor_GyrX = InertialSensor_GyrX
        self.InertialSensor_GyrY = InertialSensor_GyrY
        self.InertialSensor_GyrZ = InertialSensor_GyrZ
        self.InertialSensor_AngleX = InertialSensor_AngleX
        self.InertialSensor_AngleY = InertialSensor_AngleY
        self.InertialSensor_AngleZ = InertialSensor_AngleZ
        self.InertialSensor_AccelerometerX = InertialSensor_AccelerometerX
        self.InertialSensor_AccelerometerY = InertialSensor_AccelerometerY
        self.InertialSensor_AccelerometerZ = InertialSensor_AccelerometerZ
        self.InertialSensor_GyroscopeX = InertialSensor_GyroscopeX
        self.InertialSensor_GyroscopeY = InertialSensor_GyroscopeY
        self.InertialSensor_GyroscopeZ = InertialSensor_GyroscopeZ
        self.Battery_Charge = Battery_Charge
        self.Battery_Current = Battery_Current
        self.US = US
        self.ChestBoard_Button = ChestBoard_Button
    }

    /**
     * Create a `wb_sensors_body_sensors` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let DCM_Time = dictionary["DCM_Time"] as? Int32,
            let InertialSensor_AccX = dictionary["InertialSensor_AccX"] as? Float,
            let InertialSensor_AccY = dictionary["InertialSensor_AccY"] as? Float,
            let InertialSensor_AccZ = dictionary["InertialSensor_AccZ"] as? Float,
            let InertialSensor_GyrX = dictionary["InertialSensor_GyrX"] as? Float,
            let InertialSensor_GyrY = dictionary["InertialSensor_GyrY"] as? Float,
            let InertialSensor_GyrZ = dictionary["InertialSensor_GyrZ"] as? Float,
            let InertialSensor_AngleX = dictionary["InertialSensor_AngleX"] as? Float,
            let InertialSensor_AngleY = dictionary["InertialSensor_AngleY"] as? Float,
            let InertialSensor_AngleZ = dictionary["InertialSensor_AngleZ"] as? Float,
            let InertialSensor_AccelerometerX = dictionary["InertialSensor_AccelerometerX"] as? Float,
            let InertialSensor_AccelerometerY = dictionary["InertialSensor_AccelerometerY"] as? Float,
            let InertialSensor_AccelerometerZ = dictionary["InertialSensor_AccelerometerZ"] as? Float,
            let InertialSensor_GyroscopeX = dictionary["InertialSensor_GyroscopeX"] as? Float,
            let InertialSensor_GyroscopeY = dictionary["InertialSensor_GyroscopeY"] as? Float,
            let InertialSensor_GyroscopeZ = dictionary["InertialSensor_GyroscopeZ"] as? Float,
            let Battery_Charge = dictionary["Battery_Charge"] as? UInt8,
            let Battery_Current = dictionary["Battery_Current"] as? UInt8,
            let US = dictionary["US"] as? Float,
            let ChestBoard_Button = dictionary["ChestBoard_Button"] as? Bool
        else {
            fatalError("Unable to convert \(dictionary) to wb_sensors_body_sensors.")
        }
        self.DCM_Time = DCM_Time
        self.InertialSensor_AccX = InertialSensor_AccX
        self.InertialSensor_AccY = InertialSensor_AccY
        self.InertialSensor_AccZ = InertialSensor_AccZ
        self.InertialSensor_GyrX = InertialSensor_GyrX
        self.InertialSensor_GyrY = InertialSensor_GyrY
        self.InertialSensor_GyrZ = InertialSensor_GyrZ
        self.InertialSensor_AngleX = InertialSensor_AngleX
        self.InertialSensor_AngleY = InertialSensor_AngleY
        self.InertialSensor_AngleZ = InertialSensor_AngleZ
        self.InertialSensor_AccelerometerX = InertialSensor_AccelerometerX
        self.InertialSensor_AccelerometerY = InertialSensor_AccelerometerY
        self.InertialSensor_AccelerometerZ = InertialSensor_AccelerometerZ
        self.InertialSensor_GyroscopeX = InertialSensor_GyroscopeX
        self.InertialSensor_GyroscopeY = InertialSensor_GyroscopeY
        self.InertialSensor_GyroscopeZ = InertialSensor_GyroscopeZ
        self.Battery_Charge = Battery_Charge
        self.Battery_Current = Battery_Current
        self.US = US
        self.ChestBoard_Button = ChestBoard_Button
    }

}

extension wb_sensors_body_sensors: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "DCM_Time=\(self.DCM_Time)"
        descString += ", "
        descString += "InertialSensor_AccX=\(self.InertialSensor_AccX)"
        descString += ", "
        descString += "InertialSensor_AccY=\(self.InertialSensor_AccY)"
        descString += ", "
        descString += "InertialSensor_AccZ=\(self.InertialSensor_AccZ)"
        descString += ", "
        descString += "InertialSensor_GyrX=\(self.InertialSensor_GyrX)"
        descString += ", "
        descString += "InertialSensor_GyrY=\(self.InertialSensor_GyrY)"
        descString += ", "
        descString += "InertialSensor_GyrZ=\(self.InertialSensor_GyrZ)"
        descString += ", "
        descString += "InertialSensor_AngleX=\(self.InertialSensor_AngleX)"
        descString += ", "
        descString += "InertialSensor_AngleY=\(self.InertialSensor_AngleY)"
        descString += ", "
        descString += "InertialSensor_AngleZ=\(self.InertialSensor_AngleZ)"
        descString += ", "
        descString += "InertialSensor_AccelerometerX=\(self.InertialSensor_AccelerometerX)"
        descString += ", "
        descString += "InertialSensor_AccelerometerY=\(self.InertialSensor_AccelerometerY)"
        descString += ", "
        descString += "InertialSensor_AccelerometerZ=\(self.InertialSensor_AccelerometerZ)"
        descString += ", "
        descString += "InertialSensor_GyroscopeX=\(self.InertialSensor_GyroscopeX)"
        descString += ", "
        descString += "InertialSensor_GyroscopeY=\(self.InertialSensor_GyroscopeY)"
        descString += ", "
        descString += "InertialSensor_GyroscopeZ=\(self.InertialSensor_GyroscopeZ)"
        descString += ", "
        descString += "Battery_Charge=\(self.Battery_Charge)"
        descString += ", "
        descString += "Battery_Current=\(self.Battery_Current)"
        descString += ", "
        descString += "US=\(self.US)"
        descString += ", "
        descString += "ChestBoard_Button=\(self.ChestBoard_Button)"
        return descString
    }

}

extension wb_sensors_body_sensors: Equatable {}

public func == (lhs: wb_sensors_body_sensors, rhs: wb_sensors_body_sensors) -> Bool {
    return lhs.DCM_Time == rhs.DCM_Time
        && lhs.InertialSensor_AccX == rhs.InertialSensor_AccX
        && lhs.InertialSensor_AccY == rhs.InertialSensor_AccY
        && lhs.InertialSensor_AccZ == rhs.InertialSensor_AccZ
        && lhs.InertialSensor_GyrX == rhs.InertialSensor_GyrX
        && lhs.InertialSensor_GyrY == rhs.InertialSensor_GyrY
        && lhs.InertialSensor_GyrZ == rhs.InertialSensor_GyrZ
        && lhs.InertialSensor_AngleX == rhs.InertialSensor_AngleX
        && lhs.InertialSensor_AngleY == rhs.InertialSensor_AngleY
        && lhs.InertialSensor_AngleZ == rhs.InertialSensor_AngleZ
        && lhs.InertialSensor_AccelerometerX == rhs.InertialSensor_AccelerometerX
        && lhs.InertialSensor_AccelerometerY == rhs.InertialSensor_AccelerometerY
        && lhs.InertialSensor_AccelerometerZ == rhs.InertialSensor_AccelerometerZ
        && lhs.InertialSensor_GyroscopeX == rhs.InertialSensor_GyroscopeX
        && lhs.InertialSensor_GyroscopeY == rhs.InertialSensor_GyroscopeY
        && lhs.InertialSensor_GyroscopeZ == rhs.InertialSensor_GyroscopeZ
        && lhs.Battery_Charge == rhs.Battery_Charge
        && lhs.Battery_Current == rhs.Battery_Current
        && lhs.US == rhs.US
        && lhs.ChestBoard_Button == rhs.ChestBoard_Button
}
