/*
 * file wb_pixel_coordinate.h
 *
 * This file was generated by classgenerator from pixel_coordinate.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2021 Callum McColl. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Callum McColl.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef wb_pixel_coordinate_h
#define wb_pixel_coordinate_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"

#ifdef __linux
# ifndef _POSIX_SOURCE
#  define _POSIX_SOURCE 200112L
# endif
#endif
#ifndef _XOPEN_SOURCE
# define _XOPEN_SOURCE 700
#endif
#ifdef __APPLE__
# ifndef _DARWIN_C_SOURCE
#  define _DARWIN_C_SOURCE 200112L
# endif
# ifndef __DARWIN_C_LEVEL
#  define __DARWIN_C_LEVEL 200112L
# endif
#endif

#pragma clang diagnostic pop

#include <gu_util.h>
#include <stdint.h>

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>

#define WB_PIXEL_COORDINATE_GENERATED 
#define WB_PIXEL_COORDINATE_C_STRUCT wb_pixel_coordinate 
#define WB_PIXEL_COORDINATE_NUMBER_OF_VARIABLES 2

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#define WB_PIXEL_COORDINATE_DESC_BUFFER_SIZE 19
#define WB_PIXEL_COORDINATE_TO_STRING_BUFFER_SIZE 15
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

#ifdef __cplusplus
extern "C" {
#endif

/**
 * A `pixel_coordinate` is the whiteboard representation for the position of a
 * pixel in an image in centered pixel coordinate. The centered pixel coordinate
 * coordinate system is defined using four fields (x, y, resWidth, resHeight).
 * The x and y fields are contained within this type, however, the resWidth
 * and resHeight values are contained elsewhere. This is to save space within
 * this message; often multiple pixel coordinates are used and having to
 * stipulate the resolution width and height for each coordinate is wasteful.
 *
 * The x and y fields must conform to the following constraints:
 *    `-floor((resWidth - 1) / 2) <= x <= ceil((resWidth - 1) / 2)`,
 *    `-floor((resHeight - 1) / 2) <= y <= ceil((resHeight - 1) / 2)`.
 *
 * This places the (0, 0) point in the center of the image. The coordinate
 * system can be depicted graphically as follows:
 * ```
 *                            ceil((resHeight - 1) / 2)
 *                                       ---
 *                                        ^
 *                                        |
 *                                       y|
 *                                        |
 *                               -x       |        x
 * -floor((resWidth - 1) / 2) |<----------|---------->| ceil((resWidth - 1) / 2)
 *                                  (0,0)*|
 *                                        |
 *                                      -y|
 *                                        |
 *                                        V
 *                                       ---
 *                           -floor((resHeight - 1) / 2)
 * ```
 * Importantly here, the (0, 0) pixel is in the 3rd quadrant. This is because
 * when even numbers are used for resWidth and resHeight, the (0, 0) point
 * would be between pixels. Below is a table detailing the bounds for common
 * resolutions:
 *
 *           Resolution      |                    left/rightmost pixel                |               bottom/topmost pixel
 *     (resWidth, resHeight) | (-floor((resWidth - 1) / 2), ceil((resWidth - 1) / 2)) | (-floor((resHeight - 1) / 2), ceil(resHeight - 1) / 2)
 *    -----------------------+--------------------------------------------------------+--------------------------------------------------------
 *     (640, 480)            | (-319, 320)                                            | (-239, 240)
 *     (800, 600)            | (-399, 400)                                            | (-299, 300)
 *     (1280, 720)           | (-639, 640)                                            | (-359, 360)
 *     (1920, 1080)          | (-959, 960)                                            | (-539, 540)
 */
struct wb_pixel_coordinate
{

    /**
     *  The x coordinate.
     *
     *  This coordinate represents a pixel within an image in centered pixel
     *  coordinates. This coordinate system is bound by some resolution width
     *  and height (resWidth, resHeight). This coordinate represents a position
     *  along the horizontal axis bound by `resWidth`. As such, the value assigned
     *  to this property must be in the following range in order to be in the image:
     *      -floor((resWidth - 1) / 2) <= x <= ceil((resWidth - 1) / 2)
     *
     *  This therefore shifts the center coordinate (0) to the third quadrant. The
     *  coordinate system can be depicted graphically as follows:
     *  ```
     *                             ceil((resHeight - 1) / 2)
     *                                        ---
     *                                         ^
     *                                         |
     *                                        y|
     *                                         |
     *                                -x       |        x
     *  -floor((resWidth - 1) / 2) |<----------|---------->| ceil((resWidth - 1) / 2)
     *                                   (0,0)*|
     *                                         |
     *                                       -y|
     *                                         |
     *                                         V
     *                                        ---
     *                            -floor((resHeight - 1) / 2)
     *  ```
     */
    int16_t x;

    /**
     *  The y coordinate.
     *
     *  This coordinate represents a pixel within an image in centered pixel
     *  coordinates. This coordinate system is bound by some resolution width
     *  and height (resWidth, resHeight). This coordinate represents a position
     *  along the vertical axis bound by `resHeight`. As such, the value assigned to
     *  this property must be in the following range in order to be in the image:
     *      -floor((resHeight - 1) / 2) <= y <= ceil((resHeight - 1) / 2)
     *
     *  This therefore shifts the center coordinate (0) to the third quadrant. The
     *  coordinate system can be depicted graphically as follows:
     *  ```
     *                             ceil((resHeight - 1) / 2)
     *                                        ---
     *                                         ^
     *                                         |
     *                                        y|
     *                                         |
     *                                -x       |        x
     *  -floor((resWidth - 1) / 2) |<----------|---------->| ceil((resWidth - 1) / 2)
     *                                   (0,0)*|
     *                                         |
     *                                       -y|
     *                                         |
     *                                         V
     *                                        ---
     *                            -floor((resHeight - 1) / 2)
     *  ```
     */
    int16_t y;

};

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * Convert to a description string.
 */
const char* wb_pixel_coordinate_description(const struct wb_pixel_coordinate* self, char* descString, size_t bufferSize);

/**
 * Convert to a string.
 */
const char* wb_pixel_coordinate_to_string(const struct wb_pixel_coordinate* self, char* toString, size_t bufferSize);

/**
 * Convert from a string.
 */
struct wb_pixel_coordinate* wb_pixel_coordinate_from_string(struct wb_pixel_coordinate* self, const char* str);

#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

struct wb_pixel_coordinate px_coord_to_wb_px_coord(const gu_pixel_coordinate coord);

gu_pixel_coordinate wb_px_coord_to_px_coord(const struct wb_pixel_coordinate coord, const uint16_t resWidth, const uint16_t resHeight);

/*#ifdef WHITEBOARD_SERIALISATION*/

/**
 * Network stream serialisation
 */
size_t wb_pixel_coordinate_to_network_serialised(const struct wb_pixel_coordinate *self, char *dst);

/**
 * Network stream deserialisation
 */
size_t wb_pixel_coordinate_from_network_serialised(const char *src, struct wb_pixel_coordinate *dst);

/*#endif /// WHITEBOARD_SERIALISATION*/

#ifdef __cplusplus
}
#endif

#endif /// wb_pixel_coordinate_h
