-author Callum McColl

-c

#include <stdint.h>
#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>

-properties

int16_t direction = 0 // degrees, relative to the center of the nao torso. + == left, 0 == straight, - == right.
uint16_t distance = 0 // CM distance to the center point of the sighting.
uint8_t confidence = 0 // The type of sighting.
uint32_t distanceVariance = 0 // The variance of the distance
uint32_t directionVariance = 0 // The variance of the direction

-comment

Provides a common structure for the location of landmarks.

+c

/**
 *  \brief Converts a gu_relative_coordinate to a wb_location.
 *
 *  \param[in] coord The gu_relative_coordinate which is being converted.
 *
 *  \param[in] confidence The confidence value for the new location.
 *
 *  \param[in] distanceVariance The distanceVariance value for the new location.
 *
 *  \param[in] directionVariance The directionVariance value for the new location.
 *
 *  \returns A wb_location containing the values of coord having performed the
 *  necessary conversions.
 */
struct wb_location rr_coord_to_wb_location(const gu_relative_coordinate coord, const uint8_t confidence, const uint32_t distanceVariance, const uint32_t directionVariance);

/**
 *  \brief Converts a wb_location to a gu_relative_coordinate.
 *
 *  \param[in] location The wb_location which is being converted.
 *
 *  \returns A gu_relative_coordinate containing the values of coord having
 *  performed the necessary conversions.
 *
 *  \attention The confidence of the location is discarded since
 *  gu_relative_coordinate has no notion of a confidence.
 */
struct gu_relative_coordinate wb_location_to_rr_coord(const struct wb_location location);

/**
 *  \brief Converts a wb_location to a gu_optional_relative_coordinate.
 *
 *  \param[in] location The wb_location which is being converted.
 *
 *  \param[in] confidence The minimum confidence value that location needs to be
 *  in order for the returning gu_optional_relative_coordinate to contain a
 *  value. If the locations confidence is less than this value then this
 *  function returns a gu_optional_realtive_coordinate where
 *  gu_optional_relative_coordinate::has_value is false.
 *
 *  \returns A gu_optional_relative_coordinate containing the values of coord
 *  having performed the necessary conversions. If locations confidence value
 *  is less than confidence then the gu_optional_realtive_coordinate::has_value
 *  is false;
 */
struct gu_optional_relative_coordinate wb_location_to_opt_rr_coord(const struct wb_location location, const uint8_t confidence);

#c

struct wb_location rr_coord_to_wb_location(const gu_relative_coordinate coord, const uint8_t confidence, const uint32_t distanceVariance, const uint32_t directionVariance)
{
    const struct wb_location out = {
        deg_d_to_i16(coord.direction),
        cm_u_to_u16(mm_u_to_cm_u(coord.distance)),
        confidence,
        distanceVariance,
        directionVariance
    };
    return out;
}

struct gu_relative_coordinate wb_location_to_rr_coord(const struct wb_location location)
{
    const gu_relative_coordinate out = {
        i16_to_deg_d(location.direction),
        cm_u_to_mm_u(u16_to_cm_u(location.distance))
    };
    return out;
}

struct gu_optional_relative_coordinate wb_location_to_opt_rr_coord(const struct wb_location location, const uint8_t confidence)
{
    const gu_optional_relative_coordinate out = {
        location.confidence >= confidence,
        wb_location_to_rr_coord(location)
    };
    return out;
}

-c++

#include <guunits/guunits.h>
#include <gucoordinates/gucoordinates.h>

#if __cplusplus >= 201703L
#include <optional>
#endif

%c++

/**
 *  \brief Create a new Location by converting the values from a
 *  GU::RelativeCoordinate.
 *
 *  \param[in] other The GU::RelativeCoordinate which is being converted.
 *
 *  \warning Since a confidence, distanceVariance and directionVariance are not
 *  provided, the default values will be used.
 */
Location(const GU::RelativeCoordinate &other)
{
    this->init(
        deg_d_to_i16(other.direction()),
        cm_u_to_u16(mm_u_to_cm_u(other.distance()))
    );
}

/**
 *  \brief Create a new Location by converting the values from a
 *  GU::RelativeCoordinate.
 *
 *  \param[in] other The GU::RelativeCoordinate which is being converted.
 *
 *  \param[in] confidence The percentage of certainty of the location.
 *
 *  \warning Since a distanceVariance and directionVariance are not
 *  provided, the default values will be used.
 */
Location(const GU::RelativeCoordinate &other, const uint8_t confidence)
{
    this->init(
        deg_d_to_i16(other.direction()),
        cm_u_to_u16(mm_u_to_cm_u(other.distance())),
        confidence
    );
}

/**
 *  \brief Create a new Location by converting the values from a
 *  GU::RelativeCoordinate.
 *
 *  \param[in] other The GU::RelativeCoordinate which is being converted.
 *
 *  \param[in] confidence The percentage of certainty of the location.
 *
 *  \param[in] distanceVariance The variance of the distance.
 *
 *  \param[in] directionVariance The variance of the direction.
 */
Location(const GU::RelativeCoordinate &other, const uint8_t confidence, const uint32_t distanceVariance, uint32_t directionVariance)
{
    this->init(
        deg_d_to_i16(other.direction()),
        cm_u_to_u16(mm_u_to_cm_u(other.distance())),
        confidence,
        distanceVariance,
        directionVariance
    );
}

/**
 *  \brief Convert this location to a GU::RelativeCoordinate.
 *
 *  \returns A new GU::RelativeCoordinate converted from this location.
 */
GU::RelativeCoordinate relativeCoordinate() const
{
    return GU::RelativeCoordinate(wb_location_to_rr_coord(*this));
}

/**
 *  \brief Convert this location to a GU::RelativeCoordinate only if the
 *  confidence of the location is greater than or equal to the specified
 *  minimum confidence.
 *
 *  \param[in] minimumConfidence The minimim confidence value the confidence()
 *  has to be in order for GU::OptionalRelativeCoordinate::has_value to be
 *  true.
 *
 *  \returns A new GU::OptionalRelativeCoordinate converted from this location
 *  where GU::OptionalRelativeCoordinate::has_value is only true when
 *  confidence() >= minimumConfidence.
 */
GU::OptionalRelativeCoordinate optionalRelativeCoordinate(const uint8_t minimumConfidence) const
{
    return GU::OptionalRelativeCoordinate(wb_location_to_opt_rr_coord(*this, minimumConfidence));
}

#if __cplusplus >= 201703L
/**
 *  \brief Convert this location to a GU::RelativeCoordinate only if the
 *  confidence of the location is greater than or equal to the specified
 *  minimum confidence.
 *
 *  \param[in] minimumConfidence The minimim confidence value the confidence()
 *  has to be in order for std::optional<GU::RelativeCoordinate>::has_value to
 *  be true.
 *
 *  \returns A new std::optional<GU::RelativeCoordinate> converted from this
 *  location where std::optional<GU::RelativeCoordinate>::has_value is only
 *  true when confidence() >= minimumConfidence.
 */
std::optional<GU::RelativeCoordinate> relativeCoordinate(const uint8_t minimumConfidence) const
{
    if (confidence() < minimumConfidence) return std::nullopt;
    return std::optional<GU::RelativeCoordinate>(relativeCoordinate());
}
#endif
