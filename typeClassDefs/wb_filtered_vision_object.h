/*
 * file wb_filtered_vision_object.h
 *
 * This file was generated by classgenerator from Filtered_Vision_Object.txt.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2020 Vlad Estivill-Castro. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Vlad Estivill-Castro.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef wb_filtered_vision_object_h
#define wb_filtered_vision_object_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"

#ifdef __linux
# ifndef _POSIX_SOURCE
#  define _POSIX_SOURCE 200112L
# endif
#endif
#ifndef _XOPEN_SOURCE
# define _XOPEN_SOURCE 700
#endif
#ifdef __APPLE__
# ifndef _DARWIN_C_SOURCE
#  define _DARWIN_C_SOURCE 200112L
# endif
# ifndef __DARWIN_C_LEVEL
#  define __DARWIN_C_LEVEL 200112L
# endif
#endif

#pragma clang diagnostic pop

#include <gu_util.h>
#include <stdint.h>

#define FILTERED_VISION_OBJECT_GENERATED 
#define FILTERED_VISION_OBJECT_C_STRUCT wb_filtered_vision_object 
#define FILTERED_VISION_OBJECT_NUMBER_OF_VARIABLES 9

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#define FILTERED_VISION_OBJECT_DESC_BUFFER_SIZE 161
#define FILTERED_VISION_OBJECT_TO_STRING_BUFFER_SIZE 88
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * @brief Posting by Kalman filter on object sighting
 */
struct wb_filtered_vision_object
{

    /**
     * a 64-bit history of whether vision said visible 1 or not visible 0. visibilityHistory&0X1 is the most recent frame
     */
    PROPERTY(uint64_t, visibilityHistory)

    /**
     * incremented every time we do not see the object.
     */
    PROPERTY(int32_t, frameCounter)

    /**
     * distance to landmark in cm
     */
    PROPERTY(int16_t, distance)

    /**
     * centre x-coordinate in image  (0,0) is the centre of the image, positive is to the right
     */
    PROPERTY(int16_t, x)

    /**
     * centre  y-coordinate in image, positive is upwards
     */
    PROPERTY(int16_t, y)

    /**
     * the Yaw in Degrees when the object was last used to generated filtered values.
     */
    PROPERTY(int16_t, yaw)

    /**
     * In degrees, position of the object, positive is left, negative is right, with distance polar position of object in frame of reference of robot. The sign is consistent with the yaw, but not with the fact that x positive is to the right
     */
    PROPERTY(int16_t, ray_angle)

    /**
     * is this a credible sighting.
     */
    PROPERTY(bool, isVisible)

    /**
     * 16 bit padding .
     */
    PROPERTY(bool, pad1)

};

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION

/**
 * Convert to a description string.
 */
const char* wb_filtered_vision_object_description(const struct wb_filtered_vision_object* self, char* descString, size_t bufferSize);

/**
 * Convert to a string.
 */
const char* wb_filtered_vision_object_to_string(const struct wb_filtered_vision_object* self, char* toString, size_t bufferSize);

/**
 * Convert from a string.
 */
struct wb_filtered_vision_object* wb_filtered_vision_object_from_string(struct wb_filtered_vision_object* self, const char* str);

#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

/*#ifdef WHITEBOARD_SERIALISATION*/

/**
 * Network stream serialisation
 */
size_t wb_filtered_vision_object_to_network_serialised(const struct wb_filtered_vision_object *self, char *dst);

/**
 * Network stream deserialisation
 */
size_t wb_filtered_vision_object_from_network_serialised(const char *src, struct wb_filtered_vision_object *dst);

/*#endif /// WHITEBOARD_SERIALISATION*/

#ifdef __cplusplus
}
#endif

#endif /// wb_filtered_vision_object_h
