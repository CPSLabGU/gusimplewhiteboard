/*
 * file HalLegTarget.h
 *
 * This file was generated by classgenerator from hal_leg_target.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2019 Dimitri Joukoff. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Dimitri Joukoff.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef HalLegTarget_DEFINED
#define HalLegTarget_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include <gu_util.h>
#include "wb_hal_leg_target.h"

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_hal_leg_target`.
     */
    class HalLegTarget: public wb_hal_leg_target {

    private:

        /**
         * Set the members of the class.
         */
        void init(int32_t target_movement_time = INT_MAX, int16_t target_hipyawpitch = 0, int16_t target_hiproll = 0, int16_t target_hippitch = 0, int16_t target_kneepitch = 0, int16_t target_anklepitch = 0, int16_t target_ankleroll = 0, uint8_t target_leg = LEFT_LEG, uint8_t target_hipyawpitchstiffness = 0, uint8_t target_hiprollstiffness = 0, uint8_t target_hippitchstiffness = 0, uint8_t target_kneepitchstiffness = 0, uint8_t target_anklepitchstiffness = 0, uint8_t target_anklerollstiffness = 0, uint8_t target_pliability = 0, unsigned int target_hipyawpitch_active = true, unsigned int target_hiproll_active = true, unsigned int target_hippitch_active = true, unsigned int target_kneepitch_active = true, unsigned int target_anklepitch_active = true, unsigned int target_ankleroll_active = true, unsigned int target_leg_at_goal = false, unsigned int target_leg_stop = false) {
            set_target_movement_time(target_movement_time);
            set_target_hipyawpitch(target_hipyawpitch);
            set_target_hiproll(target_hiproll);
            set_target_hippitch(target_hippitch);
            set_target_kneepitch(target_kneepitch);
            set_target_anklepitch(target_anklepitch);
            set_target_ankleroll(target_ankleroll);
            set_target_leg(target_leg);
            set_target_hipyawpitchstiffness(target_hipyawpitchstiffness);
            set_target_hiprollstiffness(target_hiprollstiffness);
            set_target_hippitchstiffness(target_hippitchstiffness);
            set_target_kneepitchstiffness(target_kneepitchstiffness);
            set_target_anklepitchstiffness(target_anklepitchstiffness);
            set_target_anklerollstiffness(target_anklerollstiffness);
            set_target_pliability(target_pliability);
            set_target_hipyawpitch_active(target_hipyawpitch_active);
            set_target_hiproll_active(target_hiproll_active);
            set_target_hippitch_active(target_hippitch_active);
            set_target_kneepitch_active(target_kneepitch_active);
            set_target_anklepitch_active(target_anklepitch_active);
            set_target_ankleroll_active(target_ankleroll_active);
            set_target_leg_at_goal(target_leg_at_goal);
            set_target_leg_stop(target_leg_stop);
        }

    public:

        /**
         * Create a new `HalLegTarget`.
         */
        HalLegTarget(int32_t target_movement_time = INT_MAX, int16_t target_hipyawpitch = 0, int16_t target_hiproll = 0, int16_t target_hippitch = 0, int16_t target_kneepitch = 0, int16_t target_anklepitch = 0, int16_t target_ankleroll = 0, uint8_t target_leg = LEFT_LEG, uint8_t target_hipyawpitchstiffness = 0, uint8_t target_hiprollstiffness = 0, uint8_t target_hippitchstiffness = 0, uint8_t target_kneepitchstiffness = 0, uint8_t target_anklepitchstiffness = 0, uint8_t target_anklerollstiffness = 0, uint8_t target_pliability = 0, unsigned int target_hipyawpitch_active = true, unsigned int target_hiproll_active = true, unsigned int target_hippitch_active = true, unsigned int target_kneepitch_active = true, unsigned int target_anklepitch_active = true, unsigned int target_ankleroll_active = true, unsigned int target_leg_at_goal = false, unsigned int target_leg_stop = false) {
            this->init(target_movement_time, target_hipyawpitch, target_hiproll, target_hippitch, target_kneepitch, target_anklepitch, target_ankleroll, target_leg, target_hipyawpitchstiffness, target_hiprollstiffness, target_hippitchstiffness, target_kneepitchstiffness, target_anklepitchstiffness, target_anklerollstiffness, target_pliability, target_hipyawpitch_active, target_hiproll_active, target_hippitch_active, target_kneepitch_active, target_anklepitch_active, target_ankleroll_active, target_leg_at_goal, target_leg_stop);
        }

        /**
         * Copy Constructor.
         */
        HalLegTarget(const HalLegTarget &other): wb_hal_leg_target() {
            this->init(other.target_movement_time(), other.target_hipyawpitch(), other.target_hiproll(), other.target_hippitch(), other.target_kneepitch(), other.target_anklepitch(), other.target_ankleroll(), other.target_leg(), other.target_hipyawpitchstiffness(), other.target_hiprollstiffness(), other.target_hippitchstiffness(), other.target_kneepitchstiffness(), other.target_anklepitchstiffness(), other.target_anklerollstiffness(), other.target_pliability(), other.target_hipyawpitch_active(), other.target_hiproll_active(), other.target_hippitch_active(), other.target_kneepitch_active(), other.target_anklepitch_active(), other.target_ankleroll_active(), other.target_leg_at_goal(), other.target_leg_stop());
        }

        /**
         * Copy Constructor.
         */
        HalLegTarget(const struct wb_hal_leg_target &other): wb_hal_leg_target() {
            this->init(other.target_movement_time(), other.target_hipyawpitch(), other.target_hiproll(), other.target_hippitch(), other.target_kneepitch(), other.target_anklepitch(), other.target_ankleroll(), other.target_leg(), other.target_hipyawpitchstiffness(), other.target_hiprollstiffness(), other.target_hippitchstiffness(), other.target_kneepitchstiffness(), other.target_anklepitchstiffness(), other.target_anklerollstiffness(), other.target_pliability(), other.target_hipyawpitch_active(), other.target_hiproll_active(), other.target_hippitch_active(), other.target_kneepitch_active(), other.target_anklepitch_active(), other.target_ankleroll_active(), other.target_leg_at_goal(), other.target_leg_stop());
        }

        /**
         * Copy Assignment Operator.
         */
        HalLegTarget &operator = (const HalLegTarget &other) {
            this->init(other.target_movement_time(), other.target_hipyawpitch(), other.target_hiproll(), other.target_hippitch(), other.target_kneepitch(), other.target_anklepitch(), other.target_ankleroll(), other.target_leg(), other.target_hipyawpitchstiffness(), other.target_hiprollstiffness(), other.target_hippitchstiffness(), other.target_kneepitchstiffness(), other.target_anklepitchstiffness(), other.target_anklerollstiffness(), other.target_pliability(), other.target_hipyawpitch_active(), other.target_hiproll_active(), other.target_hippitch_active(), other.target_kneepitch_active(), other.target_anklepitch_active(), other.target_ankleroll_active(), other.target_leg_at_goal(), other.target_leg_stop());
            return *this;
        }

        /**
         * Copy Assignment Operator.
         */
        HalLegTarget &operator = (const struct wb_hal_leg_target &other) {
            this->init(other.target_movement_time(), other.target_hipyawpitch(), other.target_hiproll(), other.target_hippitch(), other.target_kneepitch(), other.target_anklepitch(), other.target_ankleroll(), other.target_leg(), other.target_hipyawpitchstiffness(), other.target_hiprollstiffness(), other.target_hippitchstiffness(), other.target_kneepitchstiffness(), other.target_anklepitchstiffness(), other.target_anklerollstiffness(), other.target_pliability(), other.target_hipyawpitch_active(), other.target_hiproll_active(), other.target_hippitch_active(), other.target_kneepitch_active(), other.target_anklepitch_active(), other.target_ankleroll_active(), other.target_leg_at_goal(), other.target_leg_stop());
            return *this;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        HalLegTarget(const std::string &str) {
            this->init();
            this->from_string(str);
        }

        std::string description() {
#ifdef USE_WB_HAL_LEG_TARGET_C_CONVERSION
            char buffer[HAL_LEG_TARGET_DESC_BUFFER_SIZE];
            wb_hal_leg_target_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            ss << "target_movement_time=" << static_cast<signed>(this->target_movement_time());
            ss << ", ";
            ss << "target_hipyawpitch=" << static_cast<signed>(this->target_hipyawpitch());
            ss << ", ";
            ss << "target_hiproll=" << static_cast<signed>(this->target_hiproll());
            ss << ", ";
            ss << "target_hippitch=" << static_cast<signed>(this->target_hippitch());
            ss << ", ";
            ss << "target_kneepitch=" << static_cast<signed>(this->target_kneepitch());
            ss << ", ";
            ss << "target_anklepitch=" << static_cast<signed>(this->target_anklepitch());
            ss << ", ";
            ss << "target_ankleroll=" << static_cast<signed>(this->target_ankleroll());
            ss << ", ";
            ss << "target_leg=" << static_cast<unsigned>(this->target_leg());
            ss << ", ";
            ss << "target_hipyawpitchstiffness=" << static_cast<unsigned>(this->target_hipyawpitchstiffness());
            ss << ", ";
            ss << "target_hiprollstiffness=" << static_cast<unsigned>(this->target_hiprollstiffness());
            ss << ", ";
            ss << "target_hippitchstiffness=" << static_cast<unsigned>(this->target_hippitchstiffness());
            ss << ", ";
            ss << "target_kneepitchstiffness=" << static_cast<unsigned>(this->target_kneepitchstiffness());
            ss << ", ";
            ss << "target_anklepitchstiffness=" << static_cast<unsigned>(this->target_anklepitchstiffness());
            ss << ", ";
            ss << "target_anklerollstiffness=" << static_cast<unsigned>(this->target_anklerollstiffness());
            ss << ", ";
            ss << "target_pliability=" << static_cast<unsigned>(this->target_pliability());
            ss << ", ";
            ss << "target_hipyawpitch_active=" << this->target_hipyawpitch_active();
            ss << ", ";
            ss << "target_hiproll_active=" << this->target_hiproll_active();
            ss << ", ";
            ss << "target_hippitch_active=" << this->target_hippitch_active();
            ss << ", ";
            ss << "target_kneepitch_active=" << this->target_kneepitch_active();
            ss << ", ";
            ss << "target_anklepitch_active=" << this->target_anklepitch_active();
            ss << ", ";
            ss << "target_ankleroll_active=" << this->target_ankleroll_active();
            ss << ", ";
            ss << "target_leg_at_goal=" << this->target_leg_at_goal();
            ss << ", ";
            ss << "target_leg_stop=" << this->target_leg_stop();
            return ss.str();
#endif /// USE_WB_HAL_LEG_TARGET_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_HAL_LEG_TARGET_C_CONVERSION
            char buffer[HAL_LEG_TARGET_TO_STRING_BUFFER_SIZE];
            wb_hal_leg_target_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            ss << static_cast<signed>(this->target_movement_time());
            ss << ", ";
            ss << static_cast<signed>(this->target_hipyawpitch());
            ss << ", ";
            ss << static_cast<signed>(this->target_hiproll());
            ss << ", ";
            ss << static_cast<signed>(this->target_hippitch());
            ss << ", ";
            ss << static_cast<signed>(this->target_kneepitch());
            ss << ", ";
            ss << static_cast<signed>(this->target_anklepitch());
            ss << ", ";
            ss << static_cast<signed>(this->target_ankleroll());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_leg());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_hipyawpitchstiffness());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_hiprollstiffness());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_hippitchstiffness());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_kneepitchstiffness());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_anklepitchstiffness());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_anklerollstiffness());
            ss << ", ";
            ss << static_cast<unsigned>(this->target_pliability());
            ss << ", ";
            ss << this->target_hipyawpitch_active();
            ss << ", ";
            ss << this->target_hiproll_active();
            ss << ", ";
            ss << this->target_hippitch_active();
            ss << ", ";
            ss << this->target_kneepitch_active();
            ss << ", ";
            ss << this->target_anklepitch_active();
            ss << ", ";
            ss << this->target_ankleroll_active();
            ss << ", ";
            ss << this->target_leg_at_goal();
            ss << ", ";
            ss << this->target_leg_stop();
            return ss.str();
#endif /// USE_WB_HAL_LEG_TARGET_C_CONVERSION
        }

#ifdef USE_WB_HAL_LEG_TARGET_C_CONVERSION
        void from_string(const std::string &str) {
            wb_hal_leg_target_from_string(this, str.c_str());
#else
        void from_string(const std::string &str) {
            char * str_cstr = const_cast<char *>(str.c_str());
            size_t temp_length = strlen(str_cstr);
            int length = (temp_length <= INT_MAX) ? static_cast<int>(static_cast<ssize_t>(temp_length)) : -1;
            if (length < 1 || length > HAL_LEG_TARGET_DESC_BUFFER_SIZE) {
                return;
            }
            char var_str_buffer[HAL_LEG_TARGET_DESC_BUFFER_SIZE + 1];
            char* var_str = &var_str_buffer[0];
            char key_buffer[28];
            char* key = &key_buffer[0];
            int bracecount = 0;
            int startVar = 0;
            int index = 0;
            int startKey = 0;
            int endKey = -1;
            int varIndex = 0;
            if (index == 0 && str_cstr[0] == '{') {
                index = 1;
            }
            startVar = index;
            startKey = startVar;
            do {
                for (int i = index; i < length; i++) {
                    index = i + 1;
                    if (bracecount == 0 && str_cstr[i] == '=') {
                        endKey = i - 1;
                        startVar = index;
                        continue;
                    }
                    if (bracecount == 0 && isspace(str_cstr[i])) {
                        startVar = index;
                        if (endKey == -1) {
                            startKey = index;
                        }
                        continue;
                    }
                    if (bracecount == 0 && str_cstr[i] == ',') {
                        index = i - 1;
                        break;
                    }
                    if (str_cstr[i] == '{') {
                        bracecount++;
                        continue;
                    }
                    if (str_cstr[i] == '}') {
                        bracecount--;
                        if (bracecount < 0) {
                            index = i - 1;
                            break;
                        }
                    }
                    if (i == length - 1) {
                        index = i;
                    }
                }
                if (endKey >= startKey && endKey - startKey < length) {
                    strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                    key[(endKey - startKey) + 1] = 0;
                } else {
                    key[0] = 0;
                }
                strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                var_str[(index - startVar) + 1] = 0;
                bracecount = 0;
                index += 2;
                startVar = index;
                startKey = startVar;
                endKey = -1;
                if (strlen(key) > 0) {
                    if (0 == strcmp("target_movement_time", key)) {
                        varIndex = 0;
                    } else if (0 == strcmp("target_hipyawpitch", key)) {
                        varIndex = 1;
                    } else if (0 == strcmp("target_hiproll", key)) {
                        varIndex = 2;
                    } else if (0 == strcmp("target_hippitch", key)) {
                        varIndex = 3;
                    } else if (0 == strcmp("target_kneepitch", key)) {
                        varIndex = 4;
                    } else if (0 == strcmp("target_anklepitch", key)) {
                        varIndex = 5;
                    } else if (0 == strcmp("target_ankleroll", key)) {
                        varIndex = 6;
                    } else if (0 == strcmp("target_leg", key)) {
                        varIndex = 7;
                    } else if (0 == strcmp("target_hipyawpitchstiffness", key)) {
                        varIndex = 8;
                    } else if (0 == strcmp("target_hiprollstiffness", key)) {
                        varIndex = 9;
                    } else if (0 == strcmp("target_hippitchstiffness", key)) {
                        varIndex = 10;
                    } else if (0 == strcmp("target_kneepitchstiffness", key)) {
                        varIndex = 11;
                    } else if (0 == strcmp("target_anklepitchstiffness", key)) {
                        varIndex = 12;
                    } else if (0 == strcmp("target_anklerollstiffness", key)) {
                        varIndex = 13;
                    } else if (0 == strcmp("target_pliability", key)) {
                        varIndex = 14;
                    } else if (0 == strcmp("target_hipyawpitch_active", key)) {
                        varIndex = 15;
                    } else if (0 == strcmp("target_hiproll_active", key)) {
                        varIndex = 16;
                    } else if (0 == strcmp("target_hippitch_active", key)) {
                        varIndex = 17;
                    } else if (0 == strcmp("target_kneepitch_active", key)) {
                        varIndex = 18;
                    } else if (0 == strcmp("target_anklepitch_active", key)) {
                        varIndex = 19;
                    } else if (0 == strcmp("target_ankleroll_active", key)) {
                        varIndex = 20;
                    } else if (0 == strcmp("target_leg_at_goal", key)) {
                        varIndex = 21;
                    } else if (0 == strcmp("target_leg_stop", key)) {
                        varIndex = 22;
                    } else {
                        varIndex = -1;
                    }
                }
                switch (varIndex) {
                    case -1: { break; }
                    case 0:
                    {
                        this->set_target_movement_time(static_cast<int32_t>(atoi(var_str)));
                        break;
                    }
                    case 1:
                    {
                        this->set_target_hipyawpitch(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 2:
                    {
                        this->set_target_hiproll(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 3:
                    {
                        this->set_target_hippitch(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 4:
                    {
                        this->set_target_kneepitch(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 5:
                    {
                        this->set_target_anklepitch(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 6:
                    {
                        this->set_target_ankleroll(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 7:
                    {
                        this->set_target_leg(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 8:
                    {
                        this->set_target_hipyawpitchstiffness(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 9:
                    {
                        this->set_target_hiprollstiffness(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 10:
                    {
                        this->set_target_hippitchstiffness(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 11:
                    {
                        this->set_target_kneepitchstiffness(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 12:
                    {
                        this->set_target_anklepitchstiffness(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 13:
                    {
                        this->set_target_anklerollstiffness(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 14:
                    {
                        this->set_target_pliability(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 15:
                    {
                        this->set_target_hipyawpitch_active(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 16:
                    {
                        this->set_target_hiproll_active(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 17:
                    {
                        this->set_target_hippitch_active(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 18:
                    {
                        this->set_target_kneepitch_active(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 19:
                    {
                        this->set_target_anklepitch_active(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 20:
                    {
                        this->set_target_ankleroll_active(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 21:
                    {
                        this->set_target_leg_at_goal(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 22:
                    {
                        this->set_target_leg_stop(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                }
                if (varIndex >= 0) {
                    varIndex++;
                }
            } while(index < length);
#endif /// USE_WB_HAL_LEG_TARGET_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION

        #ifdef WHITEBOARD_POSTER_STRING_CONVERSION
                /**
                 *  Description function which prints values only
                 *  (Spreadsheet friendly)
                 */
                std::string valueDescription() {
        #ifdef USE_WB_HAL_LEG_TARGET_C_CONVERSION
                    char buffer[HAL_LEG_TARGET_DESC_BUFFER_SIZE+22];
                    wb_hal_leg_target_value_description(this, buffer, sizeof(buffer));
                    std::string descr = buffer;
                    return descr;
        #else
                        std::stringstream ss;
                        ss << static_cast<int>(target_hipyawpitch()) << " | "
                        << static_cast<int>(target_hiproll()) << " | "
                        << static_cast<int>(target_hippitch()) << " | "
                        << static_cast<int>(target_kneepitch()) << " | "
                        << static_cast<int>(target_anklepitch()) << " | "
                        << static_cast<int>(target_ankleroll()) << " | "
                        << static_cast<int>(target_hipyawpitchstiffness()) << " | "
                        << static_cast<int>(target_hiprollstiffness()) << " | "
                        << static_cast<int>(target_hippitchstiffness()) << " | "
                        << static_cast<int>(target_kneepitchstiffness()) << " | "
                        << static_cast<int>(target_anklepitchstiffness()) << " | "
                        << static_cast<int>(target_anklerollstiffness()) << " | "
                        << static_cast<int>(target_hipyawpitch_active()) << " | "
                        << static_cast<int>(target_hiproll_active()) << " | "
                        << static_cast<int>(target_hippitch_active()) << " | "
                        << static_cast<int>(target_kneepitch_active()) << " | "
                        << static_cast<int>(target_anklepitch_active()) << " | "
                        << static_cast<int>(target_ankleroll_active()) << " | "
                        << static_cast<int>(target_movement_time()) << " | "
                        << static_cast<int>(target_pliability()) << " | "
                        << static_cast<int>(target_leg_at_goal()) << " | "
                        << static_cast<int>(target_leg_stop());
                        return ss.str();
                    }
        #endif /// USE_WB_HAL_LEG_TARGET_C_CONVERSION
        #endif /// WHITEBOARD_POSTER_STRING_CONVERSION

        //MARK: Leg - General
                    /**
                     *  Specify which leg this instance manages.
                     *  Up to 256 legs are possible.
                     *  Use prefedined macros LEFT_LEG and RIGHT_LEG for clarity.
                     *
                     *  @param  leg integer used to record which leg the object refers to.
                     *
                     */
                    void tieToLeg(uint8_t leg)
                    {
                        set_target_leg(leg);
                    }

        //MARK: Leg - Movements

                    /**
                     * move to position in radians over a given time
                     * @param   hipyawpitch    down to up
                     * @param   hiproll        out to in
                     * @param   hippitch       swing thigh forward/back
                     * @param   kneepitch      swig calf out/back
                     * @param   anklepitch     raise/lower toes
                     * @param   ankleroll      roll ankle out to in
                     * @param   time           elapsed time in mSec for the motion to complete.
                     *
                     */
                    void goToWithTime_Rad(float hipyawpitch,
                                          float hiproll,
                                          float hippitch,
                                          float kneepitch,
                                          float anklepitch,
                                          float ankleroll,
                                          int32_t time = INT_MAX)
                    {
                        setPose_Rad(hipyawpitch, hiproll,
                                    hippitch, kneepitch,
                                    anklepitch, ankleroll);
                        set_target_movement_time(time);
                    }

                    /**
                     * move to position in degrees over a given time
                     * @param   hipyawpitch    down to up
                     * @param   hiproll        out to in
                     * @param   hippitch       swing thigh forward/back
                     * @param   kneepitch      swig calf out/back
                     * @param   anklepitch     raise/lower toes
                     * @param   ankleroll      roll ankle out to in
                     * @param   time           elapsed time in mSec for the motion to complete.
                     *
                     */
                    void goToWithTime_Deg(float hipyawpitch,
                                          float hiproll,
                                          float hippitch,
                                          float kneepitch,
                                          float anklepitch,
                                          float ankleroll,
                                          int32_t time = INT_MAX)
                    {
                        setPose_Deg(hipyawpitch, hiproll,
                                    hippitch, kneepitch,
                                    anklepitch, ankleroll);
                        set_target_movement_time(time);
                    }

                    /**
                     * Command the leg to stop at its current
                     * location and not act on motion commands
                     * until ready() is called.
                     *
                     */
                    void stop() {
                        set_target_leg_stop(true);
                    }


                    /**
                     * Set leg to ready state (Default)
                     * The leg will act on motion commands.
                     *
                     */
                    void ready() {
                        set_target_leg_stop(false);
                    }


                    /**
                     *  Leg at Goal Setter
                     *      Clients/Machines should not use this method.
                     *
                     *  Leg arrived at goal pose.
                     *  Only set in the status message by gunaoqiinterface when the leg has reached the goal pose.
                     *
                     *  @param  goalReached  the leg has reached the goal (true/false)
                     *
                     */
                    void isAtGoal(bool goalReached)
                    {
                        set_target_leg_at_goal(goalReached);
                    }

                    /**
                     *  Leg at Goal Getter
                     *      Clients/Machines should use this getter to test if the DCM
                     *      has reported that the leg has reached its goal pose.
                     *
                     *  Is the leg at the goal pose?
                     *  gunaoqiinterface sets this true when the leg reaches the goal
                     *  pose asked for in the previous control message.
                     *
                     *  @return     bool    whether the leg is at the goal location or not.
                     *
                     */
                    bool atGoal()
                    {
                        return target_leg_at_goal();
                    }

                    /**
                     *  Client side test to determine if leg is at the target location, allowing for specified tolerances.
                     *  The method tests if the pose 'status' is within 'tolerance' of 'this' target
                     *  location, allowing for a specified tolerance.
                     *
                     *  'this' object contains the target pose settings.
                     *
                     *  @param  status      HalLegTarget object which contains actual pose settings reported by the robot's sensors.
                     *  @param  tolerance   HalLegTarget object whose pose settings specify the tolerance for each joint
                     *  @return bool        whether or not the status is within range of the target location.
                     *
                     */
                    bool atTargetLocation(HalLegTarget status, HalLegTarget tolerance)
                    {
                        int16_t hipyawpitchMargin = static_cast<int16_t>(abs(target_hipyawpitch() - status.target_hipyawpitch()));
                        int16_t hiprollMargin = static_cast<int16_t>(abs(target_hiproll() - status.target_hiproll()));
                        int16_t hippitchMargin = static_cast<int16_t>(abs(target_hippitch() - status.target_hippitch()));
                        int16_t kneepitchMargin = static_cast<int16_t>(abs(target_kneepitch() - status.target_kneepitch()));
                        int16_t anklepitchMargin = static_cast<int16_t>(abs(target_anklepitch() - status.target_anklepitch()));
                        int16_t anklerollMargin = static_cast<int16_t>(abs(target_ankleroll() - status.target_ankleroll()));
                        if (   (hipyawpitchMargin <= tolerance.target_hipyawpitch())
                            && (hiprollMargin <= tolerance.target_hiproll())
                            && (hippitchMargin <= tolerance.target_hippitch())
                            && (kneepitchMargin <= tolerance.target_kneepitch())
                            && (anklepitchMargin <= tolerance.target_anklepitch())
                            && (anklerollMargin <= tolerance.target_ankleroll())
                            )
                        {
                            return true;
                        }
                        return false;
                    }

        //MARK: Leg - Pose

                    /**
                     * Set Pose in radians
                     * @param   hipyawpitch    down to up
                     * @param   hiproll        out to in
                     * @param   hippitch       swing thigh forward/back
                     * @param   kneepitch      swig calf out/back
                     * @param   anklepitch     raise/lower toes
                     * @param   ankleroll      roll ankle out to in
                     *
                     */
                    void setPose_Rad(float hipyawpitch,
                                     float hiproll,
                                     float hippitch,
                                     float kneepitch,
                                     float anklepitch,
                                     float ankleroll)
                    {
                        set_hipyawpitch_RAD(hipyawpitch);
                        set_hiproll_RAD(hiproll);
                        set_hippitch_RAD(hippitch);
                        set_kneepitch_RAD(kneepitch);
                        set_anklepitch_RAD(anklepitch);
                        set_ankleroll_RAD(ankleroll);
                    }

                    /**
                     * Set Pose in degrees
                     * @param   hipyawpitch    down to up
                     * @param   hiproll        out to in
                     * @param   hippitch       swing thigh forward/back
                     * @param   kneepitch      swig calf out/back
                     * @param   anklepitch     raise/lower toes
                     * @param   ankleroll      roll ankle out to in
                     *
                     */
                    void setPose_Deg(float hipyawpitch,
                                     float hiproll,
                                     float hippitch,
                                     float kneepitch,
                                     float anklepitch,
                                     float ankleroll)
                    {
                        set_hipyawpitch_DEG(hipyawpitch);
                        set_hiproll_DEG(hiproll);
                        set_hippitch_DEG(hippitch);
                        set_kneepitch_DEG(kneepitch);
                        set_anklepitch_DEG(anklepitch);
                        set_ankleroll_DEG(ankleroll);
                    }


                    /**
                     *  Convenience function to mirror leg settings about the XZ plane from one HalLegTarget object to another.
                     *
                     *  @param  other    HalLegTarget object to be mirrored.
                     *
                     */
                    void mirrorLeg(const HalLegTarget &other)
                    {
                        // Roll and Yaw angles need to be mirrored, others just copied.
                        set_target_hipyawpitch(other.target_hipyawpitch());
                        set_target_hiproll(-other.target_hiproll());
                        set_target_hippitch(other.target_hippitch());
                        set_target_kneepitch(other.target_kneepitch());
                        set_target_anklepitch(other.target_anklepitch());
                        set_target_ankleroll(-other.target_ankleroll());
                        set_target_hipyawpitchstiffness(other.target_hipyawpitchstiffness());
                        set_target_hiprollstiffness(other.target_hiprollstiffness());
                        set_target_hippitchstiffness(other.target_hippitchstiffness());
                        set_target_kneepitchstiffness(other.target_kneepitchstiffness());
                        set_target_anklepitchstiffness(other.target_anklepitchstiffness());
                        set_target_anklerollstiffness(other.target_anklerollstiffness());
                        set_target_hipyawpitch_active(other.target_hipyawpitch_active());
                        set_target_hiproll_active(other.target_hiproll_active());
                        set_target_hippitch_active(other.target_hippitch_active());
                        set_target_kneepitch_active(other.target_kneepitch_active());
                        set_target_anklepitch_active(other.target_anklepitch_active());
                        set_target_ankleroll_active(other.target_ankleroll_active());
                        set_target_movement_time(other.target_movement_time());
                        set_target_pliability(other.target_pliability());
                    }

                    /**
                     *  Convenience function to copy pose settings from one HalLegTarget object to another.
                     *
                     *  @param  other    HalLegTarget object from which to copy pose settings from.
                     *
                     */
                    void copyPose(const HalLegTarget &other)
                    {
                        set_target_hipyawpitch(other.target_hipyawpitch());
                        set_target_hiproll(other.target_hiproll());
                        set_target_hippitch(other.target_hippitch());
                        set_target_kneepitch(other.target_kneepitch());
                        set_target_anklepitch(other.target_anklepitch());
                        set_target_ankleroll(other.target_ankleroll());
                    }

                    /**
                     *  Convenience function to mirror pose settings about the XZ plane from one HalLegTarget object to another.
                     *
                     *  @param  other    HalLegTarget object whose pose settings are to be mirrored.
                     *
                     */
                    void mirrorPose(const HalLegTarget &other)
                    {
                        // Roll and Yaw angles need to be mirrored, others just copied.
                        set_target_hipyawpitch(-other.target_hipyawpitch());
                        set_target_hiproll(-other.target_hiproll());
                        set_target_hippitch(other.target_hippitch());
                        set_target_kneepitch(other.target_kneepitch());
                        set_target_anklepitch(other.target_anklepitch());
                        set_target_ankleroll(-other.target_ankleroll());
                    }

                    /**
                     *  Tests if this HalLegTarget object has the same pose settings as the other HalLegTarget object.
                     *      NOTE this DOES NOT take into account mirroring about the XZ plane.
                     *
                     *  @param  other   HalLegTarget object whose pose settings are being compared.
                     *  @return bool    whether the two objects have the same pose or not.
                     *
                     */
                    bool hasSamePose(const HalLegTarget &other)
                    {
                        if (
                            target_hipyawpitch() == other.target_hipyawpitch()
                            && target_hiproll() == other.target_hiproll()
                            && target_hippitch() == other.target_hippitch()
                            && target_kneepitch() == other.target_kneepitch()
                            && target_anklepitch() == other.target_anklepitch()
                            && target_ankleroll() == other.target_ankleroll()
                            )
                        {
                            return  true;
                        }
                        return false;
                    }

                    /**
                     *  Tests if this HalLegTarget object has the same mirrored pose settings as the other HalLegTarget object.
                     *      NOTE this method DOES take into account mirroring about the XZ plane.
                     *
                     *  @param  other   HalLegTarget object whose pose settings are being compared.
                     *  @return bool    whether the two objects have the same pose or not.
                     *
                     */
                    bool hasSameMirroredPose(const HalLegTarget &other)
                    {
                        if (
                            target_hipyawpitch() == other.target_hipyawpitch()
                            && target_hiproll() == -other.target_hiproll()
                            && target_hippitch() == other.target_hippitch()
                            && target_kneepitch() == other.target_kneepitch()
                            && target_anklepitch() == other.target_anklepitch()
                            && target_ankleroll() == -other.target_ankleroll()
                            )
                        {
                            return  true;
                        }
                        return false;
                    }

        //MARK: Leg - Stiffness

                    /**
                     *  Convenience function to set the stiffness
                     *  of all the leg's joints to the maximum (1.0f).
                     *
                     */
                    void setLegStiffnessMax()
                    {
                        set_hipyawpitchstiffness(1.0f);
                        set_hiprollstiffness(1.0f);
                        set_hippitchstiffness(1.0f);
                        set_kneepitchstiffness(1.0f);
                        set_anklepitchstiffness(1.0f);
                        set_anklerollstiffness(1.0f);
                    }

                    /**
                     *  Convenience function to set the stiffness
                     *  of all the leg's joints to what Aldebaran
                     *  considers 'normal' (0.6f).
                     *
                     */
                    void setLegStiffnessNormal()
                    {
                        set_hipyawpitchstiffness(0.6f);
                        set_hiprollstiffness(0.6f);
                        set_hippitchstiffness(0.6f);
                        set_kneepitchstiffness(0.6f);
                        set_anklepitchstiffness(0.6f);
                        set_anklerollstiffness(0.6f);
                    }

                    /**
                     *  Convenience function to set uniform stiffness
                     *  on all leg joints to a custom value.
                     *
                     *  @param stiffness float Stiffness setting between 0.0 and 1.0 (float).
                     *
                     */
                    void setLegStiffness(float stiffness)
                    {
                        if ((stiffness <= 1.0f) && (stiffness >=0.0f)) {
                            set_hipyawpitchstiffness(stiffness);
                            set_hiprollstiffness(stiffness);
                            set_hippitchstiffness(stiffness);
                            set_kneepitchstiffness(stiffness);
                            set_anklepitchstiffness(stiffness);
                            set_anklerollstiffness(stiffness);
                        }
                    }

                    /**
                     *  Convenience function to turn off stiffness
                     *  in all the leg's joints (0.0f).
                     *
                     */
                    void setLegStiffnessOff()
                    {
                        set_hipyawpitchstiffness(0.0f);
                        set_hiprollstiffness(0.0f);
                        set_hippitchstiffness(0.0f);
                        set_kneepitchstiffness(0.0f);
                        set_anklepitchstiffness(0.0f);
                        set_anklerollstiffness(0.0f);
                    }


                    /**
                     *  Convenience function to copy stiffness settings from one HalLegTarget object to another.
                     *
                     *  @param  other    HalLegTarget object from which to copy stiffness settings.
                     *
                     */
                    void copyStiffness(const HalLegTarget &other)
                    {
                        target_hipyawpitchstiffness() = other.target_hipyawpitchstiffness();
                        target_hiprollstiffness() = other.target_hiprollstiffness();
                        target_hippitchstiffness() = other.target_hippitchstiffness();
                        target_kneepitchstiffness() = other.target_kneepitchstiffness();
                        target_anklepitchstiffness() = other.target_anklepitchstiffness();
                        target_anklerollstiffness() = other.target_anklerollstiffness();
                    }



                    /**
                     *  Tests if this HalLegTarget object has the same stiffness settings as the other HalLegTarget object.
                     *
                     *  @param  other   HalLegTarget object whose stiffness settings are being compared.
                     *  @return bool    whether the two objects have the same stiffness or not.
                     *
                     */
                    bool hasSameStiffness(const HalLegTarget &other)
                    {
                        if (
                            target_hipyawpitchstiffness() == other.target_hipyawpitchstiffness()
                            && target_hiprollstiffness() == other.target_hiprollstiffness()
                            && target_hippitchstiffness() == other.target_hippitchstiffness()
                            && target_kneepitchstiffness() == other.target_kneepitchstiffness()
                            && target_anklepitchstiffness() == other.target_anklepitchstiffness()
                            && target_anklerollstiffness() == other.target_anklerollstiffness()
                           )
                        {
                            return  true;
                        }
                        return false;
                    }

        //MARK: Leg - Pliability

                    /**
                     *  Set leg to be Active (DEDAULT DCM state)
                     *  The leg is active and manual movements will be resisted, be careful when the stiffness is set high.
                     *  Once the applied force is removed, the leg will return to its previous location.
                     *  Be careful using this with high stiffness settings (which vary per joint), as the gears will be stripped.
                     *
                     *  NOTE:  This is the default DCM mode.
                     *
                     */
                    void setLegActive()
                    {
                        set_target_hipyawpitch_active(true);
                        set_target_hiproll_active(true);
                        set_target_hippitch_active(true);
                        set_target_kneepitch_active(true);
                        set_target_anklepitch_active(true);
                        set_target_ankleroll_active(true);
                    }

                    /**
                     *  Set leg to be Passive
                     *  Manually moving the leg causes the leg to stay in the new position.
                     *  Be careful using this with high stiffness and pliability settings (which vary per joint).
                     *  The robot may/will collapse under its own weight.
                     *
                     *  NOTE:  This is achieved by telling the DCM to move the leg joints to the displaced
                     *         position each DCM cyle.  Thus the leg tracks the applied force.
                     *         The 'pliability' setting reduces the update rate, thus making the leg stiffer. At
                     *         higher pliability settings, the movement will become noticably stepped.
                     *
                     */
                    void setLegPassive()
                    {
                        set_target_hipyawpitch_active(false);
                        set_target_hiproll_active(false);
                        set_target_hippitch_active(false);
                        set_target_kneepitch_active(false);
                        set_target_anklepitch_active(false);
                        set_target_ankleroll_active(false);
                    }


                    /**
                     *  Individually set the active/passive state of each joint.
                     *  See setLegActive() and setLegPassive() methods for an explanation of the Active/Passive effect.
                     *
                     */
                    void setLegPliability(bool hipyawpitch, bool hiproll, bool hippitch,
                                        bool kneepitch, bool anklepitch, bool ankleroll)
                    {
                        set_target_hipyawpitch_active(hipyawpitch);
                        set_target_hiproll_active(hiproll);
                        set_target_hippitch_active(hippitch);
                        set_target_kneepitch_active(kneepitch);
                        set_target_anklepitch_active(anklepitch);
                        set_target_ankleroll_active(ankleroll);
                    }

                    /**
                     *  Are any of the leg's joints set to passive
                     *
                     */
                    bool isLegPassive() {
                        return !target_hipyawpitch_active() || !target_hiproll_active() || !target_hippitch_active() || !target_kneepitch_active() || !target_anklepitch_active() || !target_ankleroll_active();
                    }

                    /**
                     *  Are all of the legs's joints set to passive
                     *
                     */
                    bool isLegAllPassive() {
                        return !target_hipyawpitch_active() && !target_hiproll_active() && !target_hippitch_active() && !target_kneepitch_active() && !target_anklepitch_active() && !target_ankleroll_active();
                    }

                    /**
                     *  Are all of the leg's joints set to active
                     *
                     */
                    bool isLegAllActive() {
                        return target_hipyawpitch_active() && target_hiproll_active() && target_hippitch_active() && target_kneepitch_active() && target_anklepitch_active() && target_ankleroll_active();
                    }

        //MARK: CUSTOM SETTERS (Converting floats into Integer representations)
        /// Movement Setters (Degrees)
                    void set_hipyawpitch_DEG(float setting) {
                        set_target_hipyawpitch(static_cast<int16_t>(setting * 10.0f));
                    }

                    void set_hiproll_DEG(float setting) {
                        set_target_hiproll(static_cast<int16_t>(setting * 10.0f));
                    }

                    void set_hippitch_DEG(float setting) {
                        set_target_hippitch(static_cast<int16_t>(setting * 10.0f));
                    }

                    void set_kneepitch_DEG(float setting) {
                        set_target_kneepitch(static_cast<int16_t>(setting * 10.0f));
                    }

                    void set_anklepitch_DEG(float setting) {
                        set_target_anklepitch(static_cast<int16_t>(setting * 10.0f));
                    }

                    void set_ankleroll_DEG(float setting) {
                        set_target_ankleroll(static_cast<int16_t>(setting * 10.0f));
                    }


        /// Movement Setters (Radians)
                    void set_hipyawpitch_RAD(float setting) {
                        set_target_hipyawpitch(static_cast<int16_t>(setting* DEG_OVER_RAD_10));
                    }

                    void set_hiproll_RAD(float setting) {
                        set_target_hiproll(static_cast<int16_t>(setting * DEG_OVER_RAD_10));
                    }

                    void set_hippitch_RAD(float setting) {
                        set_target_hippitch(static_cast<int16_t>(setting * DEG_OVER_RAD_10));
                    }

                    void set_kneepitch_RAD(float setting) {
                        set_target_kneepitch(static_cast<int16_t>(setting * DEG_OVER_RAD_10));
                    }

                    void set_anklepitch_RAD(float setting) {
                        set_target_anklepitch(static_cast<int16_t>(setting * DEG_OVER_RAD_10));
                    }

                    void set_ankleroll_RAD(float setting) {
                        set_target_ankleroll(static_cast<int16_t>(setting * DEG_OVER_RAD_10));
                    }

        /// Stiffness Setters
                    void set_hipyawpitchstiffness(float setting) {
                        set_target_hipyawpitchstiffness(static_cast<uint8_t>(setting * 100.0f));
                    }

                    void set_hiprollstiffness(float setting) {
                        set_target_hiprollstiffness(static_cast<uint8_t>(setting * 100.0f));
                    }

                    void set_hippitchstiffness(float setting) {
                        set_target_hippitchstiffness(static_cast<uint8_t>(setting * 100.0f));
                    }

                    void set_kneepitchstiffness(float setting) {
                        set_target_kneepitchstiffness(static_cast<uint8_t>(setting * 100.0f));
                    }

                    void set_anklepitchstiffness(float setting) {
                        set_target_anklepitchstiffness(static_cast<uint8_t>(setting * 100.0f));
                    }

                    void set_anklerollstiffness(float setting) {
                        set_target_anklerollstiffness(static_cast<uint8_t>(setting * 100.0f));
                    }


        ///// Duration Setter
        //            void set_movement_time(int32_t time) {
        //                set_target_movement_time(time);
        //            }

        //MARK: CUSTOM GETTERS (Converting Integer representations back to floats)
        /// Movement Getters (Degrees)
                    float get_hipyawpitch_DEG() {
                        return static_cast<float>(target_hipyawpitch() * 0.1f);
                    }

                    float get_hiproll_DEG() {
                        return static_cast<float>(target_hiproll() * 0.1f);
                    }

                    float get_hippitch_DEG() {
                        return static_cast<float>(target_hippitch() * 0.1f);
                    }

                    float get_kneepitch_DEG() {
                        return static_cast<float>(target_kneepitch() * 0.1f);
                    }

                    float get_anklepitch_DEG() {
                        return static_cast<float>(target_anklepitch() * 0.1f);
                    }

                    float get_ankleroll_DEG() {
                        return static_cast<float>(target_ankleroll() * 0.1f);
                    }


        /// Movement Getters (Radians)
                    float get_hipyawpitch_RAD() {
                        return static_cast<float>(target_hipyawpitch()) * RAD_OVER_DEG_10;
                    }

                    float get_hiproll_RAD() {
                        return static_cast<float>(target_hiproll()) * RAD_OVER_DEG_10;
                    }

                    float get_hippitch_RAD() {
                        return static_cast<float>(target_hippitch()) * RAD_OVER_DEG_10;
                    }

                    float get_kneepitch_RAD() {
                        return static_cast<float>(target_kneepitch()) * RAD_OVER_DEG_10;
                    }

                    float get_anklepitch_RAD() {
                        return static_cast<float>(target_anklepitch()) * RAD_OVER_DEG_10;
                    }

                    float get_ankleroll_RAD() {
                        return static_cast<float>(target_ankleroll()) * RAD_OVER_DEG_10;
                    }

        /// Stiffness Getters
                    float get_hipyawpitchstiffness() {
                        return static_cast<float>(target_hipyawpitchstiffness()) * 0.01f;
                    }

                    float get_hiprollstiffness() {
                        return static_cast<float>(target_hiprollstiffness()) * 0.01f;
                    }

                    float get_hippitchstiffness() {
                        return static_cast<float>(target_hippitchstiffness()) * 0.01f;
                    }

                    float get_kneepitchstiffness() {
                        return static_cast<float>(target_kneepitchstiffness()) * 0.01f;
                    }

                    float get_anklepitchstiffness() {
                        return static_cast<float>(target_anklepitchstiffness()) * 0.01f;
                    }

                    float get_anklerollstiffness() {
                        return static_cast<float>(target_anklerollstiffness()) * 0.01f;
                    }
    };

} /// namespace guWhiteboard
#endif /// HalLegTarget_DEFINED
