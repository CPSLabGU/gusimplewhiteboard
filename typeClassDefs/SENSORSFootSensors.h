/** 
 * file SENSORSFootSensors.h 
 * 
 * This file was generated by classgenerator from SENSORS_FootSensors.txt. 
 * DO NOT CHANGE MANUALLY! 
 * 
 * Created by Carl Lusty on 8:2, 30/4/2016 
 * Copyright (c) 2016 Carl Lusty 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer in the documentation and/or other materials 
 *    provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this 
 *    software must display the following acknowledgement: 
 * 
 *    This product includes software developed by Carl Lusty. 
 * 
 * 4. Neither the name of the author nor the names of contributors 
 *    may be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * ----------------------------------------------------------------------- 
 * This program is free software; you can redistribute it and/or 
 * modify it under the above terms or under the terms of the GNU 
 * General Public License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses/ 
 * or write to the Free Software Foundation, Inc., 51 Franklin Street, 
 * Fifth Floor, Boston, MA  02110-1301, USA. 
 */ 


#ifndef SENSORSFootSensors_DEFINED 
#define SENSORSFootSensors_DEFINED 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
#include <cstdlib> 
#include <string.h> 
#include <sstream> 
#endif 

#include "wb_sensors_footsensors.h" 

namespace guWhiteboard 
{
    /** 
     * @brief Body sensors c struct 
     */ 
    class SENSORSFootSensors: public wb_sensors_footsensors 
    { 
    public:
        /** Constructor */ 
        SENSORSFootSensors(float LFoot_FSR_FrontLeft = 0.0f, float LFoot_FSR_FrontRight = 0.0f, float LFoot_FSR_RearLeft = 0.0f, float LFoot_FSR_RearRight = 0.0f, float LFoot_FSR_CenterOfPressure_X = 0.0f, float LFoot_FSR_CenterOfPressure_Y = 0.0f, float RFoot_FSR_FrontLeft = 0.0f, float RFoot_FSR_FrontRight = 0.0f, float RFoot_FSR_RearLeft = 0.0f, float RFoot_FSR_RearRight = 0.0f, float RFoot_FSR_CenterOfPressure_X = 0.0f, float RFoot_FSR_CenterOfPressure_Y = 0.0f, bool LFoot_Bumper_Left = false, bool LFoot_Bumper_Right = false, bool RFoot_Bumper_Left = false, bool RFoot_Bumper_Right = false)
        { 
            set_LFoot_FSR_FrontLeft(LFoot_FSR_FrontLeft); 
            set_LFoot_FSR_FrontRight(LFoot_FSR_FrontRight); 
            set_LFoot_FSR_RearLeft(LFoot_FSR_RearLeft); 
            set_LFoot_FSR_RearRight(LFoot_FSR_RearRight); 
            set_LFoot_FSR_CenterOfPressure_X(LFoot_FSR_CenterOfPressure_X); 
            set_LFoot_FSR_CenterOfPressure_Y(LFoot_FSR_CenterOfPressure_Y); 
            set_RFoot_FSR_FrontLeft(RFoot_FSR_FrontLeft); 
            set_RFoot_FSR_FrontRight(RFoot_FSR_FrontRight); 
            set_RFoot_FSR_RearLeft(RFoot_FSR_RearLeft); 
            set_RFoot_FSR_RearRight(RFoot_FSR_RearRight); 
            set_RFoot_FSR_CenterOfPressure_X(RFoot_FSR_CenterOfPressure_X); 
            set_RFoot_FSR_CenterOfPressure_Y(RFoot_FSR_CenterOfPressure_Y); 
            set_LFoot_Bumper_Left(LFoot_Bumper_Left); 
            set_LFoot_Bumper_Right(LFoot_Bumper_Right); 
            set_RFoot_Bumper_Left(RFoot_Bumper_Left); 
            set_RFoot_Bumper_Right(RFoot_Bumper_Right); 
        } 

        /** Copy Constructor */ 
        SENSORSFootSensors(const SENSORSFootSensors &other) : wb_sensors_footsensors() 
        { 
            set_LFoot_FSR_FrontLeft(other.LFoot_FSR_FrontLeft()); 
            set_LFoot_FSR_FrontRight(other.LFoot_FSR_FrontRight()); 
            set_LFoot_FSR_RearLeft(other.LFoot_FSR_RearLeft()); 
            set_LFoot_FSR_RearRight(other.LFoot_FSR_RearRight()); 
            set_LFoot_FSR_CenterOfPressure_X(other.LFoot_FSR_CenterOfPressure_X()); 
            set_LFoot_FSR_CenterOfPressure_Y(other.LFoot_FSR_CenterOfPressure_Y()); 
            set_RFoot_FSR_FrontLeft(other.RFoot_FSR_FrontLeft()); 
            set_RFoot_FSR_FrontRight(other.RFoot_FSR_FrontRight()); 
            set_RFoot_FSR_RearLeft(other.RFoot_FSR_RearLeft()); 
            set_RFoot_FSR_RearRight(other.RFoot_FSR_RearRight()); 
            set_RFoot_FSR_CenterOfPressure_X(other.RFoot_FSR_CenterOfPressure_X()); 
            set_RFoot_FSR_CenterOfPressure_Y(other.RFoot_FSR_CenterOfPressure_Y()); 
            set_LFoot_Bumper_Left(other.LFoot_Bumper_Left()); 
            set_LFoot_Bumper_Right(other.LFoot_Bumper_Right()); 
            set_RFoot_Bumper_Left(other.RFoot_Bumper_Left()); 
            set_RFoot_Bumper_Right(other.RFoot_Bumper_Right()); 
        } 

        /** Copy Assignment Operator */ 
        SENSORSFootSensors &operator = (const SENSORSFootSensors &other) 
        { 
            set_LFoot_FSR_FrontLeft(other.LFoot_FSR_FrontLeft()); 
            set_LFoot_FSR_FrontRight(other.LFoot_FSR_FrontRight()); 
            set_LFoot_FSR_RearLeft(other.LFoot_FSR_RearLeft()); 
            set_LFoot_FSR_RearRight(other.LFoot_FSR_RearRight()); 
            set_LFoot_FSR_CenterOfPressure_X(other.LFoot_FSR_CenterOfPressure_X()); 
            set_LFoot_FSR_CenterOfPressure_Y(other.LFoot_FSR_CenterOfPressure_Y()); 
            set_RFoot_FSR_FrontLeft(other.RFoot_FSR_FrontLeft()); 
            set_RFoot_FSR_FrontRight(other.RFoot_FSR_FrontRight()); 
            set_RFoot_FSR_RearLeft(other.RFoot_FSR_RearLeft()); 
            set_RFoot_FSR_RearRight(other.RFoot_FSR_RearRight()); 
            set_RFoot_FSR_CenterOfPressure_X(other.RFoot_FSR_CenterOfPressure_X()); 
            set_RFoot_FSR_CenterOfPressure_Y(other.RFoot_FSR_CenterOfPressure_Y()); 
            set_LFoot_Bumper_Left(other.LFoot_Bumper_Left()); 
            set_LFoot_Bumper_Right(other.LFoot_Bumper_Right()); 
            set_RFoot_Bumper_Left(other.RFoot_Bumper_Left()); 
            set_RFoot_Bumper_Right(other.RFoot_Bumper_Right()); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        /** String Constructor */ 
        SENSORSFootSensors(const std::string &str) { from_string(str.c_str()); }  

        std::string description() 
        { 
#ifdef USE_WB_SENSORS_FOOTSENSORS_C_CONVERSION 
            char buffer[SENSORS_FOOTSENSORS_DESC_BUFFER_SIZE]; 
            wb_sensors_footsensors_description(this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::ostringstream ss; 
            ss << "LFoot_FSR_FrontLeft=" << LFoot_FSR_FrontLeft(); 
            ss << ", "; 
            ss << "LFoot_FSR_FrontRight=" << LFoot_FSR_FrontRight(); 
            ss << ", "; 
            ss << "LFoot_FSR_RearLeft=" << LFoot_FSR_RearLeft(); 
            ss << ", "; 
            ss << "LFoot_FSR_RearRight=" << LFoot_FSR_RearRight(); 
            ss << ", "; 
            ss << "LFoot_FSR_CenterOfPressure_X=" << LFoot_FSR_CenterOfPressure_X(); 
            ss << ", "; 
            ss << "LFoot_FSR_CenterOfPressure_Y=" << LFoot_FSR_CenterOfPressure_Y(); 
            ss << ", "; 
            ss << "RFoot_FSR_FrontLeft=" << RFoot_FSR_FrontLeft(); 
            ss << ", "; 
            ss << "RFoot_FSR_FrontRight=" << RFoot_FSR_FrontRight(); 
            ss << ", "; 
            ss << "RFoot_FSR_RearLeft=" << RFoot_FSR_RearLeft(); 
            ss << ", "; 
            ss << "RFoot_FSR_RearRight=" << RFoot_FSR_RearRight(); 
            ss << ", "; 
            ss << "RFoot_FSR_CenterOfPressure_X=" << RFoot_FSR_CenterOfPressure_X(); 
            ss << ", "; 
            ss << "RFoot_FSR_CenterOfPressure_Y=" << RFoot_FSR_CenterOfPressure_Y(); 
            ss << ", "; 
            ss << "LFoot_Bumper_Left=" << LFoot_Bumper_Left(); 
            ss << ", "; 
            ss << "LFoot_Bumper_Right=" << LFoot_Bumper_Right(); 
            ss << ", "; 
            ss << "RFoot_Bumper_Left=" << RFoot_Bumper_Left(); 
            ss << ", "; 
            ss << "RFoot_Bumper_Right=" << RFoot_Bumper_Right(); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_FOOTSENSORS_C_CONVERSION
        } 

        std::string to_string() 
        { 
#ifdef USE_WB_SENSORS_FOOTSENSORS_C_CONVERSION 
            char buffer[SENSORS_FOOTSENSORS_DESC_BUFFER_SIZE]; 
            wb_sensors_footsensors_to_string(this, buffer, sizeof(buffer)); 
            std::string toString = buffer; 
            return toString; 
#else 
            std::ostringstream ss; 
            ss << LFoot_FSR_FrontLeft(); 
            ss << ", "; 
            ss << LFoot_FSR_FrontRight(); 
            ss << ", "; 
            ss << LFoot_FSR_RearLeft(); 
            ss << ", "; 
            ss << LFoot_FSR_RearRight(); 
            ss << ", "; 
            ss << LFoot_FSR_CenterOfPressure_X(); 
            ss << ", "; 
            ss << LFoot_FSR_CenterOfPressure_Y(); 
            ss << ", "; 
            ss << RFoot_FSR_FrontLeft(); 
            ss << ", "; 
            ss << RFoot_FSR_FrontRight(); 
            ss << ", "; 
            ss << RFoot_FSR_RearLeft(); 
            ss << ", "; 
            ss << RFoot_FSR_RearRight(); 
            ss << ", "; 
            ss << RFoot_FSR_CenterOfPressure_X(); 
            ss << ", "; 
            ss << RFoot_FSR_CenterOfPressure_Y(); 
            ss << ", "; 
            ss << LFoot_Bumper_Left(); 
            ss << ", "; 
            ss << LFoot_Bumper_Right(); 
            ss << ", "; 
            ss << RFoot_Bumper_Left(); 
            ss << ", "; 
            ss << RFoot_Bumper_Right(); 

            return ss.str(); 

#endif /// USE_WB_SENSORS_FOOTSENSORS_C_CONVERSION
        } 

        void from_string(const std::string &str) 
        { 
#ifdef USE_WB_SENSORS_FOOTSENSORS_C_CONVERSION 
            wb_sensors_footsensors_from_string(this, str); 
#else 
            std::istringstream iss(str); 
            std::string strings[SENSORS_FOOTSENSORS_NUMBER_OF_VARIABLES]; 
            memset(strings, 0, sizeof(strings)); 
            std::string token; 
            int count = 0; 
            while (getline(iss, token, ',')) 
            { 
                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 

                size_t pos = token.find('='); 

                if (pos != std::string::npos) 
                { 
                     token.erase(0, pos+1); 
                } 

                token.erase(token.find_last_not_of(' ') + 1);   // trim right 
                token.erase(0, token.find_first_not_of(' '));   // trim left 
                strings[count] = token; 
                count++; 
            } 

            if (!strings[0].empty()) 
                set_LFoot_FSR_FrontLeft(float(atof(strings[0].c_str()))); 

            if (!strings[1].empty()) 
                set_LFoot_FSR_FrontRight(float(atof(strings[1].c_str()))); 

            if (!strings[2].empty()) 
                set_LFoot_FSR_RearLeft(float(atof(strings[2].c_str()))); 

            if (!strings[3].empty()) 
                set_LFoot_FSR_RearRight(float(atof(strings[3].c_str()))); 

            if (!strings[4].empty()) 
                set_LFoot_FSR_CenterOfPressure_X(float(atof(strings[4].c_str()))); 

            if (!strings[5].empty()) 
                set_LFoot_FSR_CenterOfPressure_Y(float(atof(strings[5].c_str()))); 

            if (!strings[6].empty()) 
                set_RFoot_FSR_FrontLeft(float(atof(strings[6].c_str()))); 

            if (!strings[7].empty()) 
                set_RFoot_FSR_FrontRight(float(atof(strings[7].c_str()))); 

            if (!strings[8].empty()) 
                set_RFoot_FSR_RearLeft(float(atof(strings[8].c_str()))); 

            if (!strings[9].empty()) 
                set_RFoot_FSR_RearRight(float(atof(strings[9].c_str()))); 

            if (!strings[10].empty()) 
                set_RFoot_FSR_CenterOfPressure_X(float(atof(strings[10].c_str()))); 

            if (!strings[11].empty()) 
                set_RFoot_FSR_CenterOfPressure_Y(float(atof(strings[11].c_str()))); 

            if (!strings[12].empty()) 
                set_LFoot_Bumper_Left(strings[12].compare("true") == 0  || strings[12].compare("1") == 0 ? true : false); 

            if (!strings[13].empty()) 
                set_LFoot_Bumper_Right(strings[13].compare("true") == 0  || strings[13].compare("1") == 0 ? true : false); 

            if (!strings[14].empty()) 
                set_RFoot_Bumper_Left(strings[14].compare("true") == 0  || strings[14].compare("1") == 0 ? true : false); 

            if (!strings[15].empty()) 
                set_RFoot_Bumper_Right(strings[15].compare("true") == 0  || strings[15].compare("1") == 0 ? true : false); 

#endif /// USE_WB_SENSORS_FOOTSENSORS_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
#endif /// SENSORSFootSensors_DEFINED 
