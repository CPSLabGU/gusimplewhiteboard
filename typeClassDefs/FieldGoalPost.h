/*
 * file FieldGoalPost.h
 *
 * This file was generated by classgenerator from fieldGoalPost.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Carl Lusty at 07:40, 13/04/2018.
 * Copyright Â© 2018 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef FieldGoalPost_DEFINED
#define FieldGoalPost_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include "gu_util.h"
#include "wb_field_goal_post.h"

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_field_goal_post`.
     */
    class FieldGoalPost: public wb_field_goal_post {

    public:

        /**
         * Create a new `FieldGoalPost`.
         */
        FieldGoalPost(enum GoalOptions goalType = FoundNothing, uint16_t tlx = 0, uint16_t tly = 0, uint16_t trx = 0, uint16_t try = 0, uint16_t blx = 0, uint16_t bly = 0, uint16_t brx = 0, uint16_t bry = 0) {
            set_goalType(goalType);
            set_tlx(tlx);
            set_tly(tly);
            set_trx(trx);
            set_try(try);
            set_blx(blx);
            set_bly(bly);
            set_brx(brx);
            set_bry(bry);
        }

        /**
         * Copy Constructor.
         */
        FieldGoalPost(const FieldGoalPost &other): wb_field_goal_post() {
            set_goalType(other.goalType());
            set_tlx(other.tlx());
            set_tly(other.tly());
            set_trx(other.trx());
            set_try(other.try());
            set_blx(other.blx());
            set_bly(other.bly());
            set_brx(other.brx());
            set_bry(other.bry());
        }

        /**
         * Copy Assignment Operator.
         */
        FieldGoalPost &operator = (const FieldGoalPost &other) {
            set_goalType(other.goalType());
            set_tlx(other.tlx());
            set_tly(other.tly());
            set_trx(other.trx());
            set_try(other.try());
            set_blx(other.blx());
            set_bly(other.bly());
            set_brx(other.brx());
            set_bry(other.bry());
            return *this;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        FieldGoalPost(const std::string &str) { wb_field_goal_post_from_string(this, str.c_str()); }

        std::string description() {
#ifdef USE_WB_FIELD_GOAL_POST_C_CONVERSION
            char buffer[FIELDGOALPOST_DESC_BUFFER_SIZE];
            wb_field_goal_post_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            ss << "goalType=" << static_cast<signed>(this->goalType());
            ss << ", ";
            ss << "tlx=" << static_cast<unsigned>(this->tlx());
            ss << ", ";
            ss << "tly=" << static_cast<unsigned>(this->tly());
            ss << ", ";
            ss << "trx=" << static_cast<unsigned>(this->trx());
            ss << ", ";
            ss << "try=" << static_cast<unsigned>(this->try());
            ss << ", ";
            ss << "blx=" << static_cast<unsigned>(this->blx());
            ss << ", ";
            ss << "bly=" << static_cast<unsigned>(this->bly());
            ss << ", ";
            ss << "brx=" << static_cast<unsigned>(this->brx());
            ss << ", ";
            ss << "bry=" << static_cast<unsigned>(this->bry());
            return ss.str();
#endif /// USE_WB_FIELD_GOAL_POST_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_FIELD_GOAL_POST_C_CONVERSION
            char buffer[FIELDGOALPOST_TO_STRING_BUFFER_SIZE];
            wb_field_goal_post_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            ss << static_cast<signed>(this->goalType());
            ss << ", ";
            ss << static_cast<unsigned>(this->tlx());
            ss << ", ";
            ss << static_cast<unsigned>(this->tly());
            ss << ", ";
            ss << static_cast<unsigned>(this->trx());
            ss << ", ";
            ss << static_cast<unsigned>(this->try());
            ss << ", ";
            ss << static_cast<unsigned>(this->blx());
            ss << ", ";
            ss << static_cast<unsigned>(this->bly());
            ss << ", ";
            ss << static_cast<unsigned>(this->brx());
            ss << ", ";
            ss << static_cast<unsigned>(this->bry());
            return ss.str();
#endif /// USE_WB_FIELD_GOAL_POST_C_CONVERSION
        }

        void from_string(const std::string &str) {
#ifdef USE_WB_FIELDGOALPOST_C_CONVERSION
            wb_field_goal_post_from_string(this, str.c_str());
#else
            char var[255];
            unsigned long goalType_index = str.find("goalType=");
            if (goalType_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(goalType_index, str.length()).c_str(), "goalType = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_goalType(static_cast<enum GoalOptions>(atoi(value.c_str())));
                }
            }
            unsigned long tlx_index = str.find(" tlx=");
            if (tlx_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(tlx_index + 1, str.length()).c_str(), "tlx = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_tlx(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long tly_index = str.find(" tly=");
            if (tly_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(tly_index + 1, str.length()).c_str(), "tly = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_tly(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long trx_index = str.find(" trx=");
            if (trx_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(trx_index + 1, str.length()).c_str(), "trx = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_trx(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long try_index = str.find(" try=");
            if (try_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(try_index + 1, str.length()).c_str(), "try = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_try(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long blx_index = str.find(" blx=");
            if (blx_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(blx_index + 1, str.length()).c_str(), "blx = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_blx(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long bly_index = str.find(" bly=");
            if (bly_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(bly_index + 1, str.length()).c_str(), "bly = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_bly(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long brx_index = str.find(" brx=");
            if (brx_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(brx_index + 1, str.length()).c_str(), "brx = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_brx(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
            unsigned long bry_index = str.find(" bry=");
            if (bry_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(bry_index + 1, str.length()).c_str(), "bry = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_bry(static_cast<uint16_t>(atoi(value.c_str())));
                }
            }
#endif /// USE_WB_FIELDGOALPOST_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION
    };

} /// namespace guWhiteboard
#endif /// FieldGoalPost_DEFINED
