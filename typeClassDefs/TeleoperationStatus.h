/*
 * file TeleoperationStatus.h
 *
 * This file was generated by classgenerator from teleoperationStatus.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Carl Lusty at 13:00, 14/05/2018.
 * Copyright Â© 2018 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef TeleoperationStatus_DEFINED
#define TeleoperationStatus_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include <gu_util.h>
#include "wb_teleoperation_status.h"

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_teleoperation_status`.
     */
    class TeleoperationStatus: public wb_teleoperation_status {

    public:

        /**
         * Create a new `TeleoperationStatus`.
         */
        TeleoperationStatus(std::string sayString = "") {
            gu_strlcpy(const_cast<char *>(this->sayString()), sayString.c_str(), 30);
        }

        /**
         * Copy Constructor.
         */
        TeleoperationStatus(const TeleoperationStatus &other): wb_teleoperation_status() {
            gu_strlcpy(const_cast<char *>(this->sayString()), other.sayString(), 30);
        }

        /**
         * Copy Assignment Operator.
         */
        TeleoperationStatus &operator = (const TeleoperationStatus &other) {
            gu_strlcpy(const_cast<char *>(this->sayString()), other.sayString(), 30);
            return *this;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        TeleoperationStatus(const std::string &str) { wb_teleoperation_status_from_string(this, str.c_str()); }

        std::string description() {
#ifdef USE_WB_TELEOPERATION_STATUS_C_CONVERSION
            char buffer[TELEOPERATIONSTATUS_DESC_BUFFER_SIZE];
            wb_teleoperation_status_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            if (0 == strncmp("", this->sayString(), 1)) {
                ss << "sayString=" << "";
            } else {
                ss << "sayString=" << this->sayString();
            }
            return ss.str();
#endif /// USE_WB_TELEOPERATION_STATUS_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_TELEOPERATION_STATUS_C_CONVERSION
            char buffer[TELEOPERATIONSTATUS_TO_STRING_BUFFER_SIZE];
            wb_teleoperation_status_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            if (0 == strncmp("", this->sayString(), 1)) {
                ss << "";
            } else {
                ss << this->sayString();
            }
            return ss.str();
#endif /// USE_WB_TELEOPERATION_STATUS_C_CONVERSION
        }

#ifdef USE_WB_TELEOPERATIONSTATUS_C_CONVERSION
        void from_string(const std::string &str) {
            wb_teleoperation_status_from_string(this, str.c_str());
#else
        void from_string(const std::string &str) {
            char var[255];
            unsigned long sayString_index = str.find("sayString=");
            if (sayString_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(sayString_index, str.length()).c_str(), "sayString = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    gu_strlcpy(const_cast<char *>(this->sayString()), value.c_str(), 30);
                }
            }
#endif /// USE_WB_TELEOPERATIONSTATUS_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION
    };

} /// namespace guWhiteboard
#endif /// TeleoperationStatus_DEFINED
