/*
 * file Input3D.h
 *
 * This file was generated by classgenerator from Input3D.txt.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Carl Lusty at 14:39, 24/01/2018.
 * Copyright Â© 2018 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef Input3D_DEFINED
#define Input3D_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include "gu_util.h"
#include "wb_input3d.h"

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_input3d`.
     */
    class Input3D: public wb_input3d {

    public:

        /**
         * Create a new `Input3D`.
         */
        Input3D(int16_t yaw = 0, int16_t pitch = 0, int16_t roll = 0, int16_t power = 0) {
            set_yaw(yaw);
            set_pitch(pitch);
            set_roll(roll);
            set_power(power);
        }

        /**
         * Copy Constructor.
         */
        Input3D(const Input3D &other): wb_input3d() {
            set_yaw(other.yaw());
            set_pitch(other.pitch());
            set_roll(other.roll());
            set_power(other.power());
        }

        /**
         * Copy Assignment Operator.
         */
        Input3D &operator = (const Input3D &other) {
            set_yaw(other.yaw());
            set_pitch(other.pitch());
            set_roll(other.roll());
            set_power(other.power());
            return *this;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        Input3D(const std::string &str) { wb_input3d_from_string(this, str.c_str()); }

        std::string description() {
#ifdef USE_WB_INPUT3D_C_CONVERSION
            char buffer[INPUT3D_DESC_BUFFER_SIZE];
            wb_input3d_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            ss << "yaw=" << static_cast<signed>(this->yaw());
            ss << ", ";
            ss << "pitch=" << static_cast<signed>(this->pitch());
            ss << ", ";
            ss << "roll=" << static_cast<signed>(this->roll());
            ss << ", ";
            ss << "power=" << static_cast<signed>(this->power());
            return ss.str();
#endif /// USE_WB_INPUT3D_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_INPUT3D_C_CONVERSION
            char buffer[INPUT3D_TO_STRING_BUFFER_SIZE];
            wb_input3d_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            ss << static_cast<signed>(this->yaw());
            ss << ", ";
            ss << static_cast<signed>(this->pitch());
            ss << ", ";
            ss << static_cast<signed>(this->roll());
            ss << ", ";
            ss << static_cast<signed>(this->power());
            return ss.str();
#endif /// USE_WB_INPUT3D_C_CONVERSION
        }

        void from_string(const std::string &str) {
#ifdef USE_WB_INPUT3D_C_CONVERSION
            wb_input3d_from_string(this, str.c_str());
#else
            char var[255];
            unsigned long yaw_index = str.find("yaw=");
            if (yaw_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(yaw_index, str.length()).c_str(), "yaw = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_yaw(static_cast<int16_t>(atoi(value.c_str())));
                }
            }
            unsigned long pitch_index = str.find(" pitch=");
            if (pitch_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(pitch_index + 1, str.length()).c_str(), "pitch = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_pitch(static_cast<int16_t>(atoi(value.c_str())));
                }
            }
            unsigned long roll_index = str.find(" roll=");
            if (roll_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(roll_index + 1, str.length()).c_str(), "roll = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_roll(static_cast<int16_t>(atoi(value.c_str())));
                }
            }
            unsigned long power_index = str.find(" power=");
            if (power_index != std::string::npos) {
                memset(&var[0], 0, sizeof(var));
                if (sscanf(str.substr(power_index + 1, str.length()).c_str(), "power = %[^,]", var) == 1) {
                    std::string value = std::string(var);
                    set_power(static_cast<int16_t>(atoi(value.c_str())));
                }
            }
#endif /// USE_WB_INPUT3D_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION
    };

} /// namespace guWhiteboard
#endif /// Input3D_DEFINED
