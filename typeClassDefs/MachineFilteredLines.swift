/*
 * file MachineFilteredLines.swift
 *
 * This file was generated by classgenerator from machine_filtered_lines.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2019 Callum McColl. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Callum McColl.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * Results of the KalmanFilter machines for lines.
 */
extension wb_machine_filtered_lines {

    public var _sightings: [wb_line_sighting] {
        get {
            var sightings = self.sightings
            return withUnsafePointer(to: &sightings.0) { sightings_p in
                var sightings: [wb_line_sighting] = []
                sightings.reserveCapacity(8)
                for sightings_index in 0..<8 {
                    sightings.append(sightings_p[sightings_index])
                }
                return sightings
            }
        } set {
            _ = withUnsafeMutablePointer(to: &self.sightings.0) { sightings_p in
                for sightings_index in 0..<8 {
                    sightings_p[sightings_index] = newValue[sightings_index]
                }
            }
        }
    }

    /**
     * Create a new `wb_machine_filtered_lines`.
     */
    public static func make() -> wb_machine_filtered_lines {
        return wb_machine_filtered_lines(0)
    }

    /**
     * Create a new `wb_machine_filtered_lines`.
     */
    public init(_ numberOfSightings: UInt8 = 0, sightings: [wb_line_sighting] = [wb_line_sighting(), wb_line_sighting(), wb_line_sighting(), wb_line_sighting(), wb_line_sighting(), wb_line_sighting(), wb_line_sighting(), wb_line_sighting()]) {
        self.init()
        self.numberOfSightings = numberOfSightings
        self._sightings = sightings
    }

    /**
     * Create a `wb_machine_filtered_lines` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let numberOfSightings = dictionary["numberOfSightings"] as? UInt8,
            var sightings = dictionary["sightings"]
        else {
            fatalError("Unable to convert \(dictionary) to wb_machine_filtered_lines.")
        }
        self.numberOfSightings = numberOfSightings
        self.sightings = withUnsafePointer(to: &sightings) {
            $0.withMemoryRebound(to: type(of: wb_machine_filtered_lines().sightings), capacity: 1) {
                $0.pointee
            }
        }
    }

}

extension wb_machine_filtered_lines: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "numberOfSightings=\(self.numberOfSightings)"
        descString += ", "
        if self._sightings.isEmpty {
            descString += "sightings={}"
        } else {
            let first = "{" + self.sightings.0.description + "}"
            descString += "sightings={"
            descString += self._sightings.dropFirst().reduce("\(first)") { $0 + ", " + "{" + $1.description + "}" }
            descString += "}"
        }
        return descString
    }

}

extension wb_machine_filtered_lines: Equatable {}

public func == (lhs: wb_machine_filtered_lines, rhs: wb_machine_filtered_lines) -> Bool {
    return lhs.numberOfSightings == rhs.numberOfSightings
        && lhs._sightings == rhs._sightings
}
