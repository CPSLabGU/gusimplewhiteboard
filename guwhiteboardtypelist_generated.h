/**                                                                     
 *  /file guwhiteboardtypelist_generated.h                              
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     
                                                                        
                                                                        
#ifndef _GUWHITEBOARD_TYPELIST_H_                                       
#define _GUWHITEBOARD_TYPELIST_H_                                       
                                                                        
#include "gugenericwhiteboardobject.h"                                
                                                                        
                                                                        
//Generated on: Mon Feb 18 14:46:24 2013
//Generated by user: carl
                              
namespace guWhiteboard                                                  
{                                                                       
                                                                        
extern "C"                                                            
{                                                                       
#include "guwhiteboardtypelist_c_generated.h"                         
}                                                                       
                                                                        
	///print to stdout
        class kPrint_t : public generic_whiteboard_object<std::string> { public: kPrint_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<std::string>(wbd, kPrint) {} };

	///speech output message
        class kSay_t : public generic_whiteboard_object<std::string> { public: kSay_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<std::string>(wbd, kSay) {} };

	///debug speech message
        class kSpeech_t : public generic_whiteboard_object<std::string> { public: kSpeech_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<std::string>(wbd, kSpeech) {} };

	///speech output message (queued)
        class kQSay_t : public generic_whiteboard_object<std::string> { public: kQSay_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<std::string>(wbd, kQSay) {} };

	///debug speech message (queued)
        class kQSpeech_t : public generic_whiteboard_object<std::string> { public: kQSpeech_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<std::string>(wbd, kQSpeech) {} };

	///toggle, treat speech messages as silent output unless this is turned on
        class kSpeechOutput_t : public generic_whiteboard_object<bool> { public: kSpeechOutput_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<bool>(wbd, kSpeechOutput) {} };

	///This is a test to see of the vision pipeline runs from the new wb to the old one using a generated class template.
        class kRunVisionPipelineTest_t : public generic_whiteboard_object<bool> { public: kRunVisionPipelineTest_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<bool>(wbd, kRunVisionPipelineTest) {} };

	///Is the walk engine ready to run.
        class RunningClass_t : public generic_whiteboard_object<class RunningClass> { public: RunningClass_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<class RunningClass>(wbd, kNaoIsReadyToRun) {} };

	///uiyguh
        class kNaoIsReadyToRun2_t : public generic_whiteboard_object<bool> { public: kNaoIsReadyToRun2_t(gu_simple_whiteboard_descriptor *wbd = NULL) : generic_whiteboard_object<bool>(wbd, kNaoIsReadyToRun2) {} };

}

#endif                          
